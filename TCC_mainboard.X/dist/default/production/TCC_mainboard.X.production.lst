

Microchip Technology PIC LITE Macro Assembler V1.20 build 52243 
                                                                                               Mon Oct 10 22:46:03 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     	;# 
    34  0001                     	;# 
    35  0002                     	;# 
    36  0003                     	;# 
    37  0004                     	;# 
    38  0005                     	;# 
    39  0006                     	;# 
    40  0007                     	;# 
    41  0008                     	;# 
    42  0009                     	;# 
    43  000A                     	;# 
    44  000B                     	;# 
    45  000C                     	;# 
    46  000D                     	;# 
    47  000E                     	;# 
    48  000E                     	;# 
    49  000F                     	;# 
    50  0010                     	;# 
    51  0011                     	;# 
    52  0012                     	;# 
    53  0013                     	;# 
    54  0014                     	;# 
    55  0015                     	;# 
    56  0015                     	;# 
    57  0016                     	;# 
    58  0017                     	;# 
    59  0018                     	;# 
    60  0019                     	;# 
    61  001A                     	;# 
    62  001B                     	;# 
    63  001B                     	;# 
    64  001C                     	;# 
    65  001D                     	;# 
    66  001E                     	;# 
    67  001F                     	;# 
    68  0081                     	;# 
    69  0085                     	;# 
    70  0086                     	;# 
    71  0087                     	;# 
    72  0088                     	;# 
    73  0089                     	;# 
    74  008C                     	;# 
    75  008D                     	;# 
    76  008E                     	;# 
    77  0091                     	;# 
    78  0092                     	;# 
    79  0093                     	;# 
    80  0094                     	;# 
    81  0098                     	;# 
    82  0099                     	;# 
    83  009C                     	;# 
    84  009D                     	;# 
    85  009E                     	;# 
    86  009F                     	;# 
    87  010C                     	;# 
    88  010D                     	;# 
    89  010E                     	;# 
    90  010F                     	;# 
    91  018C                     	;# 
    92  018D                     	;# 
    93  0000                     	;# 
    94  0001                     	;# 
    95  0002                     	;# 
    96  0003                     	;# 
    97  0004                     	;# 
    98  0005                     	;# 
    99  0006                     	;# 
   100  0007                     	;# 
   101  0008                     	;# 
   102  0009                     	;# 
   103  000A                     	;# 
   104  000B                     	;# 
   105  000C                     	;# 
   106  000D                     	;# 
   107  000E                     	;# 
   108  000E                     	;# 
   109  000F                     	;# 
   110  0010                     	;# 
   111  0011                     	;# 
   112  0012                     	;# 
   113  0013                     	;# 
   114  0014                     	;# 
   115  0015                     	;# 
   116  0015                     	;# 
   117  0016                     	;# 
   118  0017                     	;# 
   119  0018                     	;# 
   120  0019                     	;# 
   121  001A                     	;# 
   122  001B                     	;# 
   123  001B                     	;# 
   124  001C                     	;# 
   125  001D                     	;# 
   126  001E                     	;# 
   127  001F                     	;# 
   128  0081                     	;# 
   129  0085                     	;# 
   130  0086                     	;# 
   131  0087                     	;# 
   132  0088                     	;# 
   133  0089                     	;# 
   134  008C                     	;# 
   135  008D                     	;# 
   136  008E                     	;# 
   137  0091                     	;# 
   138  0092                     	;# 
   139  0093                     	;# 
   140  0094                     	;# 
   141  0098                     	;# 
   142  0099                     	;# 
   143  009C                     	;# 
   144  009D                     	;# 
   145  009E                     	;# 
   146  009F                     	;# 
   147  010C                     	;# 
   148  010D                     	;# 
   149  010E                     	;# 
   150  010F                     	;# 
   151  018C                     	;# 
   152  018D                     	;# 
   153                           
   154                           	psect	idataBANK0
   155  030C                     __pidataBANK0:	
   156                           
   157                           ;initializer for _Tensao
   158  030C  347B               	retlw	123
   159  030D  347A               	retlw	122
   160  030E  3400               	retlw	0
   161                           
   162                           	psect	nvBANK0
   163  004F                     __pnvBANK0:	
   164  004F                     _TemporizadorSerialW:	
   165  004F                     	ds	2
   166  0051                     _ModuloCM:	
   167  0051                     	ds	9
   168  000B                     _INTCON	set	11
   169  000B                     _INTCONbits	set	11
   170  000C                     _PIR1bits	set	12
   171  0006                     _PORTB	set	6
   172  0008                     _PORTD	set	8
   173  0008                     _PORTDbits	set	8
   174  001A                     _RCREG	set	26
   175  0018                     _RCSTA	set	24
   176  0018                     _RCSTAbits	set	24
   177  0014                     _SSPCON	set	20
   178  0001                     _TMR0	set	1
   179  0019                     _TXREG	set	25
   180  0081                     _OPTION_REG	set	129
   181  008C                     _PIE1bits	set	140
   182  0099                     _SPBRG	set	153
   183  0093                     _SSPADD	set	147
   184  0091                     _SSPCON2	set	145
   185  0091                     _SSPCON2bits	set	145
   186  0094                     _SSPSTAT	set	148
   187  0086                     _TRISB	set	134
   188  0088                     _TRISD	set	136
   189  0098                     _TXSTA	set	152
   190  0098                     _TXSTAbits	set	152
   191  043B                     _TRISC3	set	1083
   192  043C                     _TRISC4	set	1084
   193                           
   194                           ; #config settings
   195  0000                     
   196                           	psect	cinit
   197  0266                     start_initialization:	
   198  0266                     __initialization:	
   199                           
   200                           ; Clear objects allocated to BANK0
   201  0266  1383               	bcf	3,7	;select IRP bank0
   202  0267  3020               	movlw	low __pbssBANK0
   203  0268  0084               	movwf	4
   204  0269  304F               	movlw	low (__pbssBANK0+47)
   205  026A  120A  118A  22FE   	fcall	clear_ram0
      +       120A  118A         
   206                           
   207                           ; Initialize objects allocated to BANK0
   208  026F  120A  118A  230C   	fcall	__pidataBANK0	;fetch initializer
      +       120A  118A         
   209  0274  00E0               	movwf	__pdataBANK0& (0+127)
   210  0275  120A  118A  230D   	fcall	__pidataBANK0+1	;fetch initializer
      +       120A  118A         
   211  027A  00E1               	movwf	(__pdataBANK0+1)& (0+127)
   212  027B  120A  118A  230E   	fcall	__pidataBANK0+2	;fetch initializer
   213  027E  00E2               	movwf	(__pdataBANK0+2)& (0+127)
   214  027F                     end_of_initialization:	
   215                           ;End of C runtime variable initialization code
   216                           
   217  027F                     __end_of__initialization:	
   218  027F  0183               	clrf	3
   219  0280  120A  118A  2A83   	ljmp	_main	;jump to C main() function
   220                           
   221                           	psect	bssBANK0
   222  0020                     __pbssBANK0:	
   223  0020                     _RTC:	
   224  0020                     	ds	2
   225  0022                     _Temporizador1:	
   226  0022                     	ds	2
   227  0024                     _TemporizadorPortb:	
   228  0024                     	ds	2
   229  0026                     _TemporizadorSerialR:	
   230  0026                     	ds	2
   231  0028                     _clearPORTB:	
   232  0028                     	ds	1
   233  0029                     _BufferRead:	
   234  0029                     	ds	19
   235  003C                     _BufferWrite:	
   236  003C                     	ds	19
   237                           
   238                           	psect	dataBANK0
   239  0060                     __pdataBANK0:	
   240  0060                     _Tensao:	
   241  0060                     	ds	3
   242                           
   243                           	psect	clrtext
   244  02FE                     clear_ram0:	
   245                           ;	Called with FSR containing the base address, and
   246                           ;	W with the last address+1
   247                           
   248  02FE  0064               	clrwdt	;clear the watchdog before getting into this loop
   249  02FF                     clrloop0:	
   250  02FF  0180               	clrf	0	;clear RAM location pointed to by FSR
   251  0300  0A84               	incf	4,f	;increment pointer
   252  0301  0604               	xorwf	4,w	;XOR with final address
   253  0302  1903               	btfsc	3,2	;have we reached the end yet?
   254  0303  3400               	retlw	0	;all done for this memory range, return
   255  0304  0604               	xorwf	4,w	;XOR again to restore value
   256  0305  2AFF               	goto	clrloop0	;do the next byte
   257                           
   258                           	psect	cstackCOMMON
   259  0070                     __pcstackCOMMON:	
   260  0070                     ?_Serial_Interrupt:	
   261  0070                     ?_Serial_Write:	
   262                           ; 0 bytes @ 0x0
   263                           
   264  0070                     ?_Serial_Flush:	
   265                           ; 0 bytes @ 0x0
   266                           
   267  0070                     ?_Interrupcao:	
   268                           ; 0 bytes @ 0x0
   269                           
   270  0070                     ?_EnvioDadosSerial:	
   271                           ; 0 bytes @ 0x0
   272                           
   273  0070                     ?_TrataComandoESP:	
   274                           ; 0 bytes @ 0x0
   275                           
   276  0070                     ?_Setup:	
   277                           ; 0 bytes @ 0x0
   278                           
   279  0070                     ?i1_inserir:	
   280                           ; 0 bytes @ 0x0
   281                           
   282  0070                     ??i1_remover:	
   283                           ; 0 bytes @ 0x0
   284                           
   285  0070                     ??i1_estaVazia:	
   286                           ; 0 bytes @ 0x0
   287                           
   288  0070                     ??i1_estaCheia:	
   289                           ; 0 bytes @ 0x0
   290                           
   291  0070                     ?_estaVazia:	
   292                           ; 0 bytes @ 0x0
   293                           
   294  0070                     ?_remover:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ?_estaCheia:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ?_Serial_Read:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ?_Serial_Available:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ?i1_remover:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0070                     ?i1_estaVazia:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0070                     ?i1_estaCheia:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ?_main:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0070                     i1inserir@Valor:	
   319                           ; 2 bytes @ 0x0
   320                           
   321  0070                     i1estaVazia@buf:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     i1estaCheia@buf:	
   325                           ; 1 bytes @ 0x0
   326                           
   327                           
   328                           ; 1 bytes @ 0x0
   329  0070                     	ds	1
   330  0071                     ??i1_inserir:	
   331                           
   332                           ; 0 bytes @ 0x1
   333  0071                     	ds	2
   334  0073                     i1inserir@buf:	
   335  0073                     i1remover@temp:	
   336                           ; 1 bytes @ 0x3
   337                           
   338                           
   339                           ; 2 bytes @ 0x3
   340  0073                     	ds	2
   341  0075                     i1remover@buf:	
   342                           
   343                           ; 1 bytes @ 0x5
   344  0075                     	ds	1
   345  0076                     ??_Serial_Interrupt:	
   346                           
   347                           ; 0 bytes @ 0x6
   348  0076                     	ds	1
   349  0077                     Serial_Interrupt@tmp:	
   350                           
   351                           ; 1 bytes @ 0x7
   352  0077                     	ds	1
   353  0078                     ??_Interrupcao:	
   354                           
   355                           ; 0 bytes @ 0x8
   356  0078                     	ds	5
   357                           
   358                           	psect	cstackBANK0
   359  005A                     __pcstackBANK0:	
   360  005A                     ??_estaVazia:	
   361  005A                     ??_remover:	
   362                           ; 0 bytes @ 0x0
   363                           
   364  005A                     ??_estaCheia:	
   365                           ; 0 bytes @ 0x0
   366                           
   367  005A                     ?_inserir:	
   368                           ; 0 bytes @ 0x0
   369                           
   370  005A                     ?_Serial_9600_Init:	
   371                           ; 0 bytes @ 0x0
   372                           
   373  005A                     ??_Serial_Flush:	
   374                           ; 0 bytes @ 0x0
   375                           
   376  005A                     inserir@Valor:	
   377                           ; 0 bytes @ 0x0
   378                           
   379  005A                     estaVazia@buf:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  005A                     estaCheia@buf:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  005A                     Serial_9600_Init@osc_freq:	
   386                           ; 1 bytes @ 0x0
   387                           
   388                           
   389                           ; 2 bytes @ 0x0
   390  005A                     	ds	1
   391  005B                     ??_inserir:	
   392  005B                     ??_Serial_Available:	
   393                           ; 0 bytes @ 0x1
   394                           
   395                           
   396                           ; 0 bytes @ 0x1
   397  005B                     	ds	1
   398  005C                     ??_Serial_9600_Init:	
   399  005C                     ??_Setup:	
   400                           ; 0 bytes @ 0x2
   401                           
   402                           
   403                           ; 0 bytes @ 0x2
   404  005C                     	ds	1
   405  005D                     inserir@buf:	
   406  005D                     remover@temp:	
   407                           ; 1 bytes @ 0x3
   408                           
   409                           
   410                           ; 2 bytes @ 0x3
   411  005D                     	ds	1
   412  005E                     ??_Serial_Write:	
   413                           
   414                           ; 0 bytes @ 0x4
   415  005E                     	ds	1
   416  005F                     Serial_Write@Valor:	
   417  005F                     remover@buf:	
   418                           ; 1 bytes @ 0x5
   419                           
   420                           
   421                           ; 1 bytes @ 0x5
   422  005F                     	ds	1
   423  0060                     ??_Serial_Read:	
   424  0060                     ??_EnvioDadosSerial:	
   425                           ; 0 bytes @ 0x6
   426                           
   427  0060                     ??_TrataComandoESP:	
   428                           ; 0 bytes @ 0x6
   429                           
   430  0060                     ??_main:	
   431                           ; 0 bytes @ 0x6
   432                           
   433                           
   434                           	psect	maintext
   435  0283                     __pmaintext:	
   436                           ; 0 bytes @ 0x6
   437 ;;
   438 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   439 ;;
   440 ;; *************** function _main *****************
   441 ;; Defined at:
   442 ;;		line 164 in file "TCC_Main.c"
   443 ;; Parameters:    Size  Location     Type
   444 ;;		None
   445 ;; Auto vars:     Size  Location     Type
   446 ;;		None
   447 ;; Return value:  Size  Location     Type
   448 ;;                  2  168[COMMON] int 
   449 ;; Registers used:
   450 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   451 ;; Tracked objects:
   452 ;;		On entry : 17F/0
   453 ;;		On exit  : 0/0
   454 ;;		Unchanged: 0/0
   455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   456 ;;      Params:         0       0       0       0       0
   457 ;;      Locals:         0       0       0       0       0
   458 ;;      Temps:          0       0       0       0       0
   459 ;;      Totals:         0       0       0       0       0
   460 ;;Total ram usage:        0 bytes
   461 ;; Hardware stack levels required when called:    6
   462 ;; This function calls:
   463 ;;		_EnvioDadosSerial
   464 ;;		_TrataComandoESP
   465 ;;		_Setup
   466 ;; This function is called by:
   467 ;;		Startup code after reset
   468 ;; This function uses a non-reentrant model
   469 ;;
   470                           
   471                           
   472                           ;psect for function _main
   473  0283                     _main:	
   474                           
   475                           ;TCC_Main.c: 165: Setup();
   476                           
   477                           ;incstack = 0
   478                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   479  0283  120A  118A  215B   	fcall	_Setup
      +       120A  118A         
   480                           
   481                           ;TCC_Main.c: 166: PORTDbits.RD0 = 1;
   482  0288  1283               	bcf	3,5	;RP0=0, select bank0
   483  0289  1303               	bcf	3,6	;RP1=0, select bank0
   484  028A  1408               	bsf	8,0	;volatile
   485  028B                     l169:	
   486                           ;TCC_Main.c: 167: while(1)
   487                           
   488                           
   489                           ;TCC_Main.c: 168: {
   490                           ;TCC_Main.c: 169: EnvioDadosSerial();
   491  028B  120A  118A  2015   	fcall	_EnvioDadosSerial
      +       120A  118A         
   492                           
   493                           ;TCC_Main.c: 170: TrataComandoESP();
   494  0290  120A  118A  211F   	fcall	_TrataComandoESP
      +       120A  118A         
   495                           
   496                           ;TCC_Main.c: 172: if (Temporizador1 == 0)
   497  0295  1283               	bcf	3,5	;RP0=0, select bank0
   498  0296  1303               	bcf	3,6	;RP1=0, select bank0
   499  0297  0823               	movf	_Temporizador1+1,w
   500  0298  0422               	iorwf	_Temporizador1,w
   501  0299  1D03               	skipz
   502  029A  2A8B               	goto	l169
   503                           
   504                           ;TCC_Main.c: 173: {
   505                           ;TCC_Main.c: 174: Temporizador1 = 5000;
   506  029B  3088               	movlw	136
   507  029C  00A2               	movwf	_Temporizador1
   508  029D  3013               	movlw	19
   509  029E  00A3               	movwf	_Temporizador1+1
   510  029F  2A8B               	goto	l169
   511  02A0                     __end_of_main:	
   512                           
   513                           	psect	text1
   514  015B                     __ptext1:	
   515 ;; *************** function _Setup *****************
   516 ;; Defined at:
   517 ;;		line 140 in file "TCC_Main.c"
   518 ;; Parameters:    Size  Location     Type
   519 ;;		None
   520 ;; Auto vars:     Size  Location     Type
   521 ;;		None
   522 ;; Return value:  Size  Location     Type
   523 ;;		None               void
   524 ;; Registers used:
   525 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   526 ;; Tracked objects:
   527 ;;		On entry : 0/0
   528 ;;		On exit  : 0/0
   529 ;;		Unchanged: 0/0
   530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   531 ;;      Params:         0       0       0       0       0
   532 ;;      Locals:         0       0       0       0       0
   533 ;;      Temps:          0       1       0       0       0
   534 ;;      Totals:         0       1       0       0       0
   535 ;;Total ram usage:        1 bytes
   536 ;; Hardware stack levels used:    1
   537 ;; Hardware stack levels required when called:    4
   538 ;; This function calls:
   539 ;;		_Serial_9600_Init
   540 ;; This function is called by:
   541 ;;		_main
   542 ;; This function uses a non-reentrant model
   543 ;;
   544                           
   545                           
   546                           ;psect for function _Setup
   547  015B                     _Setup:	
   548                           
   549                           ;TCC_Main.c: 141: TRISB = 0;
   550                           
   551                           ;incstack = 0
   552                           ; Regs used in _Setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   553  015B  1683               	bsf	3,5	;RP0=1, select bank1
   554  015C  1303               	bcf	3,6	;RP1=0, select bank1
   555  015D  0186               	clrf	6	;volatile
   556                           
   557                           ;TCC_Main.c: 142: PORTB = 0;
   558  015E  1283               	bcf	3,5	;RP0=0, select bank0
   559  015F  1303               	bcf	3,6	;RP1=0, select bank0
   560  0160  0186               	clrf	6	;volatile
   561                           
   562                           ;TCC_Main.c: 143: TRISD = 0;
   563  0161  1683               	bsf	3,5	;RP0=1, select bank1
   564  0162  1303               	bcf	3,6	;RP1=0, select bank1
   565  0163  0188               	clrf	8	;volatile
   566                           
   567                           ;TCC_Main.c: 144: PORTD = 0;
   568  0164  1283               	bcf	3,5	;RP0=0, select bank0
   569  0165  1303               	bcf	3,6	;RP1=0, select bank0
   570  0166  0188               	clrf	8	;volatile
   571                           
   572                           ;TCC_Main.c: 146: OPTION_REG = 0b00000000;
   573  0167  1683               	bsf	3,5	;RP0=1, select bank1
   574  0168  1303               	bcf	3,6	;RP1=0, select bank1
   575  0169  0181               	clrf	1	;volatile
   576                           
   577                           ;TCC_Main.c: 147: TMR0 = 130;
   578  016A  3082               	movlw	130
   579  016B  1283               	bcf	3,5	;RP0=0, select bank0
   580  016C  1303               	bcf	3,6	;RP1=0, select bank0
   581  016D  0081               	movwf	1	;volatile
   582                           
   583                           ;TCC_Main.c: 148: INTCON = 0b11100000;
   584  016E  30E0               	movlw	224
   585  016F  008B               	movwf	11	;volatile
   586                           
   587                           ;TCC_Main.c: 150: Serial_9600_Init(10);
   588  0170  300A               	movlw	10
   589  0171  00DA               	movwf	?_Serial_9600_Init
   590  0172  3000               	movlw	0
   591  0173  00DB               	movwf	?_Serial_9600_Init+1
   592  0174  120A  118A  218E   	fcall	_Serial_9600_Init
   593                           
   594                           ;TCC_Main.c: 154: ModuloCM.status = 0b00001100;
   595  0177  300C               	movlw	12
   596  0178  1283               	bcf	3,5	;RP0=0, select bank0
   597  0179  1303               	bcf	3,6	;RP1=0, select bank0
   598  017A  00DC               	movwf	??_Setup
   599  017B  085C               	movf	??_Setup,w
   600  017C  00D1               	movwf	_ModuloCM
   601                           
   602                           ;TCC_Main.c: 155: ModuloCM.corrente[0] = 50;
   603  017D  3032               	movlw	50
   604  017E  00D2               	movwf	_ModuloCM+1
   605  017F  3000               	movlw	0
   606  0180  00D3               	movwf	_ModuloCM+2
   607                           
   608                           ;TCC_Main.c: 156: ModuloCM.corrente[1] = 34;
   609  0181  3022               	movlw	34
   610  0182  00D4               	movwf	_ModuloCM+3
   611  0183  3000               	movlw	0
   612  0184  00D5               	movwf	_ModuloCM+4
   613                           
   614                           ;TCC_Main.c: 157: ModuloCM.corrente[2] = 0;
   615  0185  01D6               	clrf	_ModuloCM+5
   616  0186  01D7               	clrf	_ModuloCM+6
   617                           
   618                           ;TCC_Main.c: 158: ModuloCM.corrente[3] = 0;
   619  0187  01D8               	clrf	_ModuloCM+7
   620  0188  01D9               	clrf	_ModuloCM+8
   621                           
   622                           ;TCC_Main.c: 160: TemporizadorSerialW = 20000;
   623  0189  3020               	movlw	32
   624  018A  00CF               	movwf	_TemporizadorSerialW
   625  018B  304E               	movlw	78
   626  018C  00D0               	movwf	_TemporizadorSerialW+1
   627  018D  0008               	return
   628  018E                     __end_of_Setup:	
   629                           
   630                           	psect	text2
   631  018E                     __ptext2:	
   632 ;; *************** function _Serial_9600_Init *****************
   633 ;; Defined at:
   634 ;;		line 7 in file "Serial.c"
   635 ;; Parameters:    Size  Location     Type
   636 ;;  osc_freq        2    0[BANK0 ] int 
   637 ;; Auto vars:     Size  Location     Type
   638 ;;		None
   639 ;; Return value:  Size  Location     Type
   640 ;;		None               void
   641 ;; Registers used:
   642 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   643 ;; Tracked objects:
   644 ;;		On entry : 0/0
   645 ;;		On exit  : 0/0
   646 ;;		Unchanged: 0/0
   647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   648 ;;      Params:         0       2       0       0       0
   649 ;;      Locals:         0       0       0       0       0
   650 ;;      Temps:          0       0       0       0       0
   651 ;;      Totals:         0       2       0       0       0
   652 ;;Total ram usage:        2 bytes
   653 ;; Hardware stack levels used:    1
   654 ;; Hardware stack levels required when called:    3
   655 ;; This function calls:
   656 ;;		Nothing
   657 ;; This function is called by:
   658 ;;		_Setup
   659 ;; This function uses a non-reentrant model
   660 ;;
   661                           
   662                           
   663                           ;psect for function _Serial_9600_Init
   664  018E                     _Serial_9600_Init:	
   665                           
   666                           ;Serial.c: 8: TXSTA = 0b00100000;
   667                           
   668                           ;incstack = 0
   669                           ; Regs used in _Serial_9600_Init: [wreg-fsr0h+status,2+status,0]
   670  018E  3020               	movlw	32
   671  018F  1683               	bsf	3,5	;RP0=1, select bank1
   672  0190  1303               	bcf	3,6	;RP1=0, select bank1
   673  0191  0098               	movwf	24	;volatile
   674                           
   675                           ;Serial.c: 9: RCSTA = 0b10010000;
   676  0192  3090               	movlw	144
   677  0193  1283               	bcf	3,5	;RP0=0, select bank0
   678  0194  1303               	bcf	3,6	;RP1=0, select bank0
   679  0195  0098               	movwf	24	;volatile
   680                           
   681                           ;Serial.c: 10: switch(osc_freq)
   682  0196  29A0               	goto	l894
   683  0197                     l886:	
   684                           ;Serial.c: 11: {
   685                           ;Serial.c: 12: case 10:
   686                           
   687                           
   688                           ;Serial.c: 13: SPBRG = 15;
   689  0197  300F               	movlw	15
   690  0198  299C               	goto	L2
   691  0199                     l888:	
   692                           ;Serial.c: 15: case 16:
   693                           
   694                           ;Serial.c: 14: break;
   695                           
   696                           
   697                           ;Serial.c: 16: SPBRG = 103;
   698  0199  3067               	movlw	103
   699  019A  299C               	goto	L2
   700  019B                     l890:	
   701                           ;Serial.c: 18: case 20:
   702                           
   703                           ;Serial.c: 17: break;
   704                           
   705                           
   706                           ;Serial.c: 19: SPBRG = 129;
   707  019B  3081               	movlw	129
   708  019C                     L2:	
   709  019C  1683               	bsf	3,5	;RP0=1, select bank1
   710  019D  1303               	bcf	3,6	;RP1=0, select bank1
   711  019E  0099               	movwf	25	;volatile
   712                           
   713                           ;Serial.c: 21: }
   714                           
   715                           ;Serial.c: 20: break;
   716  019F  29B1               	goto	l37
   717  01A0                     l894:	
   718                           
   719                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   720                           ; Switch size 1, requested type "space"
   721                           ; Number of cases is 1, Range of values is 0 to 0
   722                           ; switch strategies available:
   723                           ; Name         Instructions Cycles
   724                           ; simple_byte            4     3 (average)
   725                           ; direct_byte           11     8 (fixed)
   726                           ; jumptable            260     6 (fixed)
   727                           ; rangetable             5     6 (fixed)
   728                           ; spacedrange            8     9 (fixed)
   729                           ; locatedrange           1     3 (fixed)
   730                           ;	Chosen strategy is simple_byte
   731  01A0  1283               	bcf	3,5	;RP0=0, select bank0
   732  01A1  085B               	movf	Serial_9600_Init@osc_freq+1,w
   733  01A2  3A00               	xorlw	0	; case 0
   734  01A3  1903               	skipnz
   735  01A4  29A6               	goto	l1100
   736  01A5  29B1               	goto	l37
   737  01A6                     l1100:	
   738                           
   739                           ; Switch size 1, requested type "space"
   740                           ; Number of cases is 3, Range of values is 10 to 20
   741                           ; switch strategies available:
   742                           ; Name         Instructions Cycles
   743                           ; simple_byte           10     6 (average)
   744                           ; direct_byte           44    11 (fixed)
   745                           ; jumptable            263     9 (fixed)
   746                           ;	Chosen strategy is simple_byte
   747  01A6  085A               	movf	Serial_9600_Init@osc_freq,w
   748  01A7  3A0A               	xorlw	10	; case 10
   749  01A8  1903               	skipnz
   750  01A9  2997               	goto	l886
   751  01AA  3A1A               	xorlw	26	; case 16
   752  01AB  1903               	skipnz
   753  01AC  2999               	goto	l888
   754  01AD  3A04               	xorlw	4	; case 20
   755  01AE  1903               	skipnz
   756  01AF  299B               	goto	l890
   757  01B0  29B1               	goto	l37
   758  01B1                     l37:	
   759                           
   760                           ;Serial.c: 23: PIE1bits.RCIE = 1;
   761  01B1  1683               	bsf	3,5	;RP0=1, select bank1
   762  01B2  1303               	bcf	3,6	;RP1=0, select bank1
   763  01B3  168C               	bsf	12,5	;volatile
   764                           
   765                           ;Serial.c: 25: BufferWrite.primeiro = 0;
   766  01B4  1283               	bcf	3,5	;RP0=0, select bank0
   767  01B5  1303               	bcf	3,6	;RP1=0, select bank0
   768  01B6  01CC               	clrf	_BufferWrite+16
   769                           
   770                           ;Serial.c: 26: BufferWrite.ultimo = 0;
   771  01B7  01CD               	clrf	_BufferWrite+17
   772                           
   773                           ;Serial.c: 27: BufferWrite.nItens = 0;
   774  01B8  01CE               	clrf	_BufferWrite+18
   775                           
   776                           ;Serial.c: 28: BufferRead.primeiro = 0;
   777  01B9  01B9               	clrf	_BufferRead+16
   778                           
   779                           ;Serial.c: 29: BufferRead.ultimo = 0;
   780  01BA  01BA               	clrf	_BufferRead+17
   781                           
   782                           ;Serial.c: 30: BufferRead.nItens = 0;
   783  01BB  01BB               	clrf	_BufferRead+18
   784                           
   785                           ;Serial.c: 32: TXREG = 0x00;
   786  01BC  0199               	clrf	25	;volatile
   787  01BD  0008               	return
   788  01BE                     __end_of_Serial_9600_Init:	
   789                           
   790                           	psect	text3
   791  011F                     __ptext3:	
   792 ;; *************** function _TrataComandoESP *****************
   793 ;; Defined at:
   794 ;;		line 97 in file "TCC_Main.c"
   795 ;; Parameters:    Size  Location     Type
   796 ;;		None
   797 ;; Auto vars:     Size  Location     Type
   798 ;;		None
   799 ;; Return value:  Size  Location     Type
   800 ;;		None               void
   801 ;; Registers used:
   802 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   803 ;; Tracked objects:
   804 ;;		On entry : 0/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   808 ;;      Params:         0       0       0       0       0
   809 ;;      Locals:         0       0       0       0       0
   810 ;;      Temps:          0       0       0       0       0
   811 ;;      Totals:         0       0       0       0       0
   812 ;;Total ram usage:        0 bytes
   813 ;; Hardware stack levels used:    1
   814 ;; Hardware stack levels required when called:    5
   815 ;; This function calls:
   816 ;;		_Serial_Read
   817 ;;		_Serial_Available
   818 ;;		_Serial_Flush
   819 ;; This function is called by:
   820 ;;		_main
   821 ;; This function uses a non-reentrant model
   822 ;;
   823                           
   824                           
   825                           ;psect for function _TrataComandoESP
   826  011F                     _TrataComandoESP:	
   827                           
   828                           ;TCC_Main.c: 98: if(TemporizadorSerialR == 0)
   829                           
   830                           ;incstack = 0
   831                           ; Regs used in _TrataComandoESP: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   832  011F  1283               	bcf	3,5	;RP0=0, select bank0
   833  0120  1303               	bcf	3,6	;RP1=0, select bank0
   834  0121  0827               	movf	_TemporizadorSerialR+1,w
   835  0122  0426               	iorwf	_TemporizadorSerialR,w
   836  0123  1D03               	skipz
   837  0124  294D               	goto	l974
   838                           
   839                           ;TCC_Main.c: 99: {
   840                           ;TCC_Main.c: 100: TemporizadorSerialR = 5000;
   841  0125  3088               	movlw	136
   842  0126  00A6               	movwf	_TemporizadorSerialR
   843  0127  3013               	movlw	19
   844  0128  00A7               	movwf	_TemporizadorSerialR+1
   845  0129                     l972:	
   846                           ;TCC_Main.c: 102: while(Serial_Available())
   847                           
   848  0129  120A  118A  22F5   	fcall	_Serial_Available
      +       120A  118A         
   849  012E  3800               	iorlw	0
   850  012F  1903               	btfsc	3,2
   851  0130  294D               	goto	l974
   852                           
   853                           ;TCC_Main.c: 103: {
   854                           ;TCC_Main.c: 106: Serial_Read();
   855  0131  120A  118A  22B7   	fcall	_Serial_Read
      +       120A  118A         
   856                           
   857                           ;TCC_Main.c: 107: clearPORTB = 1;
   858  0136  1283               	bcf	3,5	;RP0=0, select bank0
   859  0137  1303               	bcf	3,6	;RP1=0, select bank0
   860  0138  01A8               	clrf	_clearPORTB
   861  0139  0AA8               	incf	_clearPORTB,f
   862                           
   863                           ;TCC_Main.c: 108: TemporizadorPortb = 2000;
   864  013A  30D0               	movlw	208
   865  013B  00A4               	movwf	_TemporizadorPortb
   866  013C  3007               	movlw	7
   867  013D  00A5               	movwf	_TemporizadorPortb+1
   868                           
   869                           ;TCC_Main.c: 109: PORTDbits.RD0 = 1;
   870  013E  1408               	bsf	8,0	;volatile
   871                           
   872                           ;TCC_Main.c: 110: PORTB = Serial_Read();
   873  013F  120A  118A  22B7   	fcall	_Serial_Read
      +       120A  118A         
   874  0144  1283               	bcf	3,5	;RP0=0, select bank0
   875  0145  1303               	bcf	3,6	;RP1=0, select bank0
   876  0146  0086               	movwf	6	;volatile
   877                           
   878                           ;TCC_Main.c: 111: Serial_Flush();
   879  0147  120A  118A  2306   	fcall	_Serial_Flush
      +       120A  118A         
   880  014C  2929               	goto	l972
   881  014D                     l974:	
   882                           
   883                           ;TCC_Main.c: 113: }
   884                           ;TCC_Main.c: 114: }
   885                           ;TCC_Main.c: 116: if(clearPORTB == 1 && TemporizadorPortb == 0)
   886  014D  1283               	bcf	3,5	;RP0=0, select bank0
   887  014E  1303               	bcf	3,6	;RP1=0, select bank0
   888  014F  0828               	movf	_clearPORTB,w
   889  0150  3A01               	xorlw	1
   890  0151  1D03               	skipz
   891  0152  0008               	return
   892  0153  0825               	movf	_TemporizadorPortb+1,w
   893  0154  0424               	iorwf	_TemporizadorPortb,w
   894  0155  1D03               	skipz
   895  0156  0008               	return
   896                           
   897                           ;TCC_Main.c: 117: {
   898                           ;TCC_Main.c: 118: clearPORTB = 0;
   899  0157  01A8               	clrf	_clearPORTB
   900                           
   901                           ;TCC_Main.c: 119: PORTB = 0;
   902  0158  0186               	clrf	6	;volatile
   903                           
   904                           ;TCC_Main.c: 120: PORTDbits.RD0 = 0;
   905  0159  1008               	bcf	8,0	;volatile
   906  015A  0008               	return
   907  015B                     __end_of_TrataComandoESP:	
   908                           
   909                           	psect	text4
   910  0306                     __ptext4:	
   911 ;; *************** function _Serial_Flush *****************
   912 ;; Defined at:
   913 ;;		line 82 in file "Serial.c"
   914 ;; Parameters:    Size  Location     Type
   915 ;;		None
   916 ;; Auto vars:     Size  Location     Type
   917 ;;		None
   918 ;; Return value:  Size  Location     Type
   919 ;;		None               void
   920 ;; Registers used:
   921 ;;		status,2
   922 ;; Tracked objects:
   923 ;;		On entry : 0/0
   924 ;;		On exit  : 0/0
   925 ;;		Unchanged: 0/0
   926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   927 ;;      Params:         0       0       0       0       0
   928 ;;      Locals:         0       0       0       0       0
   929 ;;      Temps:          0       0       0       0       0
   930 ;;      Totals:         0       0       0       0       0
   931 ;;Total ram usage:        0 bytes
   932 ;; Hardware stack levels used:    1
   933 ;; Hardware stack levels required when called:    3
   934 ;; This function calls:
   935 ;;		Nothing
   936 ;; This function is called by:
   937 ;;		_TrataComandoESP
   938 ;; This function uses a non-reentrant model
   939 ;;
   940                           
   941                           
   942                           ;psect for function _Serial_Flush
   943  0306                     _Serial_Flush:	
   944                           
   945                           ;Serial.c: 83: BufferRead.primeiro = 0;
   946                           
   947                           ;incstack = 0
   948                           ; Regs used in _Serial_Flush: [status,2]
   949  0306  1283               	bcf	3,5	;RP0=0, select bank0
   950  0307  1303               	bcf	3,6	;RP1=0, select bank0
   951  0308  01B9               	clrf	_BufferRead+16
   952                           
   953                           ;Serial.c: 84: BufferRead.ultimo = 0;
   954  0309  01BA               	clrf	_BufferRead+17
   955                           
   956                           ;Serial.c: 85: BufferRead.nItens = 0;
   957  030A  01BB               	clrf	_BufferRead+18
   958  030B  0008               	return
   959  030C                     __end_of_Serial_Flush:	
   960                           
   961                           	psect	text5
   962  02F5                     __ptext5:	
   963 ;; *************** function _Serial_Available *****************
   964 ;; Defined at:
   965 ;;		line 77 in file "Serial.c"
   966 ;; Parameters:    Size  Location     Type
   967 ;;		None
   968 ;; Auto vars:     Size  Location     Type
   969 ;;		None
   970 ;; Return value:  Size  Location     Type
   971 ;;                  1    wreg      unsigned char 
   972 ;; Registers used:
   973 ;;		wreg, fsr0l, fsr0h, pclath, cstack
   974 ;; Tracked objects:
   975 ;;		On entry : 0/0
   976 ;;		On exit  : 0/0
   977 ;;		Unchanged: 0/0
   978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   979 ;;      Params:         0       0       0       0       0
   980 ;;      Locals:         0       0       0       0       0
   981 ;;      Temps:          0       0       0       0       0
   982 ;;      Totals:         0       0       0       0       0
   983 ;;Total ram usage:        0 bytes
   984 ;; Hardware stack levels used:    1
   985 ;; Hardware stack levels required when called:    4
   986 ;; This function calls:
   987 ;;		_estaVazia
   988 ;; This function is called by:
   989 ;;		_TrataComandoESP
   990 ;; This function uses a non-reentrant model
   991 ;;
   992                           
   993                           
   994                           ;psect for function _Serial_Available
   995  02F5                     _Serial_Available:	
   996                           
   997                           ;Serial.c: 78: return (!estaVazia(&BufferRead));
   998                           
   999                           ;incstack = 0
  1000                           ; Regs used in _Serial_Available: [wreg-fsr0h+pclath+cstack]
  1001  02F5  3029               	movlw	_BufferRead& (0+255)
  1002  02F6  120A  118A  22D4   	fcall	_estaVazia
  1003  02F9  3A00               	xorlw	0
  1004  02FA  3000               	movlw	0
  1005  02FB  1903               	skipnz
  1006  02FC  3001               	movlw	1
  1007  02FD  0008               	return
  1008  02FE                     __end_of_Serial_Available:	
  1009                           
  1010                           	psect	text6
  1011  02B7                     __ptext6:	
  1012 ;; *************** function _Serial_Read *****************
  1013 ;; Defined at:
  1014 ;;		line 69 in file "Serial.c"
  1015 ;; Parameters:    Size  Location     Type
  1016 ;;		None
  1017 ;; Auto vars:     Size  Location     Type
  1018 ;;		None
  1019 ;; Return value:  Size  Location     Type
  1020 ;;                  1    wreg      unsigned char 
  1021 ;; Registers used:
  1022 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1023 ;; Tracked objects:
  1024 ;;		On entry : 0/0
  1025 ;;		On exit  : 0/0
  1026 ;;		Unchanged: 0/0
  1027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1028 ;;      Params:         0       0       0       0       0
  1029 ;;      Locals:         0       0       0       0       0
  1030 ;;      Temps:          0       0       0       0       0
  1031 ;;      Totals:         0       0       0       0       0
  1032 ;;Total ram usage:        0 bytes
  1033 ;; Hardware stack levels used:    1
  1034 ;; Hardware stack levels required when called:    4
  1035 ;; This function calls:
  1036 ;;		_estaVazia
  1037 ;;		_remover
  1038 ;; This function is called by:
  1039 ;;		_TrataComandoESP
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           
  1044                           ;psect for function _Serial_Read
  1045  02B7                     _Serial_Read:	
  1046                           
  1047                           ;Serial.c: 70: if(!estaVazia(&BufferRead))
  1048                           
  1049                           ;incstack = 0
  1050                           ; Regs used in _Serial_Read: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1051  02B7  3029               	movlw	_BufferRead& (0+255)
  1052  02B8  120A  118A  22D4   	fcall	_estaVazia
      +       120A  118A         
  1053  02BD  3800               	iorlw	0
  1054  02BE  1D03               	skipz
  1055  02BF  2AC5               	goto	l940
  1056                           
  1057                           ;Serial.c: 71: return remover(&BufferRead);
  1058  02C0  3029               	movlw	_BufferRead& (0+255)
  1059  02C1  120A  118A  21BE   	fcall	_remover
  1060  02C4  0008               	return
  1061  02C5                     l940:	
  1062                           
  1063                           ;Serial.c: 72: else
  1064                           ;Serial.c: 73: return 0;
  1065  02C5  3000               	movlw	0
  1066  02C6  0008               	return
  1067  02C7                     __end_of_Serial_Read:	
  1068                           
  1069                           	psect	text7
  1070  01BE                     __ptext7:	
  1071 ;; *************** function _remover *****************
  1072 ;; Defined at:
  1073 ;;		line 101 in file "Serial.c"
  1074 ;; Parameters:    Size  Location     Type
  1075 ;;  buf             1    wreg     PTR struct fila
  1076 ;;		 -> BufferRead(19), BufferWrite(19), 
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;  buf             1    5[BANK0 ] PTR struct fila
  1079 ;;		 -> BufferRead(19), BufferWrite(19), 
  1080 ;;  temp            2    3[BANK0 ] int 
  1081 ;; Return value:  Size  Location     Type
  1082 ;;                  1    wreg      unsigned char 
  1083 ;; Registers used:
  1084 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1085 ;; Tracked objects:
  1086 ;;		On entry : 0/0
  1087 ;;		On exit  : 0/0
  1088 ;;		Unchanged: 0/0
  1089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1090 ;;      Params:         0       0       0       0       0
  1091 ;;      Locals:         0       3       0       0       0
  1092 ;;      Temps:          0       3       0       0       0
  1093 ;;      Totals:         0       6       0       0       0
  1094 ;;Total ram usage:        6 bytes
  1095 ;; Hardware stack levels used:    1
  1096 ;; Hardware stack levels required when called:    3
  1097 ;; This function calls:
  1098 ;;		Nothing
  1099 ;; This function is called by:
  1100 ;;		_Serial_Read
  1101 ;; This function uses a non-reentrant model
  1102 ;;
  1103                           
  1104                           
  1105                           ;psect for function _remover
  1106  01BE                     _remover:	
  1107                           
  1108                           ;incstack = 0
  1109                           ; Regs used in _remover: [wreg-fsr0h+status,2+status,0]
  1110                           ;remover@buf stored from wreg
  1111  01BE  1283               	bcf	3,5	;RP0=0, select bank0
  1112  01BF  1303               	bcf	3,6	;RP1=0, select bank0
  1113  01C0  00DF               	movwf	remover@buf
  1114                           
  1115                           ;Serial.c: 102: int temp = buf->dados[buf->primeiro++];
  1116  01C1  085F               	movf	remover@buf,w
  1117  01C2  3E10               	addlw	16
  1118  01C3  0084               	movwf	4
  1119  01C4  1383               	bcf	3,7	;select IRP bank0
  1120  01C5  0800               	movf	0,w
  1121  01C6  075F               	addwf	remover@buf,w
  1122  01C7  00DA               	movwf	??_remover
  1123  01C8  085A               	movf	??_remover,w
  1124  01C9  0084               	movwf	4
  1125  01CA  0800               	movf	0,w
  1126  01CB  00DB               	movwf	??_remover+1
  1127  01CC  01DC               	clrf	??_remover+2
  1128  01CD  085B               	movf	??_remover+1,w
  1129  01CE  00DD               	movwf	remover@temp
  1130  01CF  085C               	movf	??_remover+2,w
  1131  01D0  00DE               	movwf	remover@temp+1
  1132  01D1  3001               	movlw	1
  1133  01D2  00DA               	movwf	??_remover
  1134  01D3  085F               	movf	remover@buf,w
  1135  01D4  3E10               	addlw	16
  1136  01D5  0084               	movwf	4
  1137  01D6  085A               	movf	??_remover,w
  1138  01D7  0780               	addwf	0,f
  1139                           
  1140                           ;Serial.c: 104: if(buf->primeiro == 16)
  1141  01D8  085F               	movf	remover@buf,w
  1142  01D9  3E10               	addlw	16
  1143  01DA  0084               	movwf	4
  1144  01DB  0800               	movf	0,w
  1145  01DC  3A10               	xorlw	16
  1146  01DD  1D03               	skipz
  1147  01DE  29E3               	goto	l912
  1148                           
  1149                           ;Serial.c: 105: buf->primeiro = 0;
  1150  01DF  085F               	movf	remover@buf,w
  1151  01E0  3E10               	addlw	16
  1152  01E1  0084               	movwf	4
  1153  01E2  0180               	clrf	0
  1154  01E3                     l912:	
  1155                           
  1156                           ;Serial.c: 107: buf->nItens--;
  1157  01E3  085F               	movf	remover@buf,w
  1158  01E4  3E12               	addlw	18
  1159  01E5  0084               	movwf	4
  1160  01E6  3001               	movlw	1
  1161  01E7  0280               	subwf	0,f
  1162                           
  1163                           ;Serial.c: 108: return temp;
  1164  01E8  085D               	movf	remover@temp,w
  1165  01E9  0008               	return
  1166  01EA                     __end_of_remover:	
  1167                           
  1168                           	psect	text8
  1169  02D4                     __ptext8:	
  1170 ;; *************** function _estaVazia *****************
  1171 ;; Defined at:
  1172 ;;		line 112 in file "Serial.c"
  1173 ;; Parameters:    Size  Location     Type
  1174 ;;  buf             1    wreg     PTR struct fila
  1175 ;;		 -> BufferRead(19), BufferWrite(19), 
  1176 ;; Auto vars:     Size  Location     Type
  1177 ;;  buf             1    0[BANK0 ] PTR struct fila
  1178 ;;		 -> BufferRead(19), BufferWrite(19), 
  1179 ;; Return value:  Size  Location     Type
  1180 ;;                  1    wreg      unsigned char 
  1181 ;; Registers used:
  1182 ;;		wreg, fsr0l, fsr0h
  1183 ;; Tracked objects:
  1184 ;;		On entry : 0/0
  1185 ;;		On exit  : 0/0
  1186 ;;		Unchanged: 0/0
  1187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1188 ;;      Params:         0       0       0       0       0
  1189 ;;      Locals:         0       1       0       0       0
  1190 ;;      Temps:          0       0       0       0       0
  1191 ;;      Totals:         0       1       0       0       0
  1192 ;;Total ram usage:        1 bytes
  1193 ;; Hardware stack levels used:    1
  1194 ;; Hardware stack levels required when called:    3
  1195 ;; This function calls:
  1196 ;;		Nothing
  1197 ;; This function is called by:
  1198 ;;		_Serial_Read
  1199 ;;		_Serial_Available
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203                           
  1204                           ;psect for function _estaVazia
  1205  02D4                     _estaVazia:	
  1206                           
  1207                           ;incstack = 0
  1208                           ; Regs used in _estaVazia: [wregfsr0]
  1209                           ;estaVazia@buf stored from wreg
  1210  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  1211  02D5  1303               	bcf	3,6	;RP1=0, select bank0
  1212  02D6  00DA               	movwf	estaVazia@buf
  1213                           
  1214                           ;Serial.c: 113: return (buf->nItens==0);
  1215  02D7  085A               	movf	estaVazia@buf,w
  1216  02D8  3E12               	addlw	18
  1217  02D9  0084               	movwf	4
  1218  02DA  1383               	bcf	3,7	;select IRP bank0
  1219  02DB  0880               	movf	0,f
  1220  02DC  3000               	movlw	0
  1221  02DD  1903               	skipnz
  1222  02DE  3001               	movlw	1
  1223  02DF  0008               	return
  1224  02E0                     __end_of_estaVazia:	
  1225                           
  1226                           	psect	text9
  1227  0015                     __ptext9:	
  1228 ;; *************** function _EnvioDadosSerial *****************
  1229 ;; Defined at:
  1230 ;;		line 73 in file "TCC_Main.c"
  1231 ;; Parameters:    Size  Location     Type
  1232 ;;		None
  1233 ;; Auto vars:     Size  Location     Type
  1234 ;;		None
  1235 ;; Return value:  Size  Location     Type
  1236 ;;		None               void
  1237 ;; Registers used:
  1238 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1239 ;; Tracked objects:
  1240 ;;		On entry : 0/0
  1241 ;;		On exit  : 0/0
  1242 ;;		Unchanged: 0/0
  1243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1244 ;;      Params:         0       0       0       0       0
  1245 ;;      Locals:         0       0       0       0       0
  1246 ;;      Temps:          0       0       0       0       0
  1247 ;;      Totals:         0       0       0       0       0
  1248 ;;Total ram usage:        0 bytes
  1249 ;; Hardware stack levels used:    1
  1250 ;; Hardware stack levels required when called:    5
  1251 ;; This function calls:
  1252 ;;		_Serial_Write
  1253 ;; This function is called by:
  1254 ;;		_main
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258                           
  1259                           ;psect for function _EnvioDadosSerial
  1260  0015                     _EnvioDadosSerial:	
  1261                           
  1262                           ;TCC_Main.c: 74: if(TemporizadorSerialW == 0)
  1263                           
  1264                           ;incstack = 0
  1265                           ; Regs used in _EnvioDadosSerial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1266  0015  1283               	bcf	3,5	;RP0=0, select bank0
  1267  0016  1303               	bcf	3,6	;RP1=0, select bank0
  1268  0017  0850               	movf	_TemporizadorSerialW+1,w
  1269  0018  044F               	iorwf	_TemporizadorSerialW,w
  1270  0019  1D03               	skipz
  1271  001A  0008               	return
  1272                           
  1273                           ;TCC_Main.c: 75: {
  1274                           ;TCC_Main.c: 76: Serial_Write(0xFF);
  1275  001B  30FF               	movlw	255
  1276  001C  120A  118A  22A0   	fcall	_Serial_Write
      +       120A  118A         
  1277                           
  1278                           ;TCC_Main.c: 77: Serial_Write(0xFF);
  1279  0021  30FF               	movlw	255
  1280  0022  120A  118A  22A0   	fcall	_Serial_Write
      +       120A  118A         
  1281                           
  1282                           ;TCC_Main.c: 78: Serial_Write(Tensao[0]);
  1283  0027  1283               	bcf	3,5	;RP0=0, select bank0
  1284  0028  1303               	bcf	3,6	;RP1=0, select bank0
  1285  0029  0860               	movf	_Tensao,w
  1286  002A  120A  118A  22A0   	fcall	_Serial_Write
      +       120A  118A         
  1287                           
  1288                           ;TCC_Main.c: 79: Serial_Write(Tensao[1]);
  1289  002F  1283               	bcf	3,5	;RP0=0, select bank0
  1290  0030  1303               	bcf	3,6	;RP1=0, select bank0
  1291  0031  0861               	movf	_Tensao+1,w
  1292  0032  120A  118A  22A0   	fcall	_Serial_Write
      +       120A  118A         
  1293                           
  1294                           ;TCC_Main.c: 80: Serial_Write(Tensao[2]);
  1295  0037  1283               	bcf	3,5	;RP0=0, select bank0
  1296  0038  1303               	bcf	3,6	;RP1=0, select bank0
  1297  0039  0862               	movf	_Tensao+2,w
  1298  003A  120A  118A  22A0   	fcall	_Serial_Write
      +       120A  118A         
  1299                           
  1300                           ;TCC_Main.c: 81: Serial_Write(ModuloCM.status);
  1301  003F  1283               	bcf	3,5	;RP0=0, select bank0
  1302  0040  1303               	bcf	3,6	;RP1=0, select bank0
  1303  0041  0851               	movf	_ModuloCM,w
  1304  0042  120A  118A  22A0   	fcall	_Serial_Write
      +       120A  118A         
  1305                           
  1306                           ;TCC_Main.c: 82: Serial_Write(ModuloCM.corrente[0]>>8);
  1307  0047  1283               	bcf	3,5	;RP0=0, select bank0
  1308  0048  1303               	bcf	3,6	;RP1=0, select bank0
  1309  0049  0853               	movf	_ModuloCM+2,w
  1310  004A  120A  118A  22A0   	fcall	_Serial_Write
      +       120A  118A         
  1311                           
  1312                           ;TCC_Main.c: 83: Serial_Write(ModuloCM.corrente[0]&0x00FF);
  1313  004F  1283               	bcf	3,5	;RP0=0, select bank0
  1314  0050  1303               	bcf	3,6	;RP1=0, select bank0
  1315  0051  0852               	movf	_ModuloCM+1,w
  1316  0052  120A  118A  22A0   	fcall	_Serial_Write
      +       120A  118A         
  1317                           
  1318                           ;TCC_Main.c: 84: Serial_Write(ModuloCM.corrente[1]>>8);
  1319  0057  1283               	bcf	3,5	;RP0=0, select bank0
  1320  0058  1303               	bcf	3,6	;RP1=0, select bank0
  1321  0059  0855               	movf	_ModuloCM+4,w
  1322  005A  120A  118A  22A0   	fcall	_Serial_Write
      +       120A  118A         
  1323                           
  1324                           ;TCC_Main.c: 85: Serial_Write(ModuloCM.corrente[1]&0x00FF);
  1325  005F  1283               	bcf	3,5	;RP0=0, select bank0
  1326  0060  1303               	bcf	3,6	;RP1=0, select bank0
  1327  0061  0854               	movf	_ModuloCM+3,w
  1328  0062  120A  118A  22A0   	fcall	_Serial_Write
      +       120A  118A         
  1329                           
  1330                           ;TCC_Main.c: 86: Serial_Write(ModuloCM.corrente[2]>>8);
  1331  0067  1283               	bcf	3,5	;RP0=0, select bank0
  1332  0068  1303               	bcf	3,6	;RP1=0, select bank0
  1333  0069  0857               	movf	_ModuloCM+6,w
  1334  006A  120A  118A  22A0   	fcall	_Serial_Write
      +       120A  118A         
  1335                           
  1336                           ;TCC_Main.c: 87: Serial_Write(ModuloCM.corrente[2]&0x00FF);
  1337  006F  1283               	bcf	3,5	;RP0=0, select bank0
  1338  0070  1303               	bcf	3,6	;RP1=0, select bank0
  1339  0071  0856               	movf	_ModuloCM+5,w
  1340  0072  120A  118A  22A0   	fcall	_Serial_Write
      +       120A  118A         
  1341                           
  1342                           ;TCC_Main.c: 88: Serial_Write(ModuloCM.corrente[3]>>8);
  1343  0077  1283               	bcf	3,5	;RP0=0, select bank0
  1344  0078  1303               	bcf	3,6	;RP1=0, select bank0
  1345  0079  0859               	movf	_ModuloCM+8,w
  1346  007A  120A  118A  22A0   	fcall	_Serial_Write
      +       120A  118A         
  1347                           
  1348                           ;TCC_Main.c: 89: Serial_Write(ModuloCM.corrente[3]&0x00FF);
  1349  007F  1283               	bcf	3,5	;RP0=0, select bank0
  1350  0080  1303               	bcf	3,6	;RP1=0, select bank0
  1351  0081  0858               	movf	_ModuloCM+7,w
  1352  0082  120A  118A  22A0   	fcall	_Serial_Write
      +       120A  118A         
  1353                           
  1354                           ;TCC_Main.c: 90: Serial_Write(RTC.hora);
  1355  0087  1283               	bcf	3,5	;RP0=0, select bank0
  1356  0088  1303               	bcf	3,6	;RP1=0, select bank0
  1357  0089  0820               	movf	_RTC,w
  1358  008A  120A  118A  22A0   	fcall	_Serial_Write
      +       120A  118A         
  1359                           
  1360                           ;TCC_Main.c: 91: Serial_Write(RTC.minuto);
  1361  008F  1283               	bcf	3,5	;RP0=0, select bank0
  1362  0090  1303               	bcf	3,6	;RP1=0, select bank0
  1363  0091  0821               	movf	_RTC+1,w
  1364  0092  120A  118A  22A0   	fcall	_Serial_Write
  1365                           
  1366                           ;TCC_Main.c: 92: TemporizadorSerialW = 30000;
  1367  0095  3030               	movlw	48
  1368  0096  1283               	bcf	3,5	;RP0=0, select bank0
  1369  0097  1303               	bcf	3,6	;RP1=0, select bank0
  1370  0098  00CF               	movwf	_TemporizadorSerialW
  1371  0099  3075               	movlw	117
  1372  009A  00D0               	movwf	_TemporizadorSerialW+1
  1373  009B  0008               	return
  1374  009C                     __end_of_EnvioDadosSerial:	
  1375                           
  1376                           	psect	text10
  1377  02A0                     __ptext10:	
  1378 ;; *************** function _Serial_Write *****************
  1379 ;; Defined at:
  1380 ;;		line 63 in file "Serial.c"
  1381 ;; Parameters:    Size  Location     Type
  1382 ;;  Valor           1    wreg     unsigned char 
  1383 ;; Auto vars:     Size  Location     Type
  1384 ;;  Valor           1    5[BANK0 ] unsigned char 
  1385 ;; Return value:  Size  Location     Type
  1386 ;;		None               void
  1387 ;; Registers used:
  1388 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1389 ;; Tracked objects:
  1390 ;;		On entry : 0/0
  1391 ;;		On exit  : 0/0
  1392 ;;		Unchanged: 0/0
  1393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1394 ;;      Params:         0       0       0       0       0
  1395 ;;      Locals:         0       1       0       0       0
  1396 ;;      Temps:          0       1       0       0       0
  1397 ;;      Totals:         0       2       0       0       0
  1398 ;;Total ram usage:        2 bytes
  1399 ;; Hardware stack levels used:    1
  1400 ;; Hardware stack levels required when called:    4
  1401 ;; This function calls:
  1402 ;;		_estaCheia
  1403 ;;		_inserir
  1404 ;; This function is called by:
  1405 ;;		_EnvioDadosSerial
  1406 ;; This function uses a non-reentrant model
  1407 ;;
  1408                           
  1409                           
  1410                           ;psect for function _Serial_Write
  1411  02A0                     _Serial_Write:	
  1412                           
  1413                           ;incstack = 0
  1414                           ; Regs used in _Serial_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1415                           ;Serial_Write@Valor stored from wreg
  1416  02A0  1283               	bcf	3,5	;RP0=0, select bank0
  1417  02A1  1303               	bcf	3,6	;RP1=0, select bank0
  1418  02A2  00DF               	movwf	Serial_Write@Valor
  1419                           
  1420                           ;Serial.c: 64: if(!estaCheia(&BufferWrite))
  1421  02A3  303C               	movlw	_BufferWrite& (0+255)
  1422  02A4  120A  118A  22C7   	fcall	_estaCheia
      +       120A  118A         
  1423  02A9  3800               	iorlw	0
  1424  02AA  1D03               	skipz
  1425  02AB  0008               	return
  1426                           
  1427                           ;Serial.c: 65: inserir(&BufferWrite, Valor);
  1428  02AC  1283               	bcf	3,5	;RP0=0, select bank0
  1429  02AD  1303               	bcf	3,6	;RP1=0, select bank0
  1430  02AE  085F               	movf	Serial_Write@Valor,w
  1431  02AF  00DE               	movwf	??_Serial_Write
  1432  02B0  085E               	movf	??_Serial_Write,w
  1433  02B1  00DA               	movwf	?_inserir
  1434  02B2  303C               	movlw	_BufferWrite& (0+255)
  1435  02B3  120A  118A  21EA   	fcall	_inserir
  1436  02B6  0008               	return
  1437  02B7                     __end_of_Serial_Write:	
  1438                           
  1439                           	psect	text11
  1440  01EA                     __ptext11:	
  1441 ;; *************** function _inserir *****************
  1442 ;; Defined at:
  1443 ;;		line 91 in file "Serial.c"
  1444 ;; Parameters:    Size  Location     Type
  1445 ;;  buf             1    wreg     PTR struct fila
  1446 ;;		 -> BufferRead(19), BufferWrite(19), 
  1447 ;;  Valor           1    0[BANK0 ] unsigned char 
  1448 ;; Auto vars:     Size  Location     Type
  1449 ;;  buf             1    3[BANK0 ] PTR struct fila
  1450 ;;		 -> BufferRead(19), BufferWrite(19), 
  1451 ;; Return value:  Size  Location     Type
  1452 ;;		None               void
  1453 ;; Registers used:
  1454 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1455 ;; Tracked objects:
  1456 ;;		On entry : 0/0
  1457 ;;		On exit  : 0/0
  1458 ;;		Unchanged: 0/0
  1459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1460 ;;      Params:         0       1       0       0       0
  1461 ;;      Locals:         0       1       0       0       0
  1462 ;;      Temps:          0       2       0       0       0
  1463 ;;      Totals:         0       4       0       0       0
  1464 ;;Total ram usage:        4 bytes
  1465 ;; Hardware stack levels used:    1
  1466 ;; Hardware stack levels required when called:    3
  1467 ;; This function calls:
  1468 ;;		Nothing
  1469 ;; This function is called by:
  1470 ;;		_Serial_Write
  1471 ;; This function uses a non-reentrant model
  1472 ;;
  1473                           
  1474                           
  1475                           ;psect for function _inserir
  1476  01EA                     _inserir:	
  1477                           
  1478                           ;incstack = 0
  1479                           ; Regs used in _inserir: [wreg-fsr0h+status,2+status,0]
  1480                           ;inserir@buf stored from wreg
  1481  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  1482  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  1483  01EC  00DD               	movwf	inserir@buf
  1484                           
  1485                           ;Serial.c: 92: buf->dados[buf->ultimo] = Valor;
  1486  01ED  085A               	movf	inserir@Valor,w
  1487  01EE  00DB               	movwf	??_inserir
  1488  01EF  085D               	movf	inserir@buf,w
  1489  01F0  3E11               	addlw	17
  1490  01F1  0084               	movwf	4
  1491  01F2  1383               	bcf	3,7	;select IRP bank0
  1492  01F3  0800               	movf	0,w
  1493  01F4  075D               	addwf	inserir@buf,w
  1494  01F5  00DC               	movwf	??_inserir+1
  1495  01F6  085C               	movf	??_inserir+1,w
  1496  01F7  0084               	movwf	4
  1497  01F8  085B               	movf	??_inserir,w
  1498  01F9  0080               	movwf	0
  1499                           
  1500                           ;Serial.c: 93: buf->ultimo++;
  1501  01FA  3001               	movlw	1
  1502  01FB  00DB               	movwf	??_inserir
  1503  01FC  085D               	movf	inserir@buf,w
  1504  01FD  3E11               	addlw	17
  1505  01FE  0084               	movwf	4
  1506  01FF  085B               	movf	??_inserir,w
  1507  0200  0780               	addwf	0,f
  1508                           
  1509                           ;Serial.c: 94: buf->nItens++;
  1510  0201  3001               	movlw	1
  1511  0202  00DB               	movwf	??_inserir
  1512  0203  085D               	movf	inserir@buf,w
  1513  0204  3E12               	addlw	18
  1514  0205  0084               	movwf	4
  1515  0206  085B               	movf	??_inserir,w
  1516  0207  0780               	addwf	0,f
  1517                           
  1518                           ;Serial.c: 96: if(buf->ultimo == 16)
  1519  0208  085D               	movf	inserir@buf,w
  1520  0209  3E11               	addlw	17
  1521  020A  0084               	movwf	4
  1522  020B  0800               	movf	0,w
  1523  020C  3A10               	xorlw	16
  1524  020D  1D03               	skipz
  1525  020E  0008               	return
  1526                           
  1527                           ;Serial.c: 97: buf->ultimo = 0;
  1528  020F  085D               	movf	inserir@buf,w
  1529  0210  3E11               	addlw	17
  1530  0211  0084               	movwf	4
  1531  0212  0180               	clrf	0
  1532  0213  0008               	return
  1533  0214                     __end_of_inserir:	
  1534                           
  1535                           	psect	text12
  1536  02C7                     __ptext12:	
  1537 ;; *************** function _estaCheia *****************
  1538 ;; Defined at:
  1539 ;;		line 117 in file "Serial.c"
  1540 ;; Parameters:    Size  Location     Type
  1541 ;;  buf             1    wreg     PTR struct fila
  1542 ;;		 -> BufferRead(19), BufferWrite(19), 
  1543 ;; Auto vars:     Size  Location     Type
  1544 ;;  buf             1    0[BANK0 ] PTR struct fila
  1545 ;;		 -> BufferRead(19), BufferWrite(19), 
  1546 ;; Return value:  Size  Location     Type
  1547 ;;                  1    wreg      unsigned char 
  1548 ;; Registers used:
  1549 ;;		wreg, fsr0l, fsr0h
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1555 ;;      Params:         0       0       0       0       0
  1556 ;;      Locals:         0       1       0       0       0
  1557 ;;      Temps:          0       0       0       0       0
  1558 ;;      Totals:         0       1       0       0       0
  1559 ;;Total ram usage:        1 bytes
  1560 ;; Hardware stack levels used:    1
  1561 ;; Hardware stack levels required when called:    3
  1562 ;; This function calls:
  1563 ;;		Nothing
  1564 ;; This function is called by:
  1565 ;;		_Serial_Write
  1566 ;; This function uses a non-reentrant model
  1567 ;;
  1568                           
  1569                           
  1570                           ;psect for function _estaCheia
  1571  02C7                     _estaCheia:	
  1572                           
  1573                           ;incstack = 0
  1574                           ; Regs used in _estaCheia: [wregfsr0]
  1575                           ;estaCheia@buf stored from wreg
  1576  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  1577  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  1578  02C9  00DA               	movwf	estaCheia@buf
  1579                           
  1580                           ;Serial.c: 118: return (buf->nItens==16);
  1581  02CA  085A               	movf	estaCheia@buf,w
  1582  02CB  3E12               	addlw	18
  1583  02CC  0084               	movwf	4
  1584  02CD  1383               	bcf	3,7	;select IRP bank0
  1585  02CE  0800               	movf	0,w
  1586  02CF  3A10               	xorlw	16
  1587  02D0  3000               	movlw	0
  1588  02D1  1903               	skipnz
  1589  02D2  3001               	movlw	1
  1590  02D3  0008               	return
  1591  02D4                     __end_of_estaCheia:	
  1592                           
  1593                           	psect	text13
  1594  00DE                     __ptext13:	
  1595 ;; *************** function _Interrupcao *****************
  1596 ;; Defined at:
  1597 ;;		line 54 in file "TCC_Main.c"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;		None
  1600 ;; Auto vars:     Size  Location     Type
  1601 ;;		None
  1602 ;; Return value:  Size  Location     Type
  1603 ;;		None               void
  1604 ;; Registers used:
  1605 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1606 ;; Tracked objects:
  1607 ;;		On entry : 0/0
  1608 ;;		On exit  : 0/0
  1609 ;;		Unchanged: 0/0
  1610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1611 ;;      Params:         0       0       0       0       0
  1612 ;;      Locals:         0       0       0       0       0
  1613 ;;      Temps:          5       0       0       0       0
  1614 ;;      Totals:         5       0       0       0       0
  1615 ;;Total ram usage:        5 bytes
  1616 ;; Hardware stack levels used:    1
  1617 ;; Hardware stack levels required when called:    2
  1618 ;; This function calls:
  1619 ;;		_Serial_Interrupt
  1620 ;; This function is called by:
  1621 ;;		Interrupt level 1
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           
  1626                           ;psect for function _Interrupcao
  1627  00DE                     _Interrupcao:	
  1628                           
  1629                           ;TCC_Main.c: 55: if (INTCONbits.T0IF == 1)
  1630  00DE  1D0B               	btfss	11,2	;volatile
  1631  00DF  290D               	goto	i1l1078
  1632                           
  1633                           ;TCC_Main.c: 56: {
  1634                           ;TCC_Main.c: 57: INTCONbits.T0IF = 0;
  1635  00E0  110B               	bcf	11,2	;volatile
  1636                           
  1637                           ;TCC_Main.c: 58: TMR0 += 130;
  1638  00E1  3082               	movlw	130
  1639  00E2  00F8               	movwf	??_Interrupcao
  1640  00E3  0878               	movf	??_Interrupcao,w
  1641  00E4  0781               	addwf	1,f	;volatile
  1642                           
  1643                           ;TCC_Main.c: 59: if (Temporizador1 > 0)
  1644  00E5  0823               	movf	_Temporizador1+1,w
  1645  00E6  0422               	iorwf	_Temporizador1,w
  1646  00E7  1903               	skipnz
  1647  00E8  28EF               	goto	i1l141
  1648                           
  1649                           ;TCC_Main.c: 60: Temporizador1 --;
  1650  00E9  3001               	movlw	1
  1651  00EA  02A2               	subwf	_Temporizador1,f
  1652  00EB  3000               	movlw	0
  1653  00EC  1C03               	skipc
  1654  00ED  03A3               	decf	_Temporizador1+1,f
  1655  00EE  02A3               	subwf	_Temporizador1+1,f
  1656  00EF                     i1l141:	
  1657                           
  1658                           ;TCC_Main.c: 61: if (TemporizadorSerialW > 0)
  1659  00EF  0850               	movf	_TemporizadorSerialW+1,w
  1660  00F0  044F               	iorwf	_TemporizadorSerialW,w
  1661  00F1  1903               	skipnz
  1662  00F2  28F9               	goto	i1l142
  1663                           
  1664                           ;TCC_Main.c: 62: TemporizadorSerialW--;
  1665  00F3  3001               	movlw	1
  1666  00F4  02CF               	subwf	_TemporizadorSerialW,f
  1667  00F5  3000               	movlw	0
  1668  00F6  1C03               	skipc
  1669  00F7  03D0               	decf	_TemporizadorSerialW+1,f
  1670  00F8  02D0               	subwf	_TemporizadorSerialW+1,f
  1671  00F9                     i1l142:	
  1672                           
  1673                           ;TCC_Main.c: 63: if (TemporizadorSerialR > 0)
  1674  00F9  0827               	movf	_TemporizadorSerialR+1,w
  1675  00FA  0426               	iorwf	_TemporizadorSerialR,w
  1676  00FB  1903               	skipnz
  1677  00FC  2903               	goto	i1l143
  1678                           
  1679                           ;TCC_Main.c: 64: TemporizadorSerialR--;
  1680  00FD  3001               	movlw	1
  1681  00FE  02A6               	subwf	_TemporizadorSerialR,f
  1682  00FF  3000               	movlw	0
  1683  0100  1C03               	skipc
  1684  0101  03A7               	decf	_TemporizadorSerialR+1,f
  1685  0102  02A7               	subwf	_TemporizadorSerialR+1,f
  1686  0103                     i1l143:	
  1687                           
  1688                           ;TCC_Main.c: 65: if (TemporizadorPortb > 0)
  1689  0103  0825               	movf	_TemporizadorPortb+1,w
  1690  0104  0424               	iorwf	_TemporizadorPortb,w
  1691  0105  1903               	skipnz
  1692  0106  290D               	goto	i1l1078
  1693                           
  1694                           ;TCC_Main.c: 66: TemporizadorPortb--;
  1695  0107  3001               	movlw	1
  1696  0108  02A4               	subwf	_TemporizadorPortb,f
  1697  0109  3000               	movlw	0
  1698  010A  1C03               	skipc
  1699  010B  03A5               	decf	_TemporizadorPortb+1,f
  1700  010C  02A5               	subwf	_TemporizadorPortb+1,f
  1701  010D                     i1l1078:	
  1702                           
  1703                           ;TCC_Main.c: 67: }
  1704                           ;TCC_Main.c: 69: Serial_Interrupt();
  1705  010D  120A  118A  209C   	fcall	_Serial_Interrupt
      +       120A  118A         
  1706  0112  087C               	movf	??_Interrupcao+4,w
  1707  0113  1283               	bcf	3,5	;RP0=0, select bank0
  1708  0114  1303               	bcf	3,6	;RP1=0, select bank0
  1709  0115  00FF               	movwf	127
  1710  0116  087B               	movf	??_Interrupcao+3,w
  1711  0117  008A               	movwf	10
  1712  0118  087A               	movf	??_Interrupcao+2,w
  1713  0119  0084               	movwf	4
  1714  011A  0E79               	swapf	(??_Interrupcao+1)^(0+-128),w
  1715  011B  0083               	movwf	3
  1716  011C  0EFE               	swapf	126,f
  1717  011D  0E7E               	swapf	126,w
  1718  011E  0009               	retfie
  1719  011F                     __end_of_Interrupcao:	
  1720                           
  1721                           	psect	intentry
  1722  0004                     __pintentry:	
  1723                           ;incstack = 0
  1724                           ; Regs used in _Interrupcao: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1725                           
  1726  0004                     interrupt_function:	
  1727  007E                     saved_w	set	btemp
  1728  0004  00FE               	movwf	btemp
  1729  0005  0E03               	swapf	3,w
  1730  0006  00F9               	movwf	??_Interrupcao+1
  1731  0007  0804               	movf	4,w
  1732  0008  00FA               	movwf	??_Interrupcao+2
  1733  0009  080A               	movf	10,w
  1734  000A  00FB               	movwf	??_Interrupcao+3
  1735  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1736  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1737  000D  087F               	movf	btemp+1,w
  1738  000E  00FC               	movwf	??_Interrupcao+4
  1739  000F  120A  118A  28DE   	ljmp	_Interrupcao
  1740                           
  1741                           	psect	text14
  1742  009C                     __ptext14:	
  1743 ;; *************** function _Serial_Interrupt *****************
  1744 ;; Defined at:
  1745 ;;		line 36 in file "Serial.c"
  1746 ;; Parameters:    Size  Location     Type
  1747 ;;		None
  1748 ;; Auto vars:     Size  Location     Type
  1749 ;;  tmp             1    7[COMMON] unsigned char 
  1750 ;; Return value:  Size  Location     Type
  1751 ;;		None               void
  1752 ;; Registers used:
  1753 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1754 ;; Tracked objects:
  1755 ;;		On entry : 0/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1759 ;;      Params:         0       0       0       0       0
  1760 ;;      Locals:         1       0       0       0       0
  1761 ;;      Temps:          1       0       0       0       0
  1762 ;;      Totals:         2       0       0       0       0
  1763 ;;Total ram usage:        2 bytes
  1764 ;; Hardware stack levels used:    1
  1765 ;; Hardware stack levels required when called:    1
  1766 ;; This function calls:
  1767 ;;		i1_inserir
  1768 ;;		i1_remover
  1769 ;;		i1_estaVazia
  1770 ;;		i1_estaCheia
  1771 ;; This function is called by:
  1772 ;;		_Interrupcao
  1773 ;; This function uses a non-reentrant model
  1774 ;;
  1775                           
  1776                           
  1777                           ;psect for function _Serial_Interrupt
  1778  009C                     _Serial_Interrupt:	
  1779                           
  1780                           ;Serial.c: 37: if (PIR1bits.TXIF == 1 && TXSTAbits.TRMT == 1)
  1781                           
  1782                           ;incstack = 0
  1783                           ; Regs used in _Serial_Interrupt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1784  009C  1283               	bcf	3,5	;RP0=0, select bank0
  1785  009D  1303               	bcf	3,6	;RP1=0, select bank0
  1786  009E  1E0C               	btfss	12,4	;volatile
  1787  009F  28B9               	goto	i1l1046
  1788  00A0  1683               	bsf	3,5	;RP0=1, select bank1
  1789  00A1  1303               	bcf	3,6	;RP1=0, select bank1
  1790  00A2  1C98               	btfss	24,1	;volatile
  1791  00A3  28B9               	goto	i1l1046
  1792                           
  1793                           ;Serial.c: 38: {
  1794                           ;Serial.c: 39: PIR1bits.TXIF = 0;
  1795  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1796  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  1797  00A6  120C               	bcf	12,4	;volatile
  1798                           
  1799                           ;Serial.c: 40: if(!estaVazia(&BufferWrite))
  1800  00A7  303C               	movlw	_BufferWrite& (0+255)
  1801  00A8  120A  118A  22EB   	fcall	i1_estaVazia
      +       120A  118A         
  1802  00AD  3800               	iorlw	0
  1803  00AE  1D03               	skipz
  1804  00AF  28B9               	goto	i1l1046
  1805                           
  1806                           ;Serial.c: 41: {
  1807                           ;Serial.c: 42: TXREG = remover(&BufferWrite);
  1808  00B0  303C               	movlw	_BufferWrite& (0+255)
  1809  00B1  120A  118A  2214   	fcall	i1_remover
      +       120A  118A         
  1810  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  1811  00B7  1303               	bcf	3,6	;RP1=0, select bank0
  1812  00B8  0099               	movwf	25	;volatile
  1813  00B9                     i1l1046:	
  1814                           
  1815                           ;Serial.c: 43: }
  1816                           ;Serial.c: 44: }
  1817                           ;Serial.c: 46: if (PIR1bits.RCIF == 1)
  1818  00B9  1283               	bcf	3,5	;RP0=0, select bank0
  1819  00BA  1303               	bcf	3,6	;RP1=0, select bank0
  1820  00BB  1E8C               	btfss	12,5	;volatile
  1821  00BC  0008               	return
  1822                           
  1823                           ;Serial.c: 47: {
  1824                           ;Serial.c: 48: if(RCSTAbits.OERR == 1)
  1825  00BD  1C98               	btfss	24,1	;volatile
  1826  00BE  28C9               	goto	i1l1056
  1827                           
  1828                           ;Serial.c: 49: {
  1829                           ;Serial.c: 50: char tmp = RCREG;
  1830  00BF  081A               	movf	26,w	;volatile
  1831  00C0  00F6               	movwf	??_Serial_Interrupt
  1832  00C1  0876               	movf	??_Serial_Interrupt,w
  1833  00C2  00F7               	movwf	Serial_Interrupt@tmp
  1834                           
  1835                           ;Serial.c: 51: tmp = RCREG;
  1836  00C3  081A               	movf	26,w	;volatile
  1837  00C4  00F6               	movwf	??_Serial_Interrupt
  1838  00C5  0876               	movf	??_Serial_Interrupt,w
  1839  00C6  00F7               	movwf	Serial_Interrupt@tmp
  1840                           
  1841                           ;Serial.c: 52: RCSTAbits.CREN = 0;
  1842  00C7  1218               	bcf	24,4	;volatile
  1843                           
  1844                           ;Serial.c: 53: RCSTAbits.CREN = 1;
  1845  00C8  1618               	bsf	24,4	;volatile
  1846  00C9                     i1l1056:	
  1847                           
  1848                           ;Serial.c: 54: }
  1849                           ;Serial.c: 55: PORTDbits.RD0 = 0;
  1850  00C9  1008               	bcf	8,0	;volatile
  1851                           
  1852                           ;Serial.c: 57: if(!estaCheia(&BufferRead))
  1853  00CA  3029               	movlw	_BufferRead& (0+255)
  1854  00CB  120A  118A  22E0   	fcall	i1_estaCheia
      +       120A  118A         
  1855  00D0  3800               	iorlw	0
  1856  00D1  1D03               	skipz
  1857  00D2  0008               	return
  1858                           
  1859                           ;Serial.c: 58: inserir(&BufferRead, RCREG);
  1860  00D3  1283               	bcf	3,5	;RP0=0, select bank0
  1861  00D4  1303               	bcf	3,6	;RP1=0, select bank0
  1862  00D5  081A               	movf	26,w	;volatile
  1863  00D6  00F6               	movwf	??_Serial_Interrupt
  1864  00D7  0876               	movf	??_Serial_Interrupt,w
  1865  00D8  00F0               	movwf	?i1_inserir
  1866  00D9  3029               	movlw	_BufferRead& (0+255)
  1867  00DA  120A  118A  223E   	fcall	i1_inserir
  1868  00DD  0008               	return
  1869  00DE                     __end_of_Serial_Interrupt:	
  1870                           
  1871                           	psect	text15
  1872  02E0                     __ptext15:	
  1873 ;; *************** function i1_estaCheia *****************
  1874 ;; Defined at:
  1875 ;;		line 117 in file "Serial.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;  estaCheia       1    wreg     PTR struct fila
  1878 ;;		 -> BufferRead(19), BufferWrite(19), 
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;  estaCheia       1    0[COMMON] PTR struct fila
  1881 ;;		 -> BufferRead(19), BufferWrite(19), 
  1882 ;; Return value:  Size  Location     Type
  1883 ;;                  1    wreg      unsigned char 
  1884 ;; Registers used:
  1885 ;;		wreg, fsr0l, fsr0h
  1886 ;; Tracked objects:
  1887 ;;		On entry : 0/0
  1888 ;;		On exit  : 0/0
  1889 ;;		Unchanged: 0/0
  1890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1891 ;;      Params:         0       0       0       0       0
  1892 ;;      Locals:         1       0       0       0       0
  1893 ;;      Temps:          0       0       0       0       0
  1894 ;;      Totals:         1       0       0       0       0
  1895 ;;Total ram usage:        1 bytes
  1896 ;; Hardware stack levels used:    1
  1897 ;; This function calls:
  1898 ;;		Nothing
  1899 ;; This function is called by:
  1900 ;;		_Serial_Interrupt
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           
  1905                           ;psect for function i1_estaCheia
  1906  02E0                     i1_estaCheia:	
  1907                           
  1908                           ;incstack = 0
  1909                           ; Regs used in i1_estaCheia: [wregfsr0]
  1910                           ;i1estaCheia@buf stored from wreg
  1911  02E0  00F0               	movwf	i1estaCheia@buf
  1912                           
  1913                           ;Serial.c: 118: return (buf->nItens==16);
  1914  02E1  0870               	movf	i1estaCheia@buf,w
  1915  02E2  3E12               	addlw	18
  1916  02E3  0084               	movwf	4
  1917  02E4  1383               	bcf	3,7	;select IRP bank0
  1918  02E5  0800               	movf	0,w
  1919  02E6  3A10               	xorlw	16
  1920  02E7  3000               	movlw	0
  1921  02E8  1903               	skipnz
  1922  02E9  3001               	movlw	1
  1923  02EA  0008               	return
  1924  02EB                     __end_ofi1_estaCheia:	
  1925                           
  1926                           	psect	text16
  1927  02EB                     __ptext16:	
  1928 ;; *************** function i1_estaVazia *****************
  1929 ;; Defined at:
  1930 ;;		line 112 in file "Serial.c"
  1931 ;; Parameters:    Size  Location     Type
  1932 ;;  estaVazia       1    wreg     PTR struct fila
  1933 ;;		 -> BufferRead(19), BufferWrite(19), 
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;  estaVazia       1    0[COMMON] PTR struct fila
  1936 ;;		 -> BufferRead(19), BufferWrite(19), 
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  1    wreg      unsigned char 
  1939 ;; Registers used:
  1940 ;;		wreg, fsr0l, fsr0h
  1941 ;; Tracked objects:
  1942 ;;		On entry : 0/0
  1943 ;;		On exit  : 0/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1946 ;;      Params:         0       0       0       0       0
  1947 ;;      Locals:         1       0       0       0       0
  1948 ;;      Temps:          0       0       0       0       0
  1949 ;;      Totals:         1       0       0       0       0
  1950 ;;Total ram usage:        1 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; This function calls:
  1953 ;;		Nothing
  1954 ;; This function is called by:
  1955 ;;		_Serial_Interrupt
  1956 ;; This function uses a non-reentrant model
  1957 ;;
  1958                           
  1959                           
  1960                           ;psect for function i1_estaVazia
  1961  02EB                     i1_estaVazia:	
  1962                           
  1963                           ;incstack = 0
  1964                           ; Regs used in i1_estaVazia: [wregfsr0]
  1965                           ;i1estaVazia@buf stored from wreg
  1966  02EB  00F0               	movwf	i1estaVazia@buf
  1967                           
  1968                           ;Serial.c: 113: return (buf->nItens==0);
  1969  02EC  0870               	movf	i1estaVazia@buf,w
  1970  02ED  3E12               	addlw	18
  1971  02EE  0084               	movwf	4
  1972  02EF  1383               	bcf	3,7	;select IRP bank0
  1973  02F0  0880               	movf	0,f
  1974  02F1  3000               	movlw	0
  1975  02F2  1903               	skipnz
  1976  02F3  3001               	movlw	1
  1977  02F4  0008               	return
  1978  02F5                     __end_ofi1_estaVazia:	
  1979                           
  1980                           	psect	text17
  1981  0214                     __ptext17:	
  1982 ;; *************** function i1_remover *****************
  1983 ;; Defined at:
  1984 ;;		line 101 in file "Serial.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;  remover         1    wreg     PTR struct fila
  1987 ;;		 -> BufferRead(19), BufferWrite(19), 
  1988 ;; Auto vars:     Size  Location     Type
  1989 ;;  remover         1    5[COMMON] PTR struct fila
  1990 ;;		 -> BufferRead(19), BufferWrite(19), 
  1991 ;;  remover         2    3[COMMON] int 
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      unsigned char 
  1994 ;; Registers used:
  1995 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2001 ;;      Params:         0       0       0       0       0
  2002 ;;      Locals:         3       0       0       0       0
  2003 ;;      Temps:          3       0       0       0       0
  2004 ;;      Totals:         6       0       0       0       0
  2005 ;;Total ram usage:        6 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; This function calls:
  2008 ;;		Nothing
  2009 ;; This function is called by:
  2010 ;;		_Serial_Interrupt
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           
  2015                           ;psect for function i1_remover
  2016  0214                     i1_remover:	
  2017                           
  2018                           ;incstack = 0
  2019                           ; Regs used in i1_remover: [wreg-fsr0h+status,2+status,0]
  2020                           ;i1remover@buf stored from wreg
  2021  0214  00F5               	movwf	i1remover@buf
  2022                           
  2023                           ;Serial.c: 102: int temp = buf->dados[buf->primeiro++];
  2024  0215  0875               	movf	i1remover@buf,w
  2025  0216  3E10               	addlw	16
  2026  0217  0084               	movwf	4
  2027  0218  1383               	bcf	3,7	;select IRP bank0
  2028  0219  0800               	movf	0,w
  2029  021A  0775               	addwf	i1remover@buf,w
  2030  021B  00F0               	movwf	??i1_remover
  2031  021C  0870               	movf	??i1_remover,w
  2032  021D  0084               	movwf	4
  2033  021E  0800               	movf	0,w
  2034  021F  00F1               	movwf	??i1_remover+1
  2035  0220  01F2               	clrf	??i1_remover+2
  2036  0221  0871               	movf	??i1_remover+1,w
  2037  0222  00F3               	movwf	i1remover@temp
  2038  0223  0872               	movf	??i1_remover+2,w
  2039  0224  00F4               	movwf	i1remover@temp+1
  2040  0225  3001               	movlw	1
  2041  0226  00F0               	movwf	??i1_remover
  2042  0227  0875               	movf	i1remover@buf,w
  2043  0228  3E10               	addlw	16
  2044  0229  0084               	movwf	4
  2045  022A  0870               	movf	??i1_remover,w
  2046  022B  0780               	addwf	0,f
  2047                           
  2048                           ;Serial.c: 104: if(buf->primeiro == 16)
  2049  022C  0875               	movf	i1remover@buf,w
  2050  022D  3E10               	addlw	16
  2051  022E  0084               	movwf	4
  2052  022F  0800               	movf	0,w
  2053  0230  3A10               	xorlw	16
  2054  0231  1D03               	skipz
  2055  0232  2A37               	goto	i1l1022
  2056                           
  2057                           ;Serial.c: 105: buf->primeiro = 0;
  2058  0233  0875               	movf	i1remover@buf,w
  2059  0234  3E10               	addlw	16
  2060  0235  0084               	movwf	4
  2061  0236  0180               	clrf	0
  2062  0237                     i1l1022:	
  2063                           
  2064                           ;Serial.c: 107: buf->nItens--;
  2065  0237  0875               	movf	i1remover@buf,w
  2066  0238  3E12               	addlw	18
  2067  0239  0084               	movwf	4
  2068  023A  3001               	movlw	1
  2069  023B  0280               	subwf	0,f
  2070                           
  2071                           ;Serial.c: 108: return temp;
  2072  023C  0873               	movf	i1remover@temp,w
  2073  023D  0008               	return
  2074  023E                     __end_ofi1_remover:	
  2075                           
  2076                           	psect	text18
  2077  023E                     __ptext18:	
  2078 ;; *************** function i1_inserir *****************
  2079 ;; Defined at:
  2080 ;;		line 91 in file "Serial.c"
  2081 ;; Parameters:    Size  Location     Type
  2082 ;;  inserir         1    wreg     PTR struct fila
  2083 ;;		 -> BufferRead(19), BufferWrite(19), 
  2084 ;;  inserir         1    0[COMMON] unsigned char 
  2085 ;; Auto vars:     Size  Location     Type
  2086 ;;  inserir         1    3[COMMON] PTR struct fila
  2087 ;;		 -> BufferRead(19), BufferWrite(19), 
  2088 ;; Return value:  Size  Location     Type
  2089 ;;		None               void
  2090 ;; Registers used:
  2091 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2097 ;;      Params:         1       0       0       0       0
  2098 ;;      Locals:         1       0       0       0       0
  2099 ;;      Temps:          2       0       0       0       0
  2100 ;;      Totals:         4       0       0       0       0
  2101 ;;Total ram usage:        4 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; This function calls:
  2104 ;;		Nothing
  2105 ;; This function is called by:
  2106 ;;		_Serial_Interrupt
  2107 ;; This function uses a non-reentrant model
  2108 ;;
  2109                           
  2110                           
  2111                           ;psect for function i1_inserir
  2112  023E                     i1_inserir:	
  2113                           
  2114                           ;incstack = 0
  2115                           ; Regs used in i1_inserir: [wreg-fsr0h+status,2+status,0]
  2116                           ;i1inserir@buf stored from wreg
  2117  023E  00F3               	movwf	i1inserir@buf
  2118                           
  2119                           ;Serial.c: 92: buf->dados[buf->ultimo] = Valor;
  2120  023F  0870               	movf	i1inserir@Valor,w
  2121  0240  00F1               	movwf	??i1_inserir
  2122  0241  0873               	movf	i1inserir@buf,w
  2123  0242  3E11               	addlw	17
  2124  0243  0084               	movwf	4
  2125  0244  1383               	bcf	3,7	;select IRP bank0
  2126  0245  0800               	movf	0,w
  2127  0246  0773               	addwf	i1inserir@buf,w
  2128  0247  00F2               	movwf	??i1_inserir+1
  2129  0248  0872               	movf	??i1_inserir+1,w
  2130  0249  0084               	movwf	4
  2131  024A  0871               	movf	??i1_inserir,w
  2132  024B  0080               	movwf	0
  2133                           
  2134                           ;Serial.c: 93: buf->ultimo++;
  2135  024C  3001               	movlw	1
  2136  024D  00F1               	movwf	??i1_inserir
  2137  024E  0873               	movf	i1inserir@buf,w
  2138  024F  3E11               	addlw	17
  2139  0250  0084               	movwf	4
  2140  0251  0871               	movf	??i1_inserir,w
  2141  0252  0780               	addwf	0,f
  2142                           
  2143                           ;Serial.c: 94: buf->nItens++;
  2144  0253  3001               	movlw	1
  2145  0254  00F1               	movwf	??i1_inserir
  2146  0255  0873               	movf	i1inserir@buf,w
  2147  0256  3E12               	addlw	18
  2148  0257  0084               	movwf	4
  2149  0258  0871               	movf	??i1_inserir,w
  2150  0259  0780               	addwf	0,f
  2151                           
  2152                           ;Serial.c: 96: if(buf->ultimo == 16)
  2153  025A  0873               	movf	i1inserir@buf,w
  2154  025B  3E11               	addlw	17
  2155  025C  0084               	movwf	4
  2156  025D  0800               	movf	0,w
  2157  025E  3A10               	xorlw	16
  2158  025F  1D03               	skipz
  2159  0260  0008               	return
  2160                           
  2161                           ;Serial.c: 97: buf->ultimo = 0;
  2162  0261  0873               	movf	i1inserir@buf,w
  2163  0262  3E11               	addlw	17
  2164  0263  0084               	movwf	4
  2165  0264  0180               	clrf	0
  2166  0265  0008               	return
  2167  0266                     __end_ofi1_inserir:	
  2168  007E                     btemp	set	126	;btemp
  2169  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        3
    BSS         47
    Persistent  11
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      6      67
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    estaCheia@buf	PTR struct fila size(1) Largest target is 19
		 -> BufferRead(BANK0[19]), BufferWrite(BANK0[19]), 

    estaVazia@buf	PTR struct fila size(1) Largest target is 19
		 -> BufferRead(BANK0[19]), BufferWrite(BANK0[19]), 

    remover@buf	PTR struct fila size(1) Largest target is 19
		 -> BufferRead(BANK0[19]), BufferWrite(BANK0[19]), 

    inserir@buf	PTR struct fila size(1) Largest target is 19
		 -> BufferRead(BANK0[19]), BufferWrite(BANK0[19]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _Interrupcao in COMMON

    _Interrupcao->_Serial_Interrupt
    _Serial_Interrupt->i1_remover

Critical Paths under _main in BANK0

    _Setup->_Serial_9600_Init
    _Serial_Available->_estaVazia
    _Serial_Read->_remover
    _EnvioDadosSerial->_Serial_Write
    _Serial_Write->_inserir

Critical Paths under _Interrupcao in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupcao in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupcao in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interrupcao in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     419
                   _EnvioDadosSerial
                    _TrataComandoESP
                              _Setup
 ---------------------------------------------------------------------------------
 (1) _Setup                                                1     1      0      22
                                              2 BANK0      1     1      0
                   _Serial_9600_Init
 ---------------------------------------------------------------------------------
 (2) _Serial_9600_Init                                     2     0      2      22
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _TrataComandoESP                                      0     0      0     199
                        _Serial_Read
                   _Serial_Available
                       _Serial_Flush
 ---------------------------------------------------------------------------------
 (2) _Serial_Flush                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Serial_Available                                     0     0      0      22
                          _estaVazia
 ---------------------------------------------------------------------------------
 (2) _Serial_Read                                          0     0      0     177
                          _estaVazia
                            _remover
 ---------------------------------------------------------------------------------
 (3) _remover                                              6     6      0     155
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) _estaVazia                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _EnvioDadosSerial                                     0     0      0     198
                       _Serial_Write
 ---------------------------------------------------------------------------------
 (2) _Serial_Write                                         2     2      0     198
                                              4 BANK0      2     2      0
                          _estaCheia
                            _inserir
 ---------------------------------------------------------------------------------
 (3) _inserir                                              4     3      1     154
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _estaCheia                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Interrupcao                                          5     5      0    1172
                                              8 COMMON     5     5      0
                   _Serial_Interrupt
 ---------------------------------------------------------------------------------
 (5) _Serial_Interrupt                                     2     2      0    1172
                                              6 COMMON     2     2      0
                          i1_inserir
                          i1_remover
                        i1_estaVazia
                        i1_estaCheia
 ---------------------------------------------------------------------------------
 (6) i1_estaCheia                                          1     1      0      73
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) i1_estaVazia                                          1     1      0      73
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) i1_remover                                            6     6      0     513
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (6) i1_inserir                                            4     3      1     511
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EnvioDadosSerial
     _Serial_Write
       _estaCheia
       _inserir
   _TrataComandoESP
     _Serial_Read
       _estaVazia
       _remover
     _Serial_Available
       _estaVazia
     _Serial_Flush
   _Setup
     _Serial_9600_Init

 _Interrupcao (ROOT)
   _Serial_Interrupt
     i1_inserir
     i1_remover
     i1_estaVazia
     i1_estaCheia

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      6      43       5       83.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      59      12        0.0%
ABS                  0      0      50       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       9       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Mon Oct 10 22:46:03 2016

              __CFG_CP$OFF 0000                         l37 01B1                         fsr 0004  
 __end_of_EnvioDadosSerial 009C          ??_TrataComandoESP 0060                        l169 028B  
                      l912 01E3                        l940 02C5                        l890 019B  
                      l972 0129                        l974 014D                        l886 0197  
                      l894 01A0                        l888 0199               __CFG_CPD$OFF 0000  
                      _RTC 0020                        fsr0 0004                        indf 0000  
             __CFG_FOSC$HS 0000               __CFG_LVP$OFF 0000                       l1100 01A6  
                     _TMR0 0001               __CFG_WRT$OFF 0000                       _main 0283  
                     btemp 007E              __CFG_BOREN$ON 0000                       start 0012  
              i1_estaCheia 02E0                i1_estaVazia 02EB                      ?_main 0070  
            __CFG_WDTE$OFF 0000                      i1l141 00EF                      i1l142 00F9  
                    i1l143 0103                      _RCREG 001A                      _RCSTA 0018  
                    _SPBRG 0099                      _PORTB 0006                      _PORTD 0008  
               _BufferRead 0029                      _TRISB 0086                      _TRISD 0088  
                    _TXREG 0019                      _TXSTA 0098                      _Setup 015B  
      _TemporizadorSerialR 0026        _TemporizadorSerialW 004F            __end_of_inserir 0214  
                    pclath 000A            __end_of_remover 01EA                      status 0003  
                    wtemp0 007E              ??_Interrupcao 0078            __initialization 0266  
             __end_of_main 02A0         __size_ofi1_inserir 0028         __size_ofi1_remover 002A  
                   ??_main 0060                     ?_Setup 0070           _Serial_9600_Init 018E  
                   i1l1022 0237                     i1l1046 00B9                     i1l1056 00C9  
                   i1l1078 010D                     _INTCON 000B                     _SSPADD 0093  
                   _TRISC3 043B                     _TRISC4 043C              ??_Serial_Read 0060  
                   _SSPCON 0014                _BufferWrite 003C             __CFG_PWRTE$OFF 0000  
                   _Tensao 0060        __end_of_Interrupcao 011F                  ??_inserir 005B  
             estaCheia@buf 005A                     saved_w 007E                  ??_remover 005A  
__size_of_Serial_Available 0009          __end_ofi1_inserir 0266          __end_ofi1_remover 023E  
  __end_of__initialization 027F            _TrataComandoESP 011F             __pcstackCOMMON 0070  
            __end_of_Setup 018E        __end_of_Serial_Read 02C7               __pidataBANK0 030C  
        _TemporizadorPortb 0024  __size_of_Serial_Interrupt 0042          ?_EnvioDadosSerial 0070  
       ??_EnvioDadosSerial 0060                    ??_Setup 005C             i1estaCheia@buf 0070  
            ?_Serial_Flush 0070                 __pbssBANK0 0020         __size_of_estaCheia 000D  
            ?_Serial_Write 0070         __size_of_estaVazia 000C               estaVazia@buf 005A  
               _clearPORTB 0028                _Interrupcao 00DE                 __pmaintext 0283  
               __pintentry 0004               ?i1_estaCheia 0070               ?i1_estaVazia 0070  
                  _SSPCON2 0091             ??_Serial_Flush 005A                    _SSPSTAT 0094  
           ??_Serial_Write 005E    __end_of_TrataComandoESP 015B                _Serial_Read 02B7  
           i1estaVazia@buf 0070               i1inserir@buf 0073   __end_of_Serial_9600_Init 01BE  
        __end_of_estaCheia 02D4                    __ptext1 015B                    __ptext2 018E  
                  __ptext3 011F                    __ptext4 0306                    __ptext5 02F5  
                  __ptext6 02B7                    __ptext7 01BE                    __ptext8 02D4  
                  __ptext9 0015          __end_of_estaVazia 02E0                remover@temp 005D  
                  _inserir 01EA          Serial_Write@Valor 005F                    _remover 01BE  
         _Serial_Available 02F5                    clrloop0 02FF       end_of_initialization 027F  
                _RCSTAbits 0018           _Serial_Interrupt 009C               i1remover@buf 0075  
                _PORTDbits 0008           ?_TrataComandoESP 0070                  _TXSTAbits 0098  
                i1_inserir 023E                  i1_remover 0214   Serial_9600_Init@osc_freq 005A  
     __end_of_Serial_Flush 030C               inserir@Valor 005A       __end_of_Serial_Write 02B7  
     __size_ofi1_estaCheia 000B       __size_ofi1_estaVazia 000A        start_initialization 0266  
__size_of_EnvioDadosSerial 0087                 ?i1_inserir 0070               ?_Interrupcao 0070  
               ?i1_remover 0070                __pdataBANK0 0060             i1inserir@Valor 0070  
            __pcstackBANK0 005A                 inserir@buf 005D               ?_Serial_Read 0070  
                __pnvBANK0 004F   __end_of_Serial_Available 02FE          ?_Serial_9600_Init 005A  
       ??_Serial_9600_Init 005C                  _estaCheia 02C7                   ?_inserir 005A  
                _estaVazia 02D4                   ?_remover 0070             __size_of_Setup 0033  
            _Temporizador1 0022   __end_of_Serial_Interrupt 00DE                 remover@buf 005F  
        interrupt_function 0004                ??i1_inserir 0071                  clear_ram0 02FE  
                 _PIE1bits 008C                ??i1_remover 0070      __size_of_Serial_Flush 0006  
                 _PIR1bits 000C      __size_of_Serial_Write 0017                 ?_estaCheia 0070  
               ?_estaVazia 0070               _Serial_Flush 0306               _Serial_Write 02A0  
         _EnvioDadosSerial 0015                   _ModuloCM 0051       __size_of_Interrupcao 0041  
         __size_of_inserir 002A                   __ptext10 02A0                   __ptext11 01EA  
                 __ptext12 02C7                   __ptext13 00DE                   __ptext14 009C  
                 __ptext15 02E0                   __ptext16 02EB                   __ptext17 0214  
                 __ptext18 023E           __size_of_remover 002C              __size_of_main 001D  
     __size_of_Serial_Read 0010   __size_of_TrataComandoESP 003C              ??i1_estaCheia 0070  
            ??i1_estaVazia 0070                ??_estaCheia 005A                 _INTCONbits 000B  
              ??_estaVazia 005A        Serial_Interrupt@tmp 0077                   intlevel1 0000  
        ?_Serial_Available 0070         ??_Serial_Available 005B                 _OPTION_REG 0081  
      __end_ofi1_estaCheia 02EB              i1remover@temp 0073        __end_ofi1_estaVazia 02F5  
              _SSPCON2bits 0091  __size_of_Serial_9600_Init 0030          ?_Serial_Interrupt 0070  
       ??_Serial_Interrupt 0076  
