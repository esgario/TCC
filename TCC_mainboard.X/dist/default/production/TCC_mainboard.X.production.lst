

Microchip Technology PIC LITE Macro Assembler V1.20 build 52243 
                                                                                               Tue Oct 11 03:43:06 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     	;# 
    34  0001                     	;# 
    35  0002                     	;# 
    36  0003                     	;# 
    37  0004                     	;# 
    38  0005                     	;# 
    39  0006                     	;# 
    40  0007                     	;# 
    41  0008                     	;# 
    42  0009                     	;# 
    43  000A                     	;# 
    44  000B                     	;# 
    45  000C                     	;# 
    46  000D                     	;# 
    47  000E                     	;# 
    48  000E                     	;# 
    49  000F                     	;# 
    50  0010                     	;# 
    51  0011                     	;# 
    52  0012                     	;# 
    53  0013                     	;# 
    54  0014                     	;# 
    55  0015                     	;# 
    56  0015                     	;# 
    57  0016                     	;# 
    58  0017                     	;# 
    59  0018                     	;# 
    60  0019                     	;# 
    61  001A                     	;# 
    62  001B                     	;# 
    63  001B                     	;# 
    64  001C                     	;# 
    65  001D                     	;# 
    66  001E                     	;# 
    67  001F                     	;# 
    68  0081                     	;# 
    69  0085                     	;# 
    70  0086                     	;# 
    71  0087                     	;# 
    72  0088                     	;# 
    73  0089                     	;# 
    74  008C                     	;# 
    75  008D                     	;# 
    76  008E                     	;# 
    77  0091                     	;# 
    78  0092                     	;# 
    79  0093                     	;# 
    80  0094                     	;# 
    81  0098                     	;# 
    82  0099                     	;# 
    83  009C                     	;# 
    84  009D                     	;# 
    85  009E                     	;# 
    86  009F                     	;# 
    87  010C                     	;# 
    88  010D                     	;# 
    89  010E                     	;# 
    90  010F                     	;# 
    91  018C                     	;# 
    92  018D                     	;# 
    93  0000                     	;# 
    94  0001                     	;# 
    95  0002                     	;# 
    96  0003                     	;# 
    97  0004                     	;# 
    98  0005                     	;# 
    99  0006                     	;# 
   100  0007                     	;# 
   101  0008                     	;# 
   102  0009                     	;# 
   103  000A                     	;# 
   104  000B                     	;# 
   105  000C                     	;# 
   106  000D                     	;# 
   107  000E                     	;# 
   108  000E                     	;# 
   109  000F                     	;# 
   110  0010                     	;# 
   111  0011                     	;# 
   112  0012                     	;# 
   113  0013                     	;# 
   114  0014                     	;# 
   115  0015                     	;# 
   116  0015                     	;# 
   117  0016                     	;# 
   118  0017                     	;# 
   119  0018                     	;# 
   120  0019                     	;# 
   121  001A                     	;# 
   122  001B                     	;# 
   123  001B                     	;# 
   124  001C                     	;# 
   125  001D                     	;# 
   126  001E                     	;# 
   127  001F                     	;# 
   128  0081                     	;# 
   129  0085                     	;# 
   130  0086                     	;# 
   131  0087                     	;# 
   132  0088                     	;# 
   133  0089                     	;# 
   134  008C                     	;# 
   135  008D                     	;# 
   136  008E                     	;# 
   137  0091                     	;# 
   138  0092                     	;# 
   139  0093                     	;# 
   140  0094                     	;# 
   141  0098                     	;# 
   142  0099                     	;# 
   143  009C                     	;# 
   144  009D                     	;# 
   145  009E                     	;# 
   146  009F                     	;# 
   147  010C                     	;# 
   148  010D                     	;# 
   149  010E                     	;# 
   150  010F                     	;# 
   151  018C                     	;# 
   152  018D                     	;# 
   153                           
   154                           	psect	idataBANK0
   155  030F                     __pidataBANK0:	
   156                           
   157                           ;initializer for _Tensao
   158  030F  347B               	retlw	123
   159  0310  347A               	retlw	122
   160  0311  3400               	retlw	0
   161                           
   162                           	psect	nvBANK0
   163  004F                     __pnvBANK0:	
   164  004F                     _TemporizadorSerialW:	
   165  004F                     	ds	2
   166  0051                     _ModuloCM:	
   167  0051                     	ds	9
   168  000B                     _INTCON	set	11
   169  000B                     _INTCONbits	set	11
   170  000C                     _PIR1bits	set	12
   171  0006                     _PORTB	set	6
   172  0008                     _PORTD	set	8
   173  0008                     _PORTDbits	set	8
   174  001A                     _RCREG	set	26
   175  0018                     _RCSTA	set	24
   176  0018                     _RCSTAbits	set	24
   177  0014                     _SSPCON	set	20
   178  0001                     _TMR0	set	1
   179  0019                     _TXREG	set	25
   180  0081                     _OPTION_REG	set	129
   181  008C                     _PIE1bits	set	140
   182  0099                     _SPBRG	set	153
   183  0093                     _SSPADD	set	147
   184  0091                     _SSPCON2	set	145
   185  0091                     _SSPCON2bits	set	145
   186  0094                     _SSPSTAT	set	148
   187  0086                     _TRISB	set	134
   188  0088                     _TRISD	set	136
   189  0098                     _TXSTA	set	152
   190  0098                     _TXSTAbits	set	152
   191  043B                     _TRISC3	set	1083
   192  043C                     _TRISC4	set	1084
   193                           
   194                           ; #config settings
   195  0000                     
   196                           	psect	cinit
   197  026B                     start_initialization:	
   198  026B                     __initialization:	
   199                           
   200                           ; Clear objects allocated to BANK0
   201  026B  1383               	bcf	3,7	;select IRP bank0
   202  026C  3020               	movlw	low __pbssBANK0
   203  026D  0084               	movwf	4
   204  026E  304F               	movlw	low (__pbssBANK0+47)
   205  026F  120A  118A  2301   	fcall	clear_ram0
      +       120A  118A         
   206                           
   207                           ; Initialize objects allocated to BANK0
   208  0274  120A  118A  230F   	fcall	__pidataBANK0	;fetch initializer
      +       120A  118A         
   209  0279  00E1               	movwf	__pdataBANK0& (0+127)
   210  027A  120A  118A  2310   	fcall	__pidataBANK0+1	;fetch initializer
      +       120A  118A         
   211  027F  00E2               	movwf	(__pdataBANK0+1)& (0+127)
   212  0280  120A  118A  2311   	fcall	__pidataBANK0+2	;fetch initializer
   213  0283  00E3               	movwf	(__pdataBANK0+2)& (0+127)
   214  0284                     end_of_initialization:	
   215                           ;End of C runtime variable initialization code
   216                           
   217  0284                     __end_of__initialization:	
   218  0284  0183               	clrf	3
   219  0285  120A  118A  2A88   	ljmp	_main	;jump to C main() function
   220                           
   221                           	psect	bssBANK0
   222  0020                     __pbssBANK0:	
   223  0020                     _RTC:	
   224  0020                     	ds	2
   225  0022                     _Temporizador1:	
   226  0022                     	ds	2
   227  0024                     _TemporizadorPortb:	
   228  0024                     	ds	2
   229  0026                     _TemporizadorSerialR:	
   230  0026                     	ds	2
   231  0028                     _clearPORTB:	
   232  0028                     	ds	1
   233  0029                     _BufferRead:	
   234  0029                     	ds	19
   235  003C                     _BufferWrite:	
   236  003C                     	ds	19
   237                           
   238                           	psect	dataBANK0
   239  0061                     __pdataBANK0:	
   240  0061                     _Tensao:	
   241  0061                     	ds	3
   242                           
   243                           	psect	clrtext
   244  0301                     clear_ram0:	
   245                           ;	Called with FSR containing the base address, and
   246                           ;	W with the last address+1
   247                           
   248  0301  0064               	clrwdt	;clear the watchdog before getting into this loop
   249  0302                     clrloop0:	
   250  0302  0180               	clrf	0	;clear RAM location pointed to by FSR
   251  0303  0A84               	incf	4,f	;increment pointer
   252  0304  0604               	xorwf	4,w	;XOR with final address
   253  0305  1903               	btfsc	3,2	;have we reached the end yet?
   254  0306  3400               	retlw	0	;all done for this memory range, return
   255  0307  0604               	xorwf	4,w	;XOR again to restore value
   256  0308  2B02               	goto	clrloop0	;do the next byte
   257                           
   258                           	psect	cstackCOMMON
   259  0070                     __pcstackCOMMON:	
   260  0070                     ?_Serial_9600_Init:	
   261  0070                     ?_Serial_Interrupt:	
   262                           ; 0 bytes @ 0x0
   263                           
   264  0070                     ?_Serial_Write:	
   265                           ; 0 bytes @ 0x0
   266                           
   267  0070                     ?_Serial_Flush:	
   268                           ; 0 bytes @ 0x0
   269                           
   270  0070                     ?_Interrupcao:	
   271                           ; 0 bytes @ 0x0
   272                           
   273  0070                     ?_EnvioDadosSerial:	
   274                           ; 0 bytes @ 0x0
   275                           
   276  0070                     ?_TrataComandoESP:	
   277                           ; 0 bytes @ 0x0
   278                           
   279  0070                     ?_Setup:	
   280                           ; 0 bytes @ 0x0
   281                           
   282  0070                     ?i1_inserir:	
   283                           ; 0 bytes @ 0x0
   284                           
   285  0070                     ??i1_remover:	
   286                           ; 0 bytes @ 0x0
   287                           
   288  0070                     ??i1_estaVazia:	
   289                           ; 0 bytes @ 0x0
   290                           
   291  0070                     ??i1_estaCheia:	
   292                           ; 0 bytes @ 0x0
   293                           
   294  0070                     ?_estaVazia:	
   295                           ; 0 bytes @ 0x0
   296                           
   297  0070                     ?_remover:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ?_estaCheia:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ?_Serial_Read:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ?_Serial_Available:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0070                     ?i1_remover:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0070                     ?i1_estaVazia:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ?i1_estaCheia:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0070                     ?_main:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     i1inserir@Valor:	
   322                           ; 2 bytes @ 0x0
   323                           
   324  0070                     i1estaVazia@buf:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0070                     i1estaCheia@buf:	
   328                           ; 1 bytes @ 0x0
   329                           
   330                           
   331                           ; 1 bytes @ 0x0
   332  0070                     	ds	1
   333  0071                     ??i1_inserir:	
   334                           
   335                           ; 0 bytes @ 0x1
   336  0071                     	ds	2
   337  0073                     i1inserir@buf:	
   338  0073                     i1remover@temp:	
   339                           ; 1 bytes @ 0x3
   340                           
   341                           
   342                           ; 2 bytes @ 0x3
   343  0073                     	ds	2
   344  0075                     i1remover@buf:	
   345                           
   346                           ; 1 bytes @ 0x5
   347  0075                     	ds	1
   348  0076                     ??_Serial_Interrupt:	
   349                           
   350                           ; 0 bytes @ 0x6
   351  0076                     	ds	1
   352  0077                     Serial_Interrupt@tmp:	
   353                           
   354                           ; 1 bytes @ 0x7
   355  0077                     	ds	1
   356  0078                     ??_Interrupcao:	
   357                           
   358                           ; 0 bytes @ 0x8
   359  0078                     	ds	5
   360                           
   361                           	psect	cstackBANK0
   362  005A                     __pcstackBANK0:	
   363  005A                     ??_estaVazia:	
   364  005A                     ??_remover:	
   365                           ; 0 bytes @ 0x0
   366                           
   367  005A                     ??_estaCheia:	
   368                           ; 0 bytes @ 0x0
   369                           
   370  005A                     ?_inserir:	
   371                           ; 0 bytes @ 0x0
   372                           
   373  005A                     ??_Serial_9600_Init:	
   374                           ; 0 bytes @ 0x0
   375                           
   376  005A                     ??_Serial_Flush:	
   377                           ; 0 bytes @ 0x0
   378                           
   379  005A                     Serial_9600_Init@osc_freq:	
   380                           ; 0 bytes @ 0x0
   381                           
   382  005A                     inserir@Valor:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  005A                     estaVazia@buf:	
   386                           ; 1 bytes @ 0x0
   387                           
   388  005A                     estaCheia@buf:	
   389                           ; 1 bytes @ 0x0
   390                           
   391                           
   392                           ; 1 bytes @ 0x0
   393  005A                     	ds	1
   394  005B                     ??_inserir:	
   395  005B                     ??_Serial_Available:	
   396                           ; 0 bytes @ 0x1
   397                           
   398  005B                     ??_Setup:	
   399                           ; 0 bytes @ 0x1
   400                           
   401                           
   402                           ; 0 bytes @ 0x1
   403  005B                     	ds	2
   404  005D                     inserir@buf:	
   405  005D                     remover@temp:	
   406                           ; 1 bytes @ 0x3
   407                           
   408                           
   409                           ; 2 bytes @ 0x3
   410  005D                     	ds	1
   411  005E                     ??_Serial_Write:	
   412                           
   413                           ; 0 bytes @ 0x4
   414  005E                     	ds	1
   415  005F                     Serial_Write@Valor:	
   416  005F                     remover@buf:	
   417                           ; 1 bytes @ 0x5
   418                           
   419                           
   420                           ; 1 bytes @ 0x5
   421  005F                     	ds	1
   422  0060                     ??_Serial_Read:	
   423  0060                     ??_EnvioDadosSerial:	
   424                           ; 0 bytes @ 0x6
   425                           
   426  0060                     ??_TrataComandoESP:	
   427                           ; 0 bytes @ 0x6
   428                           
   429                           
   430                           ; 0 bytes @ 0x6
   431  0060                     	ds	1
   432  0061                     ??_main:	
   433                           
   434                           	psect	maintext
   435  0288                     __pmaintext:	
   436                           ; 0 bytes @ 0x7
   437 ;;
   438 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   439 ;;
   440 ;; *************** function _main *****************
   441 ;; Defined at:
   442 ;;		line 162 in file "TCC_Main.c"
   443 ;; Parameters:    Size  Location     Type
   444 ;;		None
   445 ;; Auto vars:     Size  Location     Type
   446 ;;		None
   447 ;; Return value:  Size  Location     Type
   448 ;;                  2  167[COMMON] int 
   449 ;; Registers used:
   450 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   451 ;; Tracked objects:
   452 ;;		On entry : 17F/0
   453 ;;		On exit  : 0/0
   454 ;;		Unchanged: 0/0
   455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   456 ;;      Params:         0       0       0       0       0
   457 ;;      Locals:         0       0       0       0       0
   458 ;;      Temps:          0       0       0       0       0
   459 ;;      Totals:         0       0       0       0       0
   460 ;;Total ram usage:        0 bytes
   461 ;; Hardware stack levels required when called:    6
   462 ;; This function calls:
   463 ;;		_EnvioDadosSerial
   464 ;;		_TrataComandoESP
   465 ;;		_Setup
   466 ;; This function is called by:
   467 ;;		Startup code after reset
   468 ;; This function uses a non-reentrant model
   469 ;;
   470                           
   471                           
   472                           ;psect for function _main
   473  0288                     _main:	
   474                           
   475                           ;TCC_Main.c: 163: Setup();
   476                           
   477                           ;incstack = 0
   478                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   479  0288  120A  118A  2165   	fcall	_Setup
      +       120A  118A         
   480  028D                     l168:	
   481                           ;TCC_Main.c: 165: while(1)
   482                           
   483                           
   484                           ;TCC_Main.c: 166: {
   485                           ;TCC_Main.c: 167: EnvioDadosSerial();
   486  028D  120A  118A  2015   	fcall	_EnvioDadosSerial
      +       120A  118A         
   487                           
   488                           ;TCC_Main.c: 168: TrataComandoESP();
   489  0292  120A  118A  209C   	fcall	_TrataComandoESP
      +       120A  118A         
   490                           
   491                           ;TCC_Main.c: 169: PORTDbits.RD0 = 1;
   492  0297  1283               	bcf	3,5	;RP0=0, select bank0
   493  0298  1303               	bcf	3,6	;RP1=0, select bank0
   494  0299  1408               	bsf	8,0	;volatile
   495                           
   496                           ;TCC_Main.c: 170: if (Temporizador1 == 0)
   497  029A  0823               	movf	_Temporizador1+1,w
   498  029B  0422               	iorwf	_Temporizador1,w
   499  029C  1D03               	skipz
   500  029D  2A8D               	goto	l168
   501                           
   502                           ;TCC_Main.c: 171: {
   503                           ;TCC_Main.c: 172: Temporizador1 = 5000;
   504  029E  3088               	movlw	136
   505  029F  00A2               	movwf	_Temporizador1
   506  02A0  3013               	movlw	19
   507  02A1  00A3               	movwf	_Temporizador1+1
   508  02A2  2A8D               	goto	l168
   509  02A3                     __end_of_main:	
   510                           
   511                           	psect	text1
   512  0165                     __ptext1:	
   513 ;; *************** function _Setup *****************
   514 ;; Defined at:
   515 ;;		line 138 in file "TCC_Main.c"
   516 ;; Parameters:    Size  Location     Type
   517 ;;		None
   518 ;; Auto vars:     Size  Location     Type
   519 ;;		None
   520 ;; Return value:  Size  Location     Type
   521 ;;		None               void
   522 ;; Registers used:
   523 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   524 ;; Tracked objects:
   525 ;;		On entry : 0/0
   526 ;;		On exit  : 0/0
   527 ;;		Unchanged: 0/0
   528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   529 ;;      Params:         0       0       0       0       0
   530 ;;      Locals:         0       0       0       0       0
   531 ;;      Temps:          0       1       0       0       0
   532 ;;      Totals:         0       1       0       0       0
   533 ;;Total ram usage:        1 bytes
   534 ;; Hardware stack levels used:    1
   535 ;; Hardware stack levels required when called:    4
   536 ;; This function calls:
   537 ;;		_Serial_9600_Init
   538 ;; This function is called by:
   539 ;;		_main
   540 ;; This function uses a non-reentrant model
   541 ;;
   542                           
   543                           
   544                           ;psect for function _Setup
   545  0165                     _Setup:	
   546                           
   547                           ;TCC_Main.c: 139: TRISB = 0;
   548                           
   549                           ;incstack = 0
   550                           ; Regs used in _Setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   551  0165  1683               	bsf	3,5	;RP0=1, select bank1
   552  0166  1303               	bcf	3,6	;RP1=0, select bank1
   553  0167  0186               	clrf	6	;volatile
   554                           
   555                           ;TCC_Main.c: 140: PORTB = 0;
   556  0168  1283               	bcf	3,5	;RP0=0, select bank0
   557  0169  1303               	bcf	3,6	;RP1=0, select bank0
   558  016A  0186               	clrf	6	;volatile
   559                           
   560                           ;TCC_Main.c: 141: TRISD = 0;
   561  016B  1683               	bsf	3,5	;RP0=1, select bank1
   562  016C  1303               	bcf	3,6	;RP1=0, select bank1
   563  016D  0188               	clrf	8	;volatile
   564                           
   565                           ;TCC_Main.c: 142: PORTD = 0;
   566  016E  1283               	bcf	3,5	;RP0=0, select bank0
   567  016F  1303               	bcf	3,6	;RP1=0, select bank0
   568  0170  0188               	clrf	8	;volatile
   569                           
   570                           ;TCC_Main.c: 144: OPTION_REG = 0b00000000;
   571  0171  1683               	bsf	3,5	;RP0=1, select bank1
   572  0172  1303               	bcf	3,6	;RP1=0, select bank1
   573  0173  0181               	clrf	1	;volatile
   574                           
   575                           ;TCC_Main.c: 145: TMR0 = 130;
   576  0174  3082               	movlw	130
   577  0175  1283               	bcf	3,5	;RP0=0, select bank0
   578  0176  1303               	bcf	3,6	;RP1=0, select bank0
   579  0177  0081               	movwf	1	;volatile
   580                           
   581                           ;TCC_Main.c: 146: INTCON = 0b11100000;
   582  0178  30E0               	movlw	224
   583  0179  008B               	movwf	11	;volatile
   584                           
   585                           ;TCC_Main.c: 148: Serial_9600_Init(10);
   586  017A  300A               	movlw	10
   587  017B  120A  118A  2195   	fcall	_Serial_9600_Init
   588                           
   589                           ;TCC_Main.c: 152: ModuloCM.status = 0b00001100;
   590  017E  300C               	movlw	12
   591  017F  1283               	bcf	3,5	;RP0=0, select bank0
   592  0180  1303               	bcf	3,6	;RP1=0, select bank0
   593  0181  00DB               	movwf	??_Setup
   594  0182  085B               	movf	??_Setup,w
   595  0183  00D1               	movwf	_ModuloCM
   596                           
   597                           ;TCC_Main.c: 153: ModuloCM.corrente[0] = 50;
   598  0184  3032               	movlw	50
   599  0185  00D2               	movwf	_ModuloCM+1
   600  0186  3000               	movlw	0
   601  0187  00D3               	movwf	_ModuloCM+2
   602                           
   603                           ;TCC_Main.c: 154: ModuloCM.corrente[1] = 34;
   604  0188  3022               	movlw	34
   605  0189  00D4               	movwf	_ModuloCM+3
   606  018A  3000               	movlw	0
   607  018B  00D5               	movwf	_ModuloCM+4
   608                           
   609                           ;TCC_Main.c: 155: ModuloCM.corrente[2] = 0;
   610  018C  01D6               	clrf	_ModuloCM+5
   611  018D  01D7               	clrf	_ModuloCM+6
   612                           
   613                           ;TCC_Main.c: 156: ModuloCM.corrente[3] = 0;
   614  018E  01D8               	clrf	_ModuloCM+7
   615  018F  01D9               	clrf	_ModuloCM+8
   616                           
   617                           ;TCC_Main.c: 158: TemporizadorSerialW = 20000;
   618  0190  3020               	movlw	32
   619  0191  00CF               	movwf	_TemporizadorSerialW
   620  0192  304E               	movlw	78
   621  0193  00D0               	movwf	_TemporizadorSerialW+1
   622  0194  0008               	return
   623  0195                     __end_of_Setup:	
   624                           
   625                           	psect	text2
   626  0195                     __ptext2:	
   627 ;; *************** function _Serial_9600_Init *****************
   628 ;; Defined at:
   629 ;;		line 7 in file "Serial.c"
   630 ;; Parameters:    Size  Location     Type
   631 ;;  osc_freq        1    wreg     unsigned char 
   632 ;; Auto vars:     Size  Location     Type
   633 ;;  osc_freq        1    0[BANK0 ] unsigned char 
   634 ;; Return value:  Size  Location     Type
   635 ;;		None               void
   636 ;; Registers used:
   637 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   638 ;; Tracked objects:
   639 ;;		On entry : 0/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   643 ;;      Params:         0       0       0       0       0
   644 ;;      Locals:         0       1       0       0       0
   645 ;;      Temps:          0       0       0       0       0
   646 ;;      Totals:         0       1       0       0       0
   647 ;;Total ram usage:        1 bytes
   648 ;; Hardware stack levels used:    1
   649 ;; Hardware stack levels required when called:    3
   650 ;; This function calls:
   651 ;;		Nothing
   652 ;; This function is called by:
   653 ;;		_Setup
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           
   658                           ;psect for function _Serial_9600_Init
   659  0195                     _Serial_9600_Init:	
   660                           
   661                           ;incstack = 0
   662                           ; Regs used in _Serial_9600_Init: [wreg-fsr0h+status,2+status,0]
   663                           ;Serial_9600_Init@osc_freq stored from wreg
   664  0195  1283               	bcf	3,5	;RP0=0, select bank0
   665  0196  1303               	bcf	3,6	;RP1=0, select bank0
   666  0197  00DA               	movwf	Serial_9600_Init@osc_freq
   667                           
   668                           ;Serial.c: 8: TXSTA = 0b00100100;
   669  0198  3024               	movlw	36
   670  0199  1683               	bsf	3,5	;RP0=1, select bank1
   671  019A  1303               	bcf	3,6	;RP1=0, select bank1
   672  019B  0098               	movwf	24	;volatile
   673                           
   674                           ;Serial.c: 9: RCSTA = 0b10010000;
   675  019C  3090               	movlw	144
   676  019D  1283               	bcf	3,5	;RP0=0, select bank0
   677  019E  1303               	bcf	3,6	;RP1=0, select bank0
   678  019F  0098               	movwf	24	;volatile
   679                           
   680                           ;Serial.c: 10: switch(osc_freq)
   681  01A0  29AA               	goto	l865
   682  01A1                     l857:	
   683                           ;Serial.c: 11: {
   684                           ;Serial.c: 12: case 10:
   685                           
   686                           
   687                           ;Serial.c: 13: SPBRG = 64;
   688  01A1  3040               	movlw	64
   689  01A2  29A6               	goto	L2
   690  01A3                     l859:	
   691                           ;Serial.c: 15: case 16:
   692                           
   693                           ;Serial.c: 14: break;
   694                           
   695                           
   696                           ;Serial.c: 16: SPBRG = 103;
   697  01A3  3067               	movlw	103
   698  01A4  29A6               	goto	L2
   699  01A5                     l861:	
   700                           ;Serial.c: 18: case 20:
   701                           
   702                           ;Serial.c: 17: break;
   703                           
   704                           
   705                           ;Serial.c: 19: SPBRG = 129;
   706  01A5  3081               	movlw	129
   707  01A6                     L2:	
   708  01A6  1683               	bsf	3,5	;RP0=1, select bank1
   709  01A7  1303               	bcf	3,6	;RP1=0, select bank1
   710  01A8  0099               	movwf	25	;volatile
   711                           
   712                           ;Serial.c: 21: }
   713                           
   714                           ;Serial.c: 20: break;
   715  01A9  29B6               	goto	l35
   716  01AA                     l865:	
   717  01AA  1283               	bcf	3,5	;RP0=0, select bank0
   718  01AB  085A               	movf	Serial_9600_Init@osc_freq,w
   719                           
   720                           ; Switch size 1, requested type "space"
   721                           ; Number of cases is 3, Range of values is 10 to 20
   722                           ; switch strategies available:
   723                           ; Name         Instructions Cycles
   724                           ; simple_byte           10     6 (average)
   725                           ; direct_byte           44    11 (fixed)
   726                           ; jumptable            263     9 (fixed)
   727                           ;	Chosen strategy is simple_byte
   728  01AC  3A0A               	xorlw	10	; case 10
   729  01AD  1903               	skipnz
   730  01AE  29A1               	goto	l857
   731  01AF  3A1A               	xorlw	26	; case 16
   732  01B0  1903               	skipnz
   733  01B1  29A3               	goto	l859
   734  01B2  3A04               	xorlw	4	; case 20
   735  01B3  1903               	skipnz
   736  01B4  29A5               	goto	l861
   737  01B5  29B6               	goto	l35
   738  01B6                     l35:	
   739                           
   740                           ;Serial.c: 23: PIE1bits.RCIE = 1;
   741  01B6  1683               	bsf	3,5	;RP0=1, select bank1
   742  01B7  1303               	bcf	3,6	;RP1=0, select bank1
   743  01B8  168C               	bsf	12,5	;volatile
   744                           
   745                           ;Serial.c: 25: BufferWrite.primeiro = 0;
   746  01B9  1283               	bcf	3,5	;RP0=0, select bank0
   747  01BA  1303               	bcf	3,6	;RP1=0, select bank0
   748  01BB  01CC               	clrf	_BufferWrite+16
   749                           
   750                           ;Serial.c: 26: BufferWrite.ultimo = 0;
   751  01BC  01CD               	clrf	_BufferWrite+17
   752                           
   753                           ;Serial.c: 27: BufferWrite.nItens = 0;
   754  01BD  01CE               	clrf	_BufferWrite+18
   755                           
   756                           ;Serial.c: 28: BufferRead.primeiro = 0;
   757  01BE  01B9               	clrf	_BufferRead+16
   758                           
   759                           ;Serial.c: 29: BufferRead.ultimo = 0;
   760  01BF  01BA               	clrf	_BufferRead+17
   761                           
   762                           ;Serial.c: 30: BufferRead.nItens = 0;
   763  01C0  01BB               	clrf	_BufferRead+18
   764                           
   765                           ;Serial.c: 32: TXREG = 0x00;
   766  01C1  0199               	clrf	25	;volatile
   767  01C2  0008               	return
   768  01C3                     __end_of_Serial_9600_Init:	
   769                           
   770                           	psect	text3
   771  009C                     __ptext3:	
   772 ;; *************** function _TrataComandoESP *****************
   773 ;; Defined at:
   774 ;;		line 97 in file "TCC_Main.c"
   775 ;; Parameters:    Size  Location     Type
   776 ;;		None
   777 ;; Auto vars:     Size  Location     Type
   778 ;;		None
   779 ;; Return value:  Size  Location     Type
   780 ;;		None               void
   781 ;; Registers used:
   782 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   783 ;; Tracked objects:
   784 ;;		On entry : 0/0
   785 ;;		On exit  : 0/0
   786 ;;		Unchanged: 0/0
   787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   788 ;;      Params:         0       0       0       0       0
   789 ;;      Locals:         0       0       0       0       0
   790 ;;      Temps:          0       1       0       0       0
   791 ;;      Totals:         0       1       0       0       0
   792 ;;Total ram usage:        1 bytes
   793 ;; Hardware stack levels used:    1
   794 ;; Hardware stack levels required when called:    5
   795 ;; This function calls:
   796 ;;		_Serial_Read
   797 ;;		_Serial_Available
   798 ;;		_Serial_Flush
   799 ;; This function is called by:
   800 ;;		_main
   801 ;; This function uses a non-reentrant model
   802 ;;
   803                           
   804                           
   805                           ;psect for function _TrataComandoESP
   806  009C                     _TrataComandoESP:	
   807                           
   808                           ;TCC_Main.c: 98: if(TemporizadorSerialR == 0)
   809                           
   810                           ;incstack = 0
   811                           ; Regs used in _TrataComandoESP: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   812  009C  1283               	bcf	3,5	;RP0=0, select bank0
   813  009D  1303               	bcf	3,6	;RP1=0, select bank0
   814  009E  0827               	movf	_TemporizadorSerialR+1,w
   815  009F  0426               	iorwf	_TemporizadorSerialR,w
   816  00A0  1D03               	skipz
   817  00A1  28D6               	goto	l941
   818                           
   819                           ;TCC_Main.c: 99: {
   820                           ;TCC_Main.c: 100: TemporizadorSerialR = 5000;
   821  00A2  3088               	movlw	136
   822  00A3  00A6               	movwf	_TemporizadorSerialR
   823  00A4  3013               	movlw	19
   824  00A5  00A7               	movwf	_TemporizadorSerialR+1
   825  00A6                     l939:	
   826                           ;TCC_Main.c: 102: while(Serial_Available())
   827                           
   828  00A6  120A  118A  22F8   	fcall	_Serial_Available
      +       120A  118A         
   829  00AB  3800               	iorlw	0
   830  00AC  1903               	btfsc	3,2
   831  00AD  28D6               	goto	l941
   832                           
   833                           ;TCC_Main.c: 103: {
   834                           ;TCC_Main.c: 104: if(Serial_Read() == 0xF0)
   835  00AE  120A  118A  22BA   	fcall	_Serial_Read
      +       120A  118A         
   836  00B3  3AF0               	xorlw	240
   837  00B4  1D03               	skipz
   838  00B5  28A6               	goto	l939
   839                           
   840                           ;TCC_Main.c: 105: {
   841                           ;TCC_Main.c: 106: PORTDbits.RD0 ^= 1;
   842  00B6  1283               	bcf	3,5	;RP0=0, select bank0
   843  00B7  1303               	bcf	3,6	;RP1=0, select bank0
   844  00B8  0808               	movf	8,w	;volatile
   845  00B9  3901               	andlw	1
   846  00BA  00E0               	movwf	??_TrataComandoESP
   847  00BB  3001               	movlw	1
   848  00BC  06E0               	xorwf	??_TrataComandoESP,f
   849  00BD  0808               	movf	8,w	;volatile
   850  00BE  0660               	xorwf	??_TrataComandoESP,w
   851  00BF  39FE               	andlw	-2
   852  00C0  0660               	xorwf	??_TrataComandoESP,w
   853  00C1  0088               	movwf	8	;volatile
   854                           
   855                           ;TCC_Main.c: 107: clearPORTB = 1;
   856  00C2  01A8               	clrf	_clearPORTB
   857  00C3  0AA8               	incf	_clearPORTB,f
   858                           
   859                           ;TCC_Main.c: 108: TemporizadorPortb = 2000;
   860  00C4  30D0               	movlw	208
   861  00C5  00A4               	movwf	_TemporizadorPortb
   862  00C6  3007               	movlw	7
   863  00C7  00A5               	movwf	_TemporizadorPortb+1
   864                           
   865                           ;TCC_Main.c: 109: PORTB = Serial_Read();
   866  00C8  120A  118A  22BA   	fcall	_Serial_Read
      +       120A  118A         
   867  00CD  1283               	bcf	3,5	;RP0=0, select bank0
   868  00CE  1303               	bcf	3,6	;RP1=0, select bank0
   869  00CF  0086               	movwf	6	;volatile
   870                           
   871                           ;TCC_Main.c: 110: Serial_Flush();
   872  00D0  120A  118A  2309   	fcall	_Serial_Flush
      +       120A  118A         
   873  00D5  28A6               	goto	l939
   874  00D6                     l941:	
   875                           
   876                           ;TCC_Main.c: 111: }
   877                           ;TCC_Main.c: 112: }
   878                           ;TCC_Main.c: 113: }
   879                           ;TCC_Main.c: 115: if(clearPORTB == 1 && TemporizadorPortb == 0)
   880  00D6  1283               	bcf	3,5	;RP0=0, select bank0
   881  00D7  1303               	bcf	3,6	;RP1=0, select bank0
   882  00D8  0828               	movf	_clearPORTB,w
   883  00D9  3A01               	xorlw	1
   884  00DA  1D03               	skipz
   885  00DB  0008               	return
   886  00DC  0825               	movf	_TemporizadorPortb+1,w
   887  00DD  0424               	iorwf	_TemporizadorPortb,w
   888  00DE  1D03               	skipz
   889  00DF  0008               	return
   890                           
   891                           ;TCC_Main.c: 116: {
   892                           ;TCC_Main.c: 117: clearPORTB = 0;
   893  00E0  01A8               	clrf	_clearPORTB
   894                           
   895                           ;TCC_Main.c: 118: PORTB = 0;
   896  00E1  0186               	clrf	6	;volatile
   897  00E2  0008               	return
   898  00E3                     __end_of_TrataComandoESP:	
   899                           
   900                           	psect	text4
   901  0309                     __ptext4:	
   902 ;; *************** function _Serial_Flush *****************
   903 ;; Defined at:
   904 ;;		line 82 in file "Serial.c"
   905 ;; Parameters:    Size  Location     Type
   906 ;;		None
   907 ;; Auto vars:     Size  Location     Type
   908 ;;		None
   909 ;; Return value:  Size  Location     Type
   910 ;;		None               void
   911 ;; Registers used:
   912 ;;		status,2
   913 ;; Tracked objects:
   914 ;;		On entry : 0/0
   915 ;;		On exit  : 0/0
   916 ;;		Unchanged: 0/0
   917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   918 ;;      Params:         0       0       0       0       0
   919 ;;      Locals:         0       0       0       0       0
   920 ;;      Temps:          0       0       0       0       0
   921 ;;      Totals:         0       0       0       0       0
   922 ;;Total ram usage:        0 bytes
   923 ;; Hardware stack levels used:    1
   924 ;; Hardware stack levels required when called:    3
   925 ;; This function calls:
   926 ;;		Nothing
   927 ;; This function is called by:
   928 ;;		_TrataComandoESP
   929 ;; This function uses a non-reentrant model
   930 ;;
   931                           
   932                           
   933                           ;psect for function _Serial_Flush
   934  0309                     _Serial_Flush:	
   935                           
   936                           ;Serial.c: 83: BufferRead.primeiro = 0;
   937                           
   938                           ;incstack = 0
   939                           ; Regs used in _Serial_Flush: [status,2]
   940  0309  1283               	bcf	3,5	;RP0=0, select bank0
   941  030A  1303               	bcf	3,6	;RP1=0, select bank0
   942  030B  01B9               	clrf	_BufferRead+16
   943                           
   944                           ;Serial.c: 84: BufferRead.ultimo = 0;
   945  030C  01BA               	clrf	_BufferRead+17
   946                           
   947                           ;Serial.c: 85: BufferRead.nItens = 0;
   948  030D  01BB               	clrf	_BufferRead+18
   949  030E  0008               	return
   950  030F                     __end_of_Serial_Flush:	
   951                           
   952                           	psect	text5
   953  02F8                     __ptext5:	
   954 ;; *************** function _Serial_Available *****************
   955 ;; Defined at:
   956 ;;		line 77 in file "Serial.c"
   957 ;; Parameters:    Size  Location     Type
   958 ;;		None
   959 ;; Auto vars:     Size  Location     Type
   960 ;;		None
   961 ;; Return value:  Size  Location     Type
   962 ;;                  1    wreg      unsigned char 
   963 ;; Registers used:
   964 ;;		wreg, fsr0l, fsr0h, pclath, cstack
   965 ;; Tracked objects:
   966 ;;		On entry : 0/0
   967 ;;		On exit  : 0/0
   968 ;;		Unchanged: 0/0
   969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   970 ;;      Params:         0       0       0       0       0
   971 ;;      Locals:         0       0       0       0       0
   972 ;;      Temps:          0       0       0       0       0
   973 ;;      Totals:         0       0       0       0       0
   974 ;;Total ram usage:        0 bytes
   975 ;; Hardware stack levels used:    1
   976 ;; Hardware stack levels required when called:    4
   977 ;; This function calls:
   978 ;;		_estaVazia
   979 ;; This function is called by:
   980 ;;		_TrataComandoESP
   981 ;; This function uses a non-reentrant model
   982 ;;
   983                           
   984                           
   985                           ;psect for function _Serial_Available
   986  02F8                     _Serial_Available:	
   987                           
   988                           ;Serial.c: 78: return (!estaVazia(&BufferRead));
   989                           
   990                           ;incstack = 0
   991                           ; Regs used in _Serial_Available: [wreg-fsr0h+pclath+cstack]
   992  02F8  3029               	movlw	_BufferRead& (0+255)
   993  02F9  120A  118A  22D7   	fcall	_estaVazia
   994  02FC  3A00               	xorlw	0
   995  02FD  3000               	movlw	0
   996  02FE  1903               	skipnz
   997  02FF  3001               	movlw	1
   998  0300  0008               	return
   999  0301                     __end_of_Serial_Available:	
  1000                           
  1001                           	psect	text6
  1002  02BA                     __ptext6:	
  1003 ;; *************** function _Serial_Read *****************
  1004 ;; Defined at:
  1005 ;;		line 69 in file "Serial.c"
  1006 ;; Parameters:    Size  Location     Type
  1007 ;;		None
  1008 ;; Auto vars:     Size  Location     Type
  1009 ;;		None
  1010 ;; Return value:  Size  Location     Type
  1011 ;;                  1    wreg      unsigned char 
  1012 ;; Registers used:
  1013 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1014 ;; Tracked objects:
  1015 ;;		On entry : 0/0
  1016 ;;		On exit  : 0/0
  1017 ;;		Unchanged: 0/0
  1018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1019 ;;      Params:         0       0       0       0       0
  1020 ;;      Locals:         0       0       0       0       0
  1021 ;;      Temps:          0       0       0       0       0
  1022 ;;      Totals:         0       0       0       0       0
  1023 ;;Total ram usage:        0 bytes
  1024 ;; Hardware stack levels used:    1
  1025 ;; Hardware stack levels required when called:    4
  1026 ;; This function calls:
  1027 ;;		_estaVazia
  1028 ;;		_remover
  1029 ;; This function is called by:
  1030 ;;		_TrataComandoESP
  1031 ;; This function uses a non-reentrant model
  1032 ;;
  1033                           
  1034                           
  1035                           ;psect for function _Serial_Read
  1036  02BA                     _Serial_Read:	
  1037                           
  1038                           ;Serial.c: 70: if(!estaVazia(&BufferRead))
  1039                           
  1040                           ;incstack = 0
  1041                           ; Regs used in _Serial_Read: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1042  02BA  3029               	movlw	_BufferRead& (0+255)
  1043  02BB  120A  118A  22D7   	fcall	_estaVazia
      +       120A  118A         
  1044  02C0  3800               	iorlw	0
  1045  02C1  1D03               	skipz
  1046  02C2  2AC8               	goto	l907
  1047                           
  1048                           ;Serial.c: 71: return remover(&BufferRead);
  1049  02C3  3029               	movlw	_BufferRead& (0+255)
  1050  02C4  120A  118A  21C3   	fcall	_remover
  1051  02C7  0008               	return
  1052  02C8                     l907:	
  1053                           
  1054                           ;Serial.c: 72: else
  1055                           ;Serial.c: 73: return 0;
  1056  02C8  3000               	movlw	0
  1057  02C9  0008               	return
  1058  02CA                     __end_of_Serial_Read:	
  1059                           
  1060                           	psect	text7
  1061  01C3                     __ptext7:	
  1062 ;; *************** function _remover *****************
  1063 ;; Defined at:
  1064 ;;		line 101 in file "Serial.c"
  1065 ;; Parameters:    Size  Location     Type
  1066 ;;  buf             1    wreg     PTR struct fila
  1067 ;;		 -> BufferRead(19), BufferWrite(19), 
  1068 ;; Auto vars:     Size  Location     Type
  1069 ;;  buf             1    5[BANK0 ] PTR struct fila
  1070 ;;		 -> BufferRead(19), BufferWrite(19), 
  1071 ;;  temp            2    3[BANK0 ] int 
  1072 ;; Return value:  Size  Location     Type
  1073 ;;                  1    wreg      unsigned char 
  1074 ;; Registers used:
  1075 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1076 ;; Tracked objects:
  1077 ;;		On entry : 0/0
  1078 ;;		On exit  : 0/0
  1079 ;;		Unchanged: 0/0
  1080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1081 ;;      Params:         0       0       0       0       0
  1082 ;;      Locals:         0       3       0       0       0
  1083 ;;      Temps:          0       3       0       0       0
  1084 ;;      Totals:         0       6       0       0       0
  1085 ;;Total ram usage:        6 bytes
  1086 ;; Hardware stack levels used:    1
  1087 ;; Hardware stack levels required when called:    3
  1088 ;; This function calls:
  1089 ;;		Nothing
  1090 ;; This function is called by:
  1091 ;;		_Serial_Read
  1092 ;; This function uses a non-reentrant model
  1093 ;;
  1094                           
  1095                           
  1096                           ;psect for function _remover
  1097  01C3                     _remover:	
  1098                           
  1099                           ;incstack = 0
  1100                           ; Regs used in _remover: [wreg-fsr0h+status,2+status,0]
  1101                           ;remover@buf stored from wreg
  1102  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  1103  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  1104  01C5  00DF               	movwf	remover@buf
  1105                           
  1106                           ;Serial.c: 102: int temp = buf->dados[buf->primeiro++];
  1107  01C6  085F               	movf	remover@buf,w
  1108  01C7  3E10               	addlw	16
  1109  01C8  0084               	movwf	4
  1110  01C9  1383               	bcf	3,7	;select IRP bank0
  1111  01CA  0800               	movf	0,w
  1112  01CB  075F               	addwf	remover@buf,w
  1113  01CC  00DA               	movwf	??_remover
  1114  01CD  085A               	movf	??_remover,w
  1115  01CE  0084               	movwf	4
  1116  01CF  0800               	movf	0,w
  1117  01D0  00DB               	movwf	??_remover+1
  1118  01D1  01DC               	clrf	??_remover+2
  1119  01D2  085B               	movf	??_remover+1,w
  1120  01D3  00DD               	movwf	remover@temp
  1121  01D4  085C               	movf	??_remover+2,w
  1122  01D5  00DE               	movwf	remover@temp+1
  1123  01D6  3001               	movlw	1
  1124  01D7  00DA               	movwf	??_remover
  1125  01D8  085F               	movf	remover@buf,w
  1126  01D9  3E10               	addlw	16
  1127  01DA  0084               	movwf	4
  1128  01DB  085A               	movf	??_remover,w
  1129  01DC  0780               	addwf	0,f
  1130                           
  1131                           ;Serial.c: 104: if(buf->primeiro == 16)
  1132  01DD  085F               	movf	remover@buf,w
  1133  01DE  3E10               	addlw	16
  1134  01DF  0084               	movwf	4
  1135  01E0  0800               	movf	0,w
  1136  01E1  3A10               	xorlw	16
  1137  01E2  1D03               	skipz
  1138  01E3  29E8               	goto	l879
  1139                           
  1140                           ;Serial.c: 105: buf->primeiro = 0;
  1141  01E4  085F               	movf	remover@buf,w
  1142  01E5  3E10               	addlw	16
  1143  01E6  0084               	movwf	4
  1144  01E7  0180               	clrf	0
  1145  01E8                     l879:	
  1146                           
  1147                           ;Serial.c: 107: buf->nItens--;
  1148  01E8  085F               	movf	remover@buf,w
  1149  01E9  3E12               	addlw	18
  1150  01EA  0084               	movwf	4
  1151  01EB  3001               	movlw	1
  1152  01EC  0280               	subwf	0,f
  1153                           
  1154                           ;Serial.c: 108: return temp;
  1155  01ED  085D               	movf	remover@temp,w
  1156  01EE  0008               	return
  1157  01EF                     __end_of_remover:	
  1158                           
  1159                           	psect	text8
  1160  02D7                     __ptext8:	
  1161 ;; *************** function _estaVazia *****************
  1162 ;; Defined at:
  1163 ;;		line 112 in file "Serial.c"
  1164 ;; Parameters:    Size  Location     Type
  1165 ;;  buf             1    wreg     PTR struct fila
  1166 ;;		 -> BufferRead(19), BufferWrite(19), 
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;  buf             1    0[BANK0 ] PTR struct fila
  1169 ;;		 -> BufferRead(19), BufferWrite(19), 
  1170 ;; Return value:  Size  Location     Type
  1171 ;;                  1    wreg      unsigned char 
  1172 ;; Registers used:
  1173 ;;		wreg, fsr0l, fsr0h
  1174 ;; Tracked objects:
  1175 ;;		On entry : 0/0
  1176 ;;		On exit  : 0/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1179 ;;      Params:         0       0       0       0       0
  1180 ;;      Locals:         0       1       0       0       0
  1181 ;;      Temps:          0       0       0       0       0
  1182 ;;      Totals:         0       1       0       0       0
  1183 ;;Total ram usage:        1 bytes
  1184 ;; Hardware stack levels used:    1
  1185 ;; Hardware stack levels required when called:    3
  1186 ;; This function calls:
  1187 ;;		Nothing
  1188 ;; This function is called by:
  1189 ;;		_Serial_Read
  1190 ;;		_Serial_Available
  1191 ;; This function uses a non-reentrant model
  1192 ;;
  1193                           
  1194                           
  1195                           ;psect for function _estaVazia
  1196  02D7                     _estaVazia:	
  1197                           
  1198                           ;incstack = 0
  1199                           ; Regs used in _estaVazia: [wregfsr0]
  1200                           ;estaVazia@buf stored from wreg
  1201  02D7  1283               	bcf	3,5	;RP0=0, select bank0
  1202  02D8  1303               	bcf	3,6	;RP1=0, select bank0
  1203  02D9  00DA               	movwf	estaVazia@buf
  1204                           
  1205                           ;Serial.c: 113: return (buf->nItens==0);
  1206  02DA  085A               	movf	estaVazia@buf,w
  1207  02DB  3E12               	addlw	18
  1208  02DC  0084               	movwf	4
  1209  02DD  1383               	bcf	3,7	;select IRP bank0
  1210  02DE  0880               	movf	0,f
  1211  02DF  3000               	movlw	0
  1212  02E0  1903               	skipnz
  1213  02E1  3001               	movlw	1
  1214  02E2  0008               	return
  1215  02E3                     __end_of_estaVazia:	
  1216                           
  1217                           	psect	text9
  1218  0015                     __ptext9:	
  1219 ;; *************** function _EnvioDadosSerial *****************
  1220 ;; Defined at:
  1221 ;;		line 73 in file "TCC_Main.c"
  1222 ;; Parameters:    Size  Location     Type
  1223 ;;		None
  1224 ;; Auto vars:     Size  Location     Type
  1225 ;;		None
  1226 ;; Return value:  Size  Location     Type
  1227 ;;		None               void
  1228 ;; Registers used:
  1229 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1230 ;; Tracked objects:
  1231 ;;		On entry : 0/0
  1232 ;;		On exit  : 0/0
  1233 ;;		Unchanged: 0/0
  1234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1235 ;;      Params:         0       0       0       0       0
  1236 ;;      Locals:         0       0       0       0       0
  1237 ;;      Temps:          0       0       0       0       0
  1238 ;;      Totals:         0       0       0       0       0
  1239 ;;Total ram usage:        0 bytes
  1240 ;; Hardware stack levels used:    1
  1241 ;; Hardware stack levels required when called:    5
  1242 ;; This function calls:
  1243 ;;		_Serial_Write
  1244 ;; This function is called by:
  1245 ;;		_main
  1246 ;; This function uses a non-reentrant model
  1247 ;;
  1248                           
  1249                           
  1250                           ;psect for function _EnvioDadosSerial
  1251  0015                     _EnvioDadosSerial:	
  1252                           
  1253                           ;TCC_Main.c: 74: if(TemporizadorSerialW == 0)
  1254                           
  1255                           ;incstack = 0
  1256                           ; Regs used in _EnvioDadosSerial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1257  0015  1283               	bcf	3,5	;RP0=0, select bank0
  1258  0016  1303               	bcf	3,6	;RP1=0, select bank0
  1259  0017  0850               	movf	_TemporizadorSerialW+1,w
  1260  0018  044F               	iorwf	_TemporizadorSerialW,w
  1261  0019  1D03               	skipz
  1262  001A  0008               	return
  1263                           
  1264                           ;TCC_Main.c: 75: {
  1265                           ;TCC_Main.c: 76: Serial_Write(0xFF);
  1266  001B  30FF               	movlw	255
  1267  001C  120A  118A  22A3   	fcall	_Serial_Write
      +       120A  118A         
  1268                           
  1269                           ;TCC_Main.c: 77: Serial_Write(0xFF);
  1270  0021  30FF               	movlw	255
  1271  0022  120A  118A  22A3   	fcall	_Serial_Write
      +       120A  118A         
  1272                           
  1273                           ;TCC_Main.c: 78: Serial_Write(Tensao[0]);
  1274  0027  1283               	bcf	3,5	;RP0=0, select bank0
  1275  0028  1303               	bcf	3,6	;RP1=0, select bank0
  1276  0029  0861               	movf	_Tensao,w
  1277  002A  120A  118A  22A3   	fcall	_Serial_Write
      +       120A  118A         
  1278                           
  1279                           ;TCC_Main.c: 79: Serial_Write(Tensao[1]);
  1280  002F  1283               	bcf	3,5	;RP0=0, select bank0
  1281  0030  1303               	bcf	3,6	;RP1=0, select bank0
  1282  0031  0862               	movf	_Tensao+1,w
  1283  0032  120A  118A  22A3   	fcall	_Serial_Write
      +       120A  118A         
  1284                           
  1285                           ;TCC_Main.c: 80: Serial_Write(Tensao[2]);
  1286  0037  1283               	bcf	3,5	;RP0=0, select bank0
  1287  0038  1303               	bcf	3,6	;RP1=0, select bank0
  1288  0039  0863               	movf	_Tensao+2,w
  1289  003A  120A  118A  22A3   	fcall	_Serial_Write
      +       120A  118A         
  1290                           
  1291                           ;TCC_Main.c: 81: Serial_Write(ModuloCM.status);
  1292  003F  1283               	bcf	3,5	;RP0=0, select bank0
  1293  0040  1303               	bcf	3,6	;RP1=0, select bank0
  1294  0041  0851               	movf	_ModuloCM,w
  1295  0042  120A  118A  22A3   	fcall	_Serial_Write
      +       120A  118A         
  1296                           
  1297                           ;TCC_Main.c: 82: Serial_Write(ModuloCM.corrente[0]>>8);
  1298  0047  1283               	bcf	3,5	;RP0=0, select bank0
  1299  0048  1303               	bcf	3,6	;RP1=0, select bank0
  1300  0049  0853               	movf	_ModuloCM+2,w
  1301  004A  120A  118A  22A3   	fcall	_Serial_Write
      +       120A  118A         
  1302                           
  1303                           ;TCC_Main.c: 83: Serial_Write(ModuloCM.corrente[0]&0x00FF);
  1304  004F  1283               	bcf	3,5	;RP0=0, select bank0
  1305  0050  1303               	bcf	3,6	;RP1=0, select bank0
  1306  0051  0852               	movf	_ModuloCM+1,w
  1307  0052  120A  118A  22A3   	fcall	_Serial_Write
      +       120A  118A         
  1308                           
  1309                           ;TCC_Main.c: 84: Serial_Write(ModuloCM.corrente[1]>>8);
  1310  0057  1283               	bcf	3,5	;RP0=0, select bank0
  1311  0058  1303               	bcf	3,6	;RP1=0, select bank0
  1312  0059  0855               	movf	_ModuloCM+4,w
  1313  005A  120A  118A  22A3   	fcall	_Serial_Write
      +       120A  118A         
  1314                           
  1315                           ;TCC_Main.c: 85: Serial_Write(ModuloCM.corrente[1]&0x00FF);
  1316  005F  1283               	bcf	3,5	;RP0=0, select bank0
  1317  0060  1303               	bcf	3,6	;RP1=0, select bank0
  1318  0061  0854               	movf	_ModuloCM+3,w
  1319  0062  120A  118A  22A3   	fcall	_Serial_Write
      +       120A  118A         
  1320                           
  1321                           ;TCC_Main.c: 86: Serial_Write(ModuloCM.corrente[2]>>8);
  1322  0067  1283               	bcf	3,5	;RP0=0, select bank0
  1323  0068  1303               	bcf	3,6	;RP1=0, select bank0
  1324  0069  0857               	movf	_ModuloCM+6,w
  1325  006A  120A  118A  22A3   	fcall	_Serial_Write
      +       120A  118A         
  1326                           
  1327                           ;TCC_Main.c: 87: Serial_Write(ModuloCM.corrente[2]&0x00FF);
  1328  006F  1283               	bcf	3,5	;RP0=0, select bank0
  1329  0070  1303               	bcf	3,6	;RP1=0, select bank0
  1330  0071  0856               	movf	_ModuloCM+5,w
  1331  0072  120A  118A  22A3   	fcall	_Serial_Write
      +       120A  118A         
  1332                           
  1333                           ;TCC_Main.c: 88: Serial_Write(ModuloCM.corrente[3]>>8);
  1334  0077  1283               	bcf	3,5	;RP0=0, select bank0
  1335  0078  1303               	bcf	3,6	;RP1=0, select bank0
  1336  0079  0859               	movf	_ModuloCM+8,w
  1337  007A  120A  118A  22A3   	fcall	_Serial_Write
      +       120A  118A         
  1338                           
  1339                           ;TCC_Main.c: 89: Serial_Write(ModuloCM.corrente[3]&0x00FF);
  1340  007F  1283               	bcf	3,5	;RP0=0, select bank0
  1341  0080  1303               	bcf	3,6	;RP1=0, select bank0
  1342  0081  0858               	movf	_ModuloCM+7,w
  1343  0082  120A  118A  22A3   	fcall	_Serial_Write
      +       120A  118A         
  1344                           
  1345                           ;TCC_Main.c: 90: Serial_Write(RTC.hora);
  1346  0087  1283               	bcf	3,5	;RP0=0, select bank0
  1347  0088  1303               	bcf	3,6	;RP1=0, select bank0
  1348  0089  0820               	movf	_RTC,w
  1349  008A  120A  118A  22A3   	fcall	_Serial_Write
      +       120A  118A         
  1350                           
  1351                           ;TCC_Main.c: 91: Serial_Write(RTC.minuto);
  1352  008F  1283               	bcf	3,5	;RP0=0, select bank0
  1353  0090  1303               	bcf	3,6	;RP1=0, select bank0
  1354  0091  0821               	movf	_RTC+1,w
  1355  0092  120A  118A  22A3   	fcall	_Serial_Write
  1356                           
  1357                           ;TCC_Main.c: 92: TemporizadorSerialW = 30000;
  1358  0095  3030               	movlw	48
  1359  0096  1283               	bcf	3,5	;RP0=0, select bank0
  1360  0097  1303               	bcf	3,6	;RP1=0, select bank0
  1361  0098  00CF               	movwf	_TemporizadorSerialW
  1362  0099  3075               	movlw	117
  1363  009A  00D0               	movwf	_TemporizadorSerialW+1
  1364  009B  0008               	return
  1365  009C                     __end_of_EnvioDadosSerial:	
  1366                           
  1367                           	psect	text10
  1368  02A3                     __ptext10:	
  1369 ;; *************** function _Serial_Write *****************
  1370 ;; Defined at:
  1371 ;;		line 63 in file "Serial.c"
  1372 ;; Parameters:    Size  Location     Type
  1373 ;;  Valor           1    wreg     unsigned char 
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;  Valor           1    5[BANK0 ] unsigned char 
  1376 ;; Return value:  Size  Location     Type
  1377 ;;		None               void
  1378 ;; Registers used:
  1379 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1380 ;; Tracked objects:
  1381 ;;		On entry : 0/0
  1382 ;;		On exit  : 0/0
  1383 ;;		Unchanged: 0/0
  1384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1385 ;;      Params:         0       0       0       0       0
  1386 ;;      Locals:         0       1       0       0       0
  1387 ;;      Temps:          0       1       0       0       0
  1388 ;;      Totals:         0       2       0       0       0
  1389 ;;Total ram usage:        2 bytes
  1390 ;; Hardware stack levels used:    1
  1391 ;; Hardware stack levels required when called:    4
  1392 ;; This function calls:
  1393 ;;		_estaCheia
  1394 ;;		_inserir
  1395 ;; This function is called by:
  1396 ;;		_EnvioDadosSerial
  1397 ;; This function uses a non-reentrant model
  1398 ;;
  1399                           
  1400                           
  1401                           ;psect for function _Serial_Write
  1402  02A3                     _Serial_Write:	
  1403                           
  1404                           ;incstack = 0
  1405                           ; Regs used in _Serial_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1406                           ;Serial_Write@Valor stored from wreg
  1407  02A3  1283               	bcf	3,5	;RP0=0, select bank0
  1408  02A4  1303               	bcf	3,6	;RP1=0, select bank0
  1409  02A5  00DF               	movwf	Serial_Write@Valor
  1410                           
  1411                           ;Serial.c: 64: if(!estaCheia(&BufferWrite))
  1412  02A6  303C               	movlw	_BufferWrite& (0+255)
  1413  02A7  120A  118A  22CA   	fcall	_estaCheia
      +       120A  118A         
  1414  02AC  3800               	iorlw	0
  1415  02AD  1D03               	skipz
  1416  02AE  0008               	return
  1417                           
  1418                           ;Serial.c: 65: inserir(&BufferWrite, Valor);
  1419  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  1420  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  1421  02B1  085F               	movf	Serial_Write@Valor,w
  1422  02B2  00DE               	movwf	??_Serial_Write
  1423  02B3  085E               	movf	??_Serial_Write,w
  1424  02B4  00DA               	movwf	?_inserir
  1425  02B5  303C               	movlw	_BufferWrite& (0+255)
  1426  02B6  120A  118A  21EF   	fcall	_inserir
  1427  02B9  0008               	return
  1428  02BA                     __end_of_Serial_Write:	
  1429                           
  1430                           	psect	text11
  1431  01EF                     __ptext11:	
  1432 ;; *************** function _inserir *****************
  1433 ;; Defined at:
  1434 ;;		line 91 in file "Serial.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;  buf             1    wreg     PTR struct fila
  1437 ;;		 -> BufferRead(19), BufferWrite(19), 
  1438 ;;  Valor           1    0[BANK0 ] unsigned char 
  1439 ;; Auto vars:     Size  Location     Type
  1440 ;;  buf             1    3[BANK0 ] PTR struct fila
  1441 ;;		 -> BufferRead(19), BufferWrite(19), 
  1442 ;; Return value:  Size  Location     Type
  1443 ;;		None               void
  1444 ;; Registers used:
  1445 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1446 ;; Tracked objects:
  1447 ;;		On entry : 0/0
  1448 ;;		On exit  : 0/0
  1449 ;;		Unchanged: 0/0
  1450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1451 ;;      Params:         0       1       0       0       0
  1452 ;;      Locals:         0       1       0       0       0
  1453 ;;      Temps:          0       2       0       0       0
  1454 ;;      Totals:         0       4       0       0       0
  1455 ;;Total ram usage:        4 bytes
  1456 ;; Hardware stack levels used:    1
  1457 ;; Hardware stack levels required when called:    3
  1458 ;; This function calls:
  1459 ;;		Nothing
  1460 ;; This function is called by:
  1461 ;;		_Serial_Write
  1462 ;; This function uses a non-reentrant model
  1463 ;;
  1464                           
  1465                           
  1466                           ;psect for function _inserir
  1467  01EF                     _inserir:	
  1468                           
  1469                           ;incstack = 0
  1470                           ; Regs used in _inserir: [wreg-fsr0h+status,2+status,0]
  1471                           ;inserir@buf stored from wreg
  1472  01EF  1283               	bcf	3,5	;RP0=0, select bank0
  1473  01F0  1303               	bcf	3,6	;RP1=0, select bank0
  1474  01F1  00DD               	movwf	inserir@buf
  1475                           
  1476                           ;Serial.c: 92: buf->dados[buf->ultimo] = Valor;
  1477  01F2  085A               	movf	inserir@Valor,w
  1478  01F3  00DB               	movwf	??_inserir
  1479  01F4  085D               	movf	inserir@buf,w
  1480  01F5  3E11               	addlw	17
  1481  01F6  0084               	movwf	4
  1482  01F7  1383               	bcf	3,7	;select IRP bank0
  1483  01F8  0800               	movf	0,w
  1484  01F9  075D               	addwf	inserir@buf,w
  1485  01FA  00DC               	movwf	??_inserir+1
  1486  01FB  085C               	movf	??_inserir+1,w
  1487  01FC  0084               	movwf	4
  1488  01FD  085B               	movf	??_inserir,w
  1489  01FE  0080               	movwf	0
  1490                           
  1491                           ;Serial.c: 93: buf->ultimo++;
  1492  01FF  3001               	movlw	1
  1493  0200  00DB               	movwf	??_inserir
  1494  0201  085D               	movf	inserir@buf,w
  1495  0202  3E11               	addlw	17
  1496  0203  0084               	movwf	4
  1497  0204  085B               	movf	??_inserir,w
  1498  0205  0780               	addwf	0,f
  1499                           
  1500                           ;Serial.c: 94: buf->nItens++;
  1501  0206  3001               	movlw	1
  1502  0207  00DB               	movwf	??_inserir
  1503  0208  085D               	movf	inserir@buf,w
  1504  0209  3E12               	addlw	18
  1505  020A  0084               	movwf	4
  1506  020B  085B               	movf	??_inserir,w
  1507  020C  0780               	addwf	0,f
  1508                           
  1509                           ;Serial.c: 96: if(buf->ultimo == 16)
  1510  020D  085D               	movf	inserir@buf,w
  1511  020E  3E11               	addlw	17
  1512  020F  0084               	movwf	4
  1513  0210  0800               	movf	0,w
  1514  0211  3A10               	xorlw	16
  1515  0212  1D03               	skipz
  1516  0213  0008               	return
  1517                           
  1518                           ;Serial.c: 97: buf->ultimo = 0;
  1519  0214  085D               	movf	inserir@buf,w
  1520  0215  3E11               	addlw	17
  1521  0216  0084               	movwf	4
  1522  0217  0180               	clrf	0
  1523  0218  0008               	return
  1524  0219                     __end_of_inserir:	
  1525                           
  1526                           	psect	text12
  1527  02CA                     __ptext12:	
  1528 ;; *************** function _estaCheia *****************
  1529 ;; Defined at:
  1530 ;;		line 117 in file "Serial.c"
  1531 ;; Parameters:    Size  Location     Type
  1532 ;;  buf             1    wreg     PTR struct fila
  1533 ;;		 -> BufferRead(19), BufferWrite(19), 
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;  buf             1    0[BANK0 ] PTR struct fila
  1536 ;;		 -> BufferRead(19), BufferWrite(19), 
  1537 ;; Return value:  Size  Location     Type
  1538 ;;                  1    wreg      unsigned char 
  1539 ;; Registers used:
  1540 ;;		wreg, fsr0l, fsr0h
  1541 ;; Tracked objects:
  1542 ;;		On entry : 0/0
  1543 ;;		On exit  : 0/0
  1544 ;;		Unchanged: 0/0
  1545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1546 ;;      Params:         0       0       0       0       0
  1547 ;;      Locals:         0       1       0       0       0
  1548 ;;      Temps:          0       0       0       0       0
  1549 ;;      Totals:         0       1       0       0       0
  1550 ;;Total ram usage:        1 bytes
  1551 ;; Hardware stack levels used:    1
  1552 ;; Hardware stack levels required when called:    3
  1553 ;; This function calls:
  1554 ;;		Nothing
  1555 ;; This function is called by:
  1556 ;;		_Serial_Write
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560                           
  1561                           ;psect for function _estaCheia
  1562  02CA                     _estaCheia:	
  1563                           
  1564                           ;incstack = 0
  1565                           ; Regs used in _estaCheia: [wregfsr0]
  1566                           ;estaCheia@buf stored from wreg
  1567  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  1568  02CB  1303               	bcf	3,6	;RP1=0, select bank0
  1569  02CC  00DA               	movwf	estaCheia@buf
  1570                           
  1571                           ;Serial.c: 118: return (buf->nItens==16);
  1572  02CD  085A               	movf	estaCheia@buf,w
  1573  02CE  3E12               	addlw	18
  1574  02CF  0084               	movwf	4
  1575  02D0  1383               	bcf	3,7	;select IRP bank0
  1576  02D1  0800               	movf	0,w
  1577  02D2  3A10               	xorlw	16
  1578  02D3  3000               	movlw	0
  1579  02D4  1903               	skipnz
  1580  02D5  3001               	movlw	1
  1581  02D6  0008               	return
  1582  02D7                     __end_of_estaCheia:	
  1583                           
  1584                           	psect	text13
  1585  00E3                     __ptext13:	
  1586 ;; *************** function _Interrupcao *****************
  1587 ;; Defined at:
  1588 ;;		line 54 in file "TCC_Main.c"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;		None
  1591 ;; Auto vars:     Size  Location     Type
  1592 ;;		None
  1593 ;; Return value:  Size  Location     Type
  1594 ;;		None               void
  1595 ;; Registers used:
  1596 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1597 ;; Tracked objects:
  1598 ;;		On entry : 0/0
  1599 ;;		On exit  : 0/0
  1600 ;;		Unchanged: 0/0
  1601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1602 ;;      Params:         0       0       0       0       0
  1603 ;;      Locals:         0       0       0       0       0
  1604 ;;      Temps:          5       0       0       0       0
  1605 ;;      Totals:         5       0       0       0       0
  1606 ;;Total ram usage:        5 bytes
  1607 ;; Hardware stack levels used:    1
  1608 ;; Hardware stack levels required when called:    2
  1609 ;; This function calls:
  1610 ;;		_Serial_Interrupt
  1611 ;; This function is called by:
  1612 ;;		Interrupt level 1
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615                           
  1616                           
  1617                           ;psect for function _Interrupcao
  1618  00E3                     _Interrupcao:	
  1619                           
  1620                           ;TCC_Main.c: 55: if (INTCONbits.T0IF == 1)
  1621  00E3  1D0B               	btfss	11,2	;volatile
  1622  00E4  2912               	goto	i1l1041
  1623                           
  1624                           ;TCC_Main.c: 56: {
  1625                           ;TCC_Main.c: 57: INTCONbits.T0IF = 0;
  1626  00E5  110B               	bcf	11,2	;volatile
  1627                           
  1628                           ;TCC_Main.c: 58: TMR0 += 130;
  1629  00E6  3082               	movlw	130
  1630  00E7  00F8               	movwf	??_Interrupcao
  1631  00E8  0878               	movf	??_Interrupcao,w
  1632  00E9  0781               	addwf	1,f	;volatile
  1633                           
  1634                           ;TCC_Main.c: 59: if (Temporizador1 > 0)
  1635  00EA  0823               	movf	_Temporizador1+1,w
  1636  00EB  0422               	iorwf	_Temporizador1,w
  1637  00EC  1903               	skipnz
  1638  00ED  28F4               	goto	i1l139
  1639                           
  1640                           ;TCC_Main.c: 60: Temporizador1 --;
  1641  00EE  3001               	movlw	1
  1642  00EF  02A2               	subwf	_Temporizador1,f
  1643  00F0  3000               	movlw	0
  1644  00F1  1C03               	skipc
  1645  00F2  03A3               	decf	_Temporizador1+1,f
  1646  00F3  02A3               	subwf	_Temporizador1+1,f
  1647  00F4                     i1l139:	
  1648                           
  1649                           ;TCC_Main.c: 61: if (TemporizadorSerialW > 0)
  1650  00F4  0850               	movf	_TemporizadorSerialW+1,w
  1651  00F5  044F               	iorwf	_TemporizadorSerialW,w
  1652  00F6  1903               	skipnz
  1653  00F7  28FE               	goto	i1l140
  1654                           
  1655                           ;TCC_Main.c: 62: TemporizadorSerialW--;
  1656  00F8  3001               	movlw	1
  1657  00F9  02CF               	subwf	_TemporizadorSerialW,f
  1658  00FA  3000               	movlw	0
  1659  00FB  1C03               	skipc
  1660  00FC  03D0               	decf	_TemporizadorSerialW+1,f
  1661  00FD  02D0               	subwf	_TemporizadorSerialW+1,f
  1662  00FE                     i1l140:	
  1663                           
  1664                           ;TCC_Main.c: 63: if (TemporizadorSerialR > 0)
  1665  00FE  0827               	movf	_TemporizadorSerialR+1,w
  1666  00FF  0426               	iorwf	_TemporizadorSerialR,w
  1667  0100  1903               	skipnz
  1668  0101  2908               	goto	i1l141
  1669                           
  1670                           ;TCC_Main.c: 64: TemporizadorSerialR--;
  1671  0102  3001               	movlw	1
  1672  0103  02A6               	subwf	_TemporizadorSerialR,f
  1673  0104  3000               	movlw	0
  1674  0105  1C03               	skipc
  1675  0106  03A7               	decf	_TemporizadorSerialR+1,f
  1676  0107  02A7               	subwf	_TemporizadorSerialR+1,f
  1677  0108                     i1l141:	
  1678                           
  1679                           ;TCC_Main.c: 65: if (TemporizadorPortb > 0)
  1680  0108  0825               	movf	_TemporizadorPortb+1,w
  1681  0109  0424               	iorwf	_TemporizadorPortb,w
  1682  010A  1903               	skipnz
  1683  010B  2912               	goto	i1l1041
  1684                           
  1685                           ;TCC_Main.c: 66: TemporizadorPortb--;
  1686  010C  3001               	movlw	1
  1687  010D  02A4               	subwf	_TemporizadorPortb,f
  1688  010E  3000               	movlw	0
  1689  010F  1C03               	skipc
  1690  0110  03A5               	decf	_TemporizadorPortb+1,f
  1691  0111  02A5               	subwf	_TemporizadorPortb+1,f
  1692  0112                     i1l1041:	
  1693                           
  1694                           ;TCC_Main.c: 67: }
  1695                           ;TCC_Main.c: 69: Serial_Interrupt();
  1696  0112  120A  118A  2124   	fcall	_Serial_Interrupt
      +       120A  118A         
  1697  0117  087C               	movf	??_Interrupcao+4,w
  1698  0118  1283               	bcf	3,5	;RP0=0, select bank0
  1699  0119  1303               	bcf	3,6	;RP1=0, select bank0
  1700  011A  00FF               	movwf	127
  1701  011B  087B               	movf	??_Interrupcao+3,w
  1702  011C  008A               	movwf	10
  1703  011D  087A               	movf	??_Interrupcao+2,w
  1704  011E  0084               	movwf	4
  1705  011F  0E79               	swapf	(??_Interrupcao+1)^(0+-128),w
  1706  0120  0083               	movwf	3
  1707  0121  0EFE               	swapf	126,f
  1708  0122  0E7E               	swapf	126,w
  1709  0123  0009               	retfie
  1710  0124                     __end_of_Interrupcao:	
  1711                           
  1712                           	psect	intentry
  1713  0004                     __pintentry:	
  1714                           ;incstack = 0
  1715                           ; Regs used in _Interrupcao: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1716                           
  1717  0004                     interrupt_function:	
  1718  007E                     saved_w	set	btemp
  1719  0004  00FE               	movwf	btemp
  1720  0005  0E03               	swapf	3,w
  1721  0006  00F9               	movwf	??_Interrupcao+1
  1722  0007  0804               	movf	4,w
  1723  0008  00FA               	movwf	??_Interrupcao+2
  1724  0009  080A               	movf	10,w
  1725  000A  00FB               	movwf	??_Interrupcao+3
  1726  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1727  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1728  000D  087F               	movf	btemp+1,w
  1729  000E  00FC               	movwf	??_Interrupcao+4
  1730  000F  120A  118A  28E3   	ljmp	_Interrupcao
  1731                           
  1732                           	psect	text14
  1733  0124                     __ptext14:	
  1734 ;; *************** function _Serial_Interrupt *****************
  1735 ;; Defined at:
  1736 ;;		line 36 in file "Serial.c"
  1737 ;; Parameters:    Size  Location     Type
  1738 ;;		None
  1739 ;; Auto vars:     Size  Location     Type
  1740 ;;  tmp             1    7[COMMON] unsigned char 
  1741 ;; Return value:  Size  Location     Type
  1742 ;;		None               void
  1743 ;; Registers used:
  1744 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1745 ;; Tracked objects:
  1746 ;;		On entry : 0/0
  1747 ;;		On exit  : 0/0
  1748 ;;		Unchanged: 0/0
  1749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1750 ;;      Params:         0       0       0       0       0
  1751 ;;      Locals:         1       0       0       0       0
  1752 ;;      Temps:          1       0       0       0       0
  1753 ;;      Totals:         2       0       0       0       0
  1754 ;;Total ram usage:        2 bytes
  1755 ;; Hardware stack levels used:    1
  1756 ;; Hardware stack levels required when called:    1
  1757 ;; This function calls:
  1758 ;;		i1_inserir
  1759 ;;		i1_remover
  1760 ;;		i1_estaVazia
  1761 ;;		i1_estaCheia
  1762 ;; This function is called by:
  1763 ;;		_Interrupcao
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           
  1768                           ;psect for function _Serial_Interrupt
  1769  0124                     _Serial_Interrupt:	
  1770                           
  1771                           ;Serial.c: 37: if (PIR1bits.TXIF == 1 && TXSTAbits.TRMT == 1)
  1772                           
  1773                           ;incstack = 0
  1774                           ; Regs used in _Serial_Interrupt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1775  0124  1283               	bcf	3,5	;RP0=0, select bank0
  1776  0125  1303               	bcf	3,6	;RP1=0, select bank0
  1777  0126  1E0C               	btfss	12,4	;volatile
  1778  0127  2941               	goto	i1l1011
  1779  0128  1683               	bsf	3,5	;RP0=1, select bank1
  1780  0129  1303               	bcf	3,6	;RP1=0, select bank1
  1781  012A  1C98               	btfss	24,1	;volatile
  1782  012B  2941               	goto	i1l1011
  1783                           
  1784                           ;Serial.c: 38: {
  1785                           ;Serial.c: 39: PIR1bits.TXIF = 0;
  1786  012C  1283               	bcf	3,5	;RP0=0, select bank0
  1787  012D  1303               	bcf	3,6	;RP1=0, select bank0
  1788  012E  120C               	bcf	12,4	;volatile
  1789                           
  1790                           ;Serial.c: 40: if(!estaVazia(&BufferWrite))
  1791  012F  303C               	movlw	_BufferWrite& (0+255)
  1792  0130  120A  118A  22EE   	fcall	i1_estaVazia
      +       120A  118A         
  1793  0135  3800               	iorlw	0
  1794  0136  1D03               	skipz
  1795  0137  2941               	goto	i1l1011
  1796                           
  1797                           ;Serial.c: 41: {
  1798                           ;Serial.c: 42: TXREG = remover(&BufferWrite);
  1799  0138  303C               	movlw	_BufferWrite& (0+255)
  1800  0139  120A  118A  2219   	fcall	i1_remover
      +       120A  118A         
  1801  013E  1283               	bcf	3,5	;RP0=0, select bank0
  1802  013F  1303               	bcf	3,6	;RP1=0, select bank0
  1803  0140  0099               	movwf	25	;volatile
  1804  0141                     i1l1011:	
  1805                           
  1806                           ;Serial.c: 43: }
  1807                           ;Serial.c: 44: }
  1808                           ;Serial.c: 46: if(RCSTAbits.OERR == 1)
  1809  0141  1283               	bcf	3,5	;RP0=0, select bank0
  1810  0142  1303               	bcf	3,6	;RP1=0, select bank0
  1811  0143  1C98               	btfss	24,1	;volatile
  1812  0144  294F               	goto	i1l1019
  1813                           
  1814                           ;Serial.c: 47: {
  1815                           ;Serial.c: 48: char tmp = RCREG;
  1816  0145  081A               	movf	26,w	;volatile
  1817  0146  00F6               	movwf	??_Serial_Interrupt
  1818  0147  0876               	movf	??_Serial_Interrupt,w
  1819  0148  00F7               	movwf	Serial_Interrupt@tmp
  1820                           
  1821                           ;Serial.c: 49: tmp = RCREG;
  1822  0149  081A               	movf	26,w	;volatile
  1823  014A  00F6               	movwf	??_Serial_Interrupt
  1824  014B  0876               	movf	??_Serial_Interrupt,w
  1825  014C  00F7               	movwf	Serial_Interrupt@tmp
  1826                           
  1827                           ;Serial.c: 50: RCSTAbits.CREN = 0;
  1828  014D  1218               	bcf	24,4	;volatile
  1829                           
  1830                           ;Serial.c: 51: RCSTAbits.CREN = 1;
  1831  014E  1618               	bsf	24,4	;volatile
  1832  014F                     i1l1019:	
  1833                           
  1834                           ;Serial.c: 52: }
  1835                           ;Serial.c: 54: if (PIR1bits.RCIF == 1)
  1836  014F  1E8C               	btfss	12,5	;volatile
  1837  0150  0008               	return
  1838                           
  1839                           ;Serial.c: 55: {
  1840                           ;Serial.c: 57: if(!estaCheia(&BufferRead))
  1841  0151  3029               	movlw	_BufferRead& (0+255)
  1842  0152  120A  118A  22E3   	fcall	i1_estaCheia
      +       120A  118A         
  1843  0157  3800               	iorlw	0
  1844  0158  1D03               	skipz
  1845  0159  0008               	return
  1846                           
  1847                           ;Serial.c: 58: inserir(&BufferRead, RCREG);
  1848  015A  1283               	bcf	3,5	;RP0=0, select bank0
  1849  015B  1303               	bcf	3,6	;RP1=0, select bank0
  1850  015C  081A               	movf	26,w	;volatile
  1851  015D  00F6               	movwf	??_Serial_Interrupt
  1852  015E  0876               	movf	??_Serial_Interrupt,w
  1853  015F  00F0               	movwf	?i1_inserir
  1854  0160  3029               	movlw	_BufferRead& (0+255)
  1855  0161  120A  118A  2243   	fcall	i1_inserir
  1856  0164  0008               	return
  1857  0165                     __end_of_Serial_Interrupt:	
  1858                           
  1859                           	psect	text15
  1860  02E3                     __ptext15:	
  1861 ;; *************** function i1_estaCheia *****************
  1862 ;; Defined at:
  1863 ;;		line 117 in file "Serial.c"
  1864 ;; Parameters:    Size  Location     Type
  1865 ;;  estaCheia       1    wreg     PTR struct fila
  1866 ;;		 -> BufferRead(19), BufferWrite(19), 
  1867 ;; Auto vars:     Size  Location     Type
  1868 ;;  estaCheia       1    0[COMMON] PTR struct fila
  1869 ;;		 -> BufferRead(19), BufferWrite(19), 
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  1    wreg      unsigned char 
  1872 ;; Registers used:
  1873 ;;		wreg, fsr0l, fsr0h
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1879 ;;      Params:         0       0       0       0       0
  1880 ;;      Locals:         1       0       0       0       0
  1881 ;;      Temps:          0       0       0       0       0
  1882 ;;      Totals:         1       0       0       0       0
  1883 ;;Total ram usage:        1 bytes
  1884 ;; Hardware stack levels used:    1
  1885 ;; This function calls:
  1886 ;;		Nothing
  1887 ;; This function is called by:
  1888 ;;		_Serial_Interrupt
  1889 ;; This function uses a non-reentrant model
  1890 ;;
  1891                           
  1892                           
  1893                           ;psect for function i1_estaCheia
  1894  02E3                     i1_estaCheia:	
  1895                           
  1896                           ;incstack = 0
  1897                           ; Regs used in i1_estaCheia: [wregfsr0]
  1898                           ;i1estaCheia@buf stored from wreg
  1899  02E3  00F0               	movwf	i1estaCheia@buf
  1900                           
  1901                           ;Serial.c: 118: return (buf->nItens==16);
  1902  02E4  0870               	movf	i1estaCheia@buf,w
  1903  02E5  3E12               	addlw	18
  1904  02E6  0084               	movwf	4
  1905  02E7  1383               	bcf	3,7	;select IRP bank0
  1906  02E8  0800               	movf	0,w
  1907  02E9  3A10               	xorlw	16
  1908  02EA  3000               	movlw	0
  1909  02EB  1903               	skipnz
  1910  02EC  3001               	movlw	1
  1911  02ED  0008               	return
  1912  02EE                     __end_ofi1_estaCheia:	
  1913                           
  1914                           	psect	text16
  1915  02EE                     __ptext16:	
  1916 ;; *************** function i1_estaVazia *****************
  1917 ;; Defined at:
  1918 ;;		line 112 in file "Serial.c"
  1919 ;; Parameters:    Size  Location     Type
  1920 ;;  estaVazia       1    wreg     PTR struct fila
  1921 ;;		 -> BufferRead(19), BufferWrite(19), 
  1922 ;; Auto vars:     Size  Location     Type
  1923 ;;  estaVazia       1    0[COMMON] PTR struct fila
  1924 ;;		 -> BufferRead(19), BufferWrite(19), 
  1925 ;; Return value:  Size  Location     Type
  1926 ;;                  1    wreg      unsigned char 
  1927 ;; Registers used:
  1928 ;;		wreg, fsr0l, fsr0h
  1929 ;; Tracked objects:
  1930 ;;		On entry : 0/0
  1931 ;;		On exit  : 0/0
  1932 ;;		Unchanged: 0/0
  1933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1934 ;;      Params:         0       0       0       0       0
  1935 ;;      Locals:         1       0       0       0       0
  1936 ;;      Temps:          0       0       0       0       0
  1937 ;;      Totals:         1       0       0       0       0
  1938 ;;Total ram usage:        1 bytes
  1939 ;; Hardware stack levels used:    1
  1940 ;; This function calls:
  1941 ;;		Nothing
  1942 ;; This function is called by:
  1943 ;;		_Serial_Interrupt
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           
  1948                           ;psect for function i1_estaVazia
  1949  02EE                     i1_estaVazia:	
  1950                           
  1951                           ;incstack = 0
  1952                           ; Regs used in i1_estaVazia: [wregfsr0]
  1953                           ;i1estaVazia@buf stored from wreg
  1954  02EE  00F0               	movwf	i1estaVazia@buf
  1955                           
  1956                           ;Serial.c: 113: return (buf->nItens==0);
  1957  02EF  0870               	movf	i1estaVazia@buf,w
  1958  02F0  3E12               	addlw	18
  1959  02F1  0084               	movwf	4
  1960  02F2  1383               	bcf	3,7	;select IRP bank0
  1961  02F3  0880               	movf	0,f
  1962  02F4  3000               	movlw	0
  1963  02F5  1903               	skipnz
  1964  02F6  3001               	movlw	1
  1965  02F7  0008               	return
  1966  02F8                     __end_ofi1_estaVazia:	
  1967                           
  1968                           	psect	text17
  1969  0219                     __ptext17:	
  1970 ;; *************** function i1_remover *****************
  1971 ;; Defined at:
  1972 ;;		line 101 in file "Serial.c"
  1973 ;; Parameters:    Size  Location     Type
  1974 ;;  remover         1    wreg     PTR struct fila
  1975 ;;		 -> BufferRead(19), BufferWrite(19), 
  1976 ;; Auto vars:     Size  Location     Type
  1977 ;;  remover         1    5[COMMON] PTR struct fila
  1978 ;;		 -> BufferRead(19), BufferWrite(19), 
  1979 ;;  remover         2    3[COMMON] int 
  1980 ;; Return value:  Size  Location     Type
  1981 ;;                  1    wreg      unsigned char 
  1982 ;; Registers used:
  1983 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1984 ;; Tracked objects:
  1985 ;;		On entry : 0/0
  1986 ;;		On exit  : 0/0
  1987 ;;		Unchanged: 0/0
  1988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1989 ;;      Params:         0       0       0       0       0
  1990 ;;      Locals:         3       0       0       0       0
  1991 ;;      Temps:          3       0       0       0       0
  1992 ;;      Totals:         6       0       0       0       0
  1993 ;;Total ram usage:        6 bytes
  1994 ;; Hardware stack levels used:    1
  1995 ;; This function calls:
  1996 ;;		Nothing
  1997 ;; This function is called by:
  1998 ;;		_Serial_Interrupt
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           
  2003                           ;psect for function i1_remover
  2004  0219                     i1_remover:	
  2005                           
  2006                           ;incstack = 0
  2007                           ; Regs used in i1_remover: [wreg-fsr0h+status,2+status,0]
  2008                           ;i1remover@buf stored from wreg
  2009  0219  00F5               	movwf	i1remover@buf
  2010                           
  2011                           ;Serial.c: 102: int temp = buf->dados[buf->primeiro++];
  2012  021A  0875               	movf	i1remover@buf,w
  2013  021B  3E10               	addlw	16
  2014  021C  0084               	movwf	4
  2015  021D  1383               	bcf	3,7	;select IRP bank0
  2016  021E  0800               	movf	0,w
  2017  021F  0775               	addwf	i1remover@buf,w
  2018  0220  00F0               	movwf	??i1_remover
  2019  0221  0870               	movf	??i1_remover,w
  2020  0222  0084               	movwf	4
  2021  0223  0800               	movf	0,w
  2022  0224  00F1               	movwf	??i1_remover+1
  2023  0225  01F2               	clrf	??i1_remover+2
  2024  0226  0871               	movf	??i1_remover+1,w
  2025  0227  00F3               	movwf	i1remover@temp
  2026  0228  0872               	movf	??i1_remover+2,w
  2027  0229  00F4               	movwf	i1remover@temp+1
  2028  022A  3001               	movlw	1
  2029  022B  00F0               	movwf	??i1_remover
  2030  022C  0875               	movf	i1remover@buf,w
  2031  022D  3E10               	addlw	16
  2032  022E  0084               	movwf	4
  2033  022F  0870               	movf	??i1_remover,w
  2034  0230  0780               	addwf	0,f
  2035                           
  2036                           ;Serial.c: 104: if(buf->primeiro == 16)
  2037  0231  0875               	movf	i1remover@buf,w
  2038  0232  3E10               	addlw	16
  2039  0233  0084               	movwf	4
  2040  0234  0800               	movf	0,w
  2041  0235  3A10               	xorlw	16
  2042  0236  1D03               	skipz
  2043  0237  2A3C               	goto	i1l987
  2044                           
  2045                           ;Serial.c: 105: buf->primeiro = 0;
  2046  0238  0875               	movf	i1remover@buf,w
  2047  0239  3E10               	addlw	16
  2048  023A  0084               	movwf	4
  2049  023B  0180               	clrf	0
  2050  023C                     i1l987:	
  2051                           
  2052                           ;Serial.c: 107: buf->nItens--;
  2053  023C  0875               	movf	i1remover@buf,w
  2054  023D  3E12               	addlw	18
  2055  023E  0084               	movwf	4
  2056  023F  3001               	movlw	1
  2057  0240  0280               	subwf	0,f
  2058                           
  2059                           ;Serial.c: 108: return temp;
  2060  0241  0873               	movf	i1remover@temp,w
  2061  0242  0008               	return
  2062  0243                     __end_ofi1_remover:	
  2063                           
  2064                           	psect	text18
  2065  0243                     __ptext18:	
  2066 ;; *************** function i1_inserir *****************
  2067 ;; Defined at:
  2068 ;;		line 91 in file "Serial.c"
  2069 ;; Parameters:    Size  Location     Type
  2070 ;;  inserir         1    wreg     PTR struct fila
  2071 ;;		 -> BufferRead(19), BufferWrite(19), 
  2072 ;;  inserir         1    0[COMMON] unsigned char 
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;  inserir         1    3[COMMON] PTR struct fila
  2075 ;;		 -> BufferRead(19), BufferWrite(19), 
  2076 ;; Return value:  Size  Location     Type
  2077 ;;		None               void
  2078 ;; Registers used:
  2079 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2080 ;; Tracked objects:
  2081 ;;		On entry : 0/0
  2082 ;;		On exit  : 0/0
  2083 ;;		Unchanged: 0/0
  2084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2085 ;;      Params:         1       0       0       0       0
  2086 ;;      Locals:         1       0       0       0       0
  2087 ;;      Temps:          2       0       0       0       0
  2088 ;;      Totals:         4       0       0       0       0
  2089 ;;Total ram usage:        4 bytes
  2090 ;; Hardware stack levels used:    1
  2091 ;; This function calls:
  2092 ;;		Nothing
  2093 ;; This function is called by:
  2094 ;;		_Serial_Interrupt
  2095 ;; This function uses a non-reentrant model
  2096 ;;
  2097                           
  2098                           
  2099                           ;psect for function i1_inserir
  2100  0243                     i1_inserir:	
  2101                           
  2102                           ;incstack = 0
  2103                           ; Regs used in i1_inserir: [wreg-fsr0h+status,2+status,0]
  2104                           ;i1inserir@buf stored from wreg
  2105  0243  00F3               	movwf	i1inserir@buf
  2106                           
  2107                           ;Serial.c: 92: buf->dados[buf->ultimo] = Valor;
  2108  0244  0870               	movf	i1inserir@Valor,w
  2109  0245  00F1               	movwf	??i1_inserir
  2110  0246  0873               	movf	i1inserir@buf,w
  2111  0247  3E11               	addlw	17
  2112  0248  0084               	movwf	4
  2113  0249  1383               	bcf	3,7	;select IRP bank0
  2114  024A  0800               	movf	0,w
  2115  024B  0773               	addwf	i1inserir@buf,w
  2116  024C  00F2               	movwf	??i1_inserir+1
  2117  024D  0872               	movf	??i1_inserir+1,w
  2118  024E  0084               	movwf	4
  2119  024F  0871               	movf	??i1_inserir,w
  2120  0250  0080               	movwf	0
  2121                           
  2122                           ;Serial.c: 93: buf->ultimo++;
  2123  0251  3001               	movlw	1
  2124  0252  00F1               	movwf	??i1_inserir
  2125  0253  0873               	movf	i1inserir@buf,w
  2126  0254  3E11               	addlw	17
  2127  0255  0084               	movwf	4
  2128  0256  0871               	movf	??i1_inserir,w
  2129  0257  0780               	addwf	0,f
  2130                           
  2131                           ;Serial.c: 94: buf->nItens++;
  2132  0258  3001               	movlw	1
  2133  0259  00F1               	movwf	??i1_inserir
  2134  025A  0873               	movf	i1inserir@buf,w
  2135  025B  3E12               	addlw	18
  2136  025C  0084               	movwf	4
  2137  025D  0871               	movf	??i1_inserir,w
  2138  025E  0780               	addwf	0,f
  2139                           
  2140                           ;Serial.c: 96: if(buf->ultimo == 16)
  2141  025F  0873               	movf	i1inserir@buf,w
  2142  0260  3E11               	addlw	17
  2143  0261  0084               	movwf	4
  2144  0262  0800               	movf	0,w
  2145  0263  3A10               	xorlw	16
  2146  0264  1D03               	skipz
  2147  0265  0008               	return
  2148                           
  2149                           ;Serial.c: 97: buf->ultimo = 0;
  2150  0266  0873               	movf	i1inserir@buf,w
  2151  0267  3E11               	addlw	17
  2152  0268  0084               	movwf	4
  2153  0269  0180               	clrf	0
  2154  026A  0008               	return
  2155  026B                     __end_ofi1_inserir:	
  2156  007E                     btemp	set	126	;btemp
  2157  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        3
    BSS         47
    Persistent  11
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      7      68
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    estaCheia@buf	PTR struct fila size(1) Largest target is 19
		 -> BufferRead(BANK0[19]), BufferWrite(BANK0[19]), 

    estaVazia@buf	PTR struct fila size(1) Largest target is 19
		 -> BufferRead(BANK0[19]), BufferWrite(BANK0[19]), 

    remover@buf	PTR struct fila size(1) Largest target is 19
		 -> BufferRead(BANK0[19]), BufferWrite(BANK0[19]), 

    inserir@buf	PTR struct fila size(1) Largest target is 19
		 -> BufferRead(BANK0[19]), BufferWrite(BANK0[19]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _Interrupcao in COMMON

    _Interrupcao->_Serial_Interrupt
    _Serial_Interrupt->i1_remover

Critical Paths under _main in BANK0

    _main->_TrataComandoESP
    _Setup->_Serial_9600_Init
    _Serial_Available->_estaVazia
    _Serial_Read->_remover
    _EnvioDadosSerial->_Serial_Write
    _Serial_Write->_inserir

Critical Paths under _Interrupcao in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupcao in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupcao in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interrupcao in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     419
                   _EnvioDadosSerial
                    _TrataComandoESP
                              _Setup
 ---------------------------------------------------------------------------------
 (1) _Setup                                                1     1      0      22
                                              1 BANK0      1     1      0
                   _Serial_9600_Init
 ---------------------------------------------------------------------------------
 (2) _Serial_9600_Init                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TrataComandoESP                                      1     1      0     199
                                              6 BANK0      1     1      0
                        _Serial_Read
                   _Serial_Available
                       _Serial_Flush
 ---------------------------------------------------------------------------------
 (2) _Serial_Flush                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Serial_Available                                     0     0      0      22
                          _estaVazia
 ---------------------------------------------------------------------------------
 (2) _Serial_Read                                          0     0      0     177
                          _estaVazia
                            _remover
 ---------------------------------------------------------------------------------
 (3) _remover                                              6     6      0     155
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) _estaVazia                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _EnvioDadosSerial                                     0     0      0     198
                       _Serial_Write
 ---------------------------------------------------------------------------------
 (2) _Serial_Write                                         2     2      0     198
                                              4 BANK0      2     2      0
                          _estaCheia
                            _inserir
 ---------------------------------------------------------------------------------
 (3) _inserir                                              4     3      1     154
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _estaCheia                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Interrupcao                                          5     5      0    1172
                                              8 COMMON     5     5      0
                   _Serial_Interrupt
 ---------------------------------------------------------------------------------
 (5) _Serial_Interrupt                                     2     2      0    1172
                                              6 COMMON     2     2      0
                          i1_inserir
                          i1_remover
                        i1_estaVazia
                        i1_estaCheia
 ---------------------------------------------------------------------------------
 (6) i1_estaCheia                                          1     1      0      73
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) i1_estaVazia                                          1     1      0      73
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) i1_remover                                            6     6      0     513
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (6) i1_inserir                                            4     3      1     511
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EnvioDadosSerial
     _Serial_Write
       _estaCheia
       _inserir
   _TrataComandoESP
     _Serial_Read
       _estaVazia
       _remover
     _Serial_Available
       _estaVazia
     _Serial_Flush
   _Setup
     _Serial_9600_Init

 _Interrupcao (ROOT)
   _Serial_Interrupt
     i1_inserir
     i1_remover
     i1_estaVazia
     i1_estaCheia

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      7      44       5       85.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5A      12        0.0%
ABS                  0      0      51       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       9       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Tue Oct 11 03:43:06 2016

              __CFG_CP$OFF 0000                         l35 01B6                         fsr 0004  
 __end_of_EnvioDadosSerial 009C          ??_TrataComandoESP 0060                        l168 028D  
                      l907 02C8                        l941 00D6                        l861 01A5  
                      l857 01A1                        l865 01AA                        l939 00A6  
                      l859 01A3                        l879 01E8               __CFG_CPD$OFF 0000  
                      _RTC 0020                        fsr0 0004                        indf 0000  
             __CFG_FOSC$HS 0000               __CFG_LVP$OFF 0000                       _TMR0 0001  
             __CFG_WRT$OFF 0000                       _main 0288                       btemp 007E  
            __CFG_BOREN$ON 0000                       start 0012                i1_estaCheia 02E3  
              i1_estaVazia 02EE                      ?_main 0070              __CFG_WDTE$OFF 0000  
                    i1l140 00FE                      i1l141 0108                      i1l139 00F4  
                    i1l987 023C                      _RCREG 001A                      _RCSTA 0018  
                    _SPBRG 0099                      _PORTB 0006                      _PORTD 0008  
               _BufferRead 0029                      _TRISB 0086                      _TRISD 0088  
                    _TXREG 0019                      _TXSTA 0098                      _Setup 0165  
      _TemporizadorSerialR 0026        _TemporizadorSerialW 004F            __end_of_inserir 0219  
                    pclath 000A            __end_of_remover 01EF                      status 0003  
                    wtemp0 007E              ??_Interrupcao 0078            __initialization 026B  
             __end_of_main 02A3         __size_ofi1_inserir 0028         __size_ofi1_remover 002A  
                   ??_main 0061                     ?_Setup 0070           _Serial_9600_Init 0195  
                   i1l1011 0141                     i1l1041 0112                     i1l1019 014F  
                   _INTCON 000B                     _SSPADD 0093                     _TRISC3 043B  
                   _TRISC4 043C              ??_Serial_Read 0060                     _SSPCON 0014  
              _BufferWrite 003C             __CFG_PWRTE$OFF 0000                     _Tensao 0061  
      __end_of_Interrupcao 0124                  ??_inserir 005B               estaCheia@buf 005A  
                   saved_w 007E                  ??_remover 005A  __size_of_Serial_Available 0009  
        __end_ofi1_inserir 026B          __end_ofi1_remover 0243    __end_of__initialization 0284  
          _TrataComandoESP 009C             __pcstackCOMMON 0070              __end_of_Setup 0195  
      __end_of_Serial_Read 02CA               __pidataBANK0 030F          _TemporizadorPortb 0024  
__size_of_Serial_Interrupt 0041          ?_EnvioDadosSerial 0070         ??_EnvioDadosSerial 0060  
                  ??_Setup 005B             i1estaCheia@buf 0070              ?_Serial_Flush 0070  
               __pbssBANK0 0020         __size_of_estaCheia 000D              ?_Serial_Write 0070  
       __size_of_estaVazia 000C               estaVazia@buf 005A                 _clearPORTB 0028  
              _Interrupcao 00E3                 __pmaintext 0288                 __pintentry 0004  
             ?i1_estaCheia 0070               ?i1_estaVazia 0070                    _SSPCON2 0091  
           ??_Serial_Flush 005A                    _SSPSTAT 0094             ??_Serial_Write 005E  
  __end_of_TrataComandoESP 00E3                _Serial_Read 02BA             i1estaVazia@buf 0070  
             i1inserir@buf 0073   __end_of_Serial_9600_Init 01C3          __end_of_estaCheia 02D7  
                  __ptext1 0165                    __ptext2 0195                    __ptext3 009C  
                  __ptext4 0309                    __ptext5 02F8                    __ptext6 02BA  
                  __ptext7 01C3                    __ptext8 02D7                    __ptext9 0015  
        __end_of_estaVazia 02E3                remover@temp 005D                    _inserir 01EF  
        Serial_Write@Valor 005F                    _remover 01C3           _Serial_Available 02F8  
                  clrloop0 0302       end_of_initialization 0284                  _RCSTAbits 0018  
         _Serial_Interrupt 0124               i1remover@buf 0075                  _PORTDbits 0008  
         ?_TrataComandoESP 0070                  _TXSTAbits 0098                  i1_inserir 0243  
                i1_remover 0219   Serial_9600_Init@osc_freq 005A       __end_of_Serial_Flush 030F  
             inserir@Valor 005A       __end_of_Serial_Write 02BA       __size_ofi1_estaCheia 000B  
     __size_ofi1_estaVazia 000A        start_initialization 026B  __size_of_EnvioDadosSerial 0087  
               ?i1_inserir 0070               ?_Interrupcao 0070                 ?i1_remover 0070  
              __pdataBANK0 0061             i1inserir@Valor 0070              __pcstackBANK0 005A  
               inserir@buf 005D               ?_Serial_Read 0070                  __pnvBANK0 004F  
 __end_of_Serial_Available 0301          ?_Serial_9600_Init 0070         ??_Serial_9600_Init 005A  
                _estaCheia 02CA                   ?_inserir 005A                  _estaVazia 02D7  
                 ?_remover 0070             __size_of_Setup 0030              _Temporizador1 0022  
 __end_of_Serial_Interrupt 0165                 remover@buf 005F          interrupt_function 0004  
              ??i1_inserir 0071                  clear_ram0 0301                   _PIE1bits 008C  
              ??i1_remover 0070      __size_of_Serial_Flush 0006                   _PIR1bits 000C  
    __size_of_Serial_Write 0017                 ?_estaCheia 0070                 ?_estaVazia 0070  
             _Serial_Flush 0309               _Serial_Write 02A3           _EnvioDadosSerial 0015  
                 _ModuloCM 0051       __size_of_Interrupcao 0041           __size_of_inserir 002A  
                 __ptext10 02A3                   __ptext11 01EF                   __ptext12 02CA  
                 __ptext13 00E3                   __ptext14 0124                   __ptext15 02E3  
                 __ptext16 02EE                   __ptext17 0219                   __ptext18 0243  
         __size_of_remover 002C              __size_of_main 001B       __size_of_Serial_Read 0010  
 __size_of_TrataComandoESP 0047              ??i1_estaCheia 0070              ??i1_estaVazia 0070  
              ??_estaCheia 005A                 _INTCONbits 000B                ??_estaVazia 005A  
      Serial_Interrupt@tmp 0077                   intlevel1 0000          ?_Serial_Available 0070  
       ??_Serial_Available 005B                 _OPTION_REG 0081        __end_ofi1_estaCheia 02EE  
            i1remover@temp 0073        __end_ofi1_estaVazia 02F8                _SSPCON2bits 0091  
__size_of_Serial_9600_Init 002E          ?_Serial_Interrupt 0070         ??_Serial_Interrupt 0076  
