

Microchip Technology PIC LITE Macro Assembler V1.20 build 52243 
                                                                                               Fri Oct 28 16:27:33 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	intentry,global,class=CODE,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	dabs	1,0x7E,2
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009C                     	;# 
   105  009D                     	;# 
   106  009E                     	;# 
   107  009F                     	;# 
   108  010C                     	;# 
   109  010D                     	;# 
   110  010E                     	;# 
   111  010F                     	;# 
   112  018C                     	;# 
   113  018D                     	;# 
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  0007                     	;# 
   122  0008                     	;# 
   123  0009                     	;# 
   124  000A                     	;# 
   125  000B                     	;# 
   126  000C                     	;# 
   127  000D                     	;# 
   128  000E                     	;# 
   129  000E                     	;# 
   130  000F                     	;# 
   131  0010                     	;# 
   132  0011                     	;# 
   133  0012                     	;# 
   134  0013                     	;# 
   135  0014                     	;# 
   136  0015                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  001D                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0086                     	;# 
   152  0087                     	;# 
   153  0088                     	;# 
   154  0089                     	;# 
   155  008C                     	;# 
   156  008D                     	;# 
   157  008E                     	;# 
   158  0091                     	;# 
   159  0092                     	;# 
   160  0093                     	;# 
   161  0094                     	;# 
   162  0098                     	;# 
   163  0099                     	;# 
   164  009C                     	;# 
   165  009D                     	;# 
   166  009E                     	;# 
   167  009F                     	;# 
   168  010C                     	;# 
   169  010D                     	;# 
   170  010E                     	;# 
   171  010F                     	;# 
   172  018C                     	;# 
   173  018D                     	;# 
   174  0000                     	;# 
   175  0001                     	;# 
   176  0002                     	;# 
   177  0003                     	;# 
   178  0004                     	;# 
   179  0005                     	;# 
   180  0006                     	;# 
   181  0007                     	;# 
   182  0008                     	;# 
   183  0009                     	;# 
   184  000A                     	;# 
   185  000B                     	;# 
   186  000C                     	;# 
   187  000D                     	;# 
   188  000E                     	;# 
   189  000E                     	;# 
   190  000F                     	;# 
   191  0010                     	;# 
   192  0011                     	;# 
   193  0012                     	;# 
   194  0013                     	;# 
   195  0014                     	;# 
   196  0015                     	;# 
   197  0015                     	;# 
   198  0016                     	;# 
   199  0017                     	;# 
   200  0018                     	;# 
   201  0019                     	;# 
   202  001A                     	;# 
   203  001B                     	;# 
   204  001B                     	;# 
   205  001C                     	;# 
   206  001D                     	;# 
   207  001E                     	;# 
   208  001F                     	;# 
   209  0081                     	;# 
   210  0085                     	;# 
   211  0086                     	;# 
   212  0087                     	;# 
   213  0088                     	;# 
   214  0089                     	;# 
   215  008C                     	;# 
   216  008D                     	;# 
   217  008E                     	;# 
   218  0091                     	;# 
   219  0092                     	;# 
   220  0093                     	;# 
   221  0094                     	;# 
   222  0098                     	;# 
   223  0099                     	;# 
   224  009C                     	;# 
   225  009D                     	;# 
   226  009E                     	;# 
   227  009F                     	;# 
   228  010C                     	;# 
   229  010D                     	;# 
   230  010E                     	;# 
   231  010F                     	;# 
   232  018C                     	;# 
   233  018D                     	;# 
   234                           
   235                           	psect	nvBANK1
   236  00E0                     __pnvBANK1:	
   237  00E0                     _TemporizadorSerialW:	
   238  00E0                     	ds	2
   239  00E2                     _ModuloCM:	
   240  00E2                     	ds	9
   241  001F                     _ADCON0	set	31
   242  001F                     _ADCON0bits	set	31
   243  001E                     _ADRESH	set	30
   244  000B                     _INTCON	set	11
   245  000B                     _INTCONbits	set	11
   246  000C                     _PIR1bits	set	12
   247  0006                     _PORTB	set	6
   248  0008                     _PORTD	set	8
   249  0008                     _PORTDbits	set	8
   250  001A                     _RCREG	set	26
   251  0018                     _RCSTA	set	24
   252  0018                     _RCSTAbits	set	24
   253  0014                     _SSPCON	set	20
   254  0001                     _TMR0	set	1
   255  0019                     _TXREG	set	25
   256  009F                     _ADCON1	set	159
   257  009E                     _ADRESL	set	158
   258  0081                     _OPTION_REG	set	129
   259  008C                     _PIE1bits	set	140
   260  0099                     _SPBRG	set	153
   261  0093                     _SSPADD	set	147
   262  0091                     _SSPCON2	set	145
   263  0091                     _SSPCON2bits	set	145
   264  0094                     _SSPSTAT	set	148
   265  0085                     _TRISA	set	133
   266  0086                     _TRISB	set	134
   267  0088                     _TRISD	set	136
   268  0089                     _TRISE	set	137
   269  0098                     _TXSTA	set	152
   270  0098                     _TXSTAbits	set	152
   271  043B                     _TRISC3	set	1083
   272  043C                     _TRISC4	set	1084
   273                           
   274                           ; #config settings
   275  0000                     
   276                           	psect	cinit
   277  0B05                     start_initialization:	
   278  0B05                     __initialization:	
   279                           
   280                           ; Clear objects allocated to COMMON
   281  0B05  01FC               	clrf	__pbssCOMMON& (0+127)
   282                           
   283                           ; Clear objects allocated to BANK0
   284  0B06  01EA               	clrf	__pbssBANK0& (0+127)
   285                           
   286                           ; Clear objects allocated to BANK1
   287  0B07  1383               	bcf	3,7	;select IRP bank0
   288  0B08  30A0               	movlw	low __pbssBANK1
   289  0B09  0084               	movwf	4
   290  0B0A  30CC               	movlw	low (__pbssBANK1+44)
   291  0B0B  120A  118A  27F8   	fcall	clear_ram0
      +       120A  158A         
   292                           
   293                           ; Clear objects allocated to BANK3
   294  0B10  1783               	bsf	3,7	;select IRP bank2
   295  0B11  3090               	movlw	low __pbssBANK3
   296  0B12  0084               	movwf	4
   297  0B13  30A3               	movlw	low (__pbssBANK3+19)
   298  0B14  120A  118A  27F8   	fcall	clear_ram0
   299  0B17                     end_of_initialization:	
   300                           ;End of C runtime variable initialization code
   301                           
   302  0B17                     __end_of__initialization:	
   303  0B17  0183               	clrf	3
   304  0B18  120A  158A  2B8B   	ljmp	_main	;jump to C main() function
   305                           
   306                           	psect	bssCOMMON
   307  007C                     __pbssCOMMON:	
   308  007C                     _ADC_Temporizador:	
   309  007C                     	ds	1
   310                           
   311                           	psect	bssBANK0
   312  006A                     __pbssBANK0:	
   313  006A                     _dadoDisponivel:	
   314  006A                     	ds	1
   315                           
   316                           	psect	bssBANK1
   317  00A0                     __pbssBANK1:	
   318  00A0                     SensoresAnalogicos@somatorio:	
   319  00A0                     	ds	4
   320  00A4                     _Tensao:	
   321  00A4                     	ds	3
   322  00A7                     SensoresAnalogicos@n:	
   323  00A7                     	ds	2
   324  00A9                     _RTC:	
   325  00A9                     	ds	2
   326  00AB                     _TemporizadorLed:	
   327  00AB                     	ds	2
   328  00AD                     _TemporizadorPortb:	
   329  00AD                     	ds	2
   330  00AF                     _TemporizadorSerialR:	
   331  00AF                     	ds	2
   332  00B1                     _errno:	
   333  00B1                     	ds	2
   334  00B3                     ADC_Run@Estado:	
   335  00B3                     	ds	1
   336  00B4                     ControleLed@Estado:	
   337  00B4                     	ds	1
   338  00B5                     SensoresAnalogicos@index:	
   339  00B5                     	ds	1
   340  00B6                     TrataComandoESP@Estado:	
   341  00B6                     	ds	1
   342  00B7                     _clearPORTB:	
   343  00B7                     	ds	1
   344  00B8                     _conectado:	
   345  00B8                     	ds	1
   346  00B9                     _BufferRead:	
   347  00B9                     	ds	19
   348                           
   349                           	psect	bssBANK3
   350  0190                     __pbssBANK3:	
   351  0190                     _BufferWrite:	
   352  0190                     	ds	19
   353                           
   354                           	psect	clrtext
   355  07F8                     clear_ram0:	
   356                           ;	Called with FSR containing the base address, and
   357                           ;	W with the last address+1
   358                           
   359  07F8  0064               	clrwdt	;clear the watchdog before getting into this loop
   360  07F9                     clrloop0:	
   361  07F9  0180               	clrf	0	;clear RAM location pointed to by FSR
   362  07FA  0A84               	incf	4,f	;increment pointer
   363  07FB  0604               	xorwf	4,w	;XOR with final address
   364  07FC  1903               	btfsc	3,2	;have we reached the end yet?
   365  07FD  3400               	retlw	0	;all done for this memory range, return
   366  07FE  0604               	xorwf	4,w	;XOR again to restore value
   367  07FF  2FF9               	goto	clrloop0	;do the next byte
   368                           
   369                           	psect	cstackBANK1
   370  00CC                     __pcstackBANK1:	
   371  00CC                     ??___fttol:	
   372                           
   373                           ; 0 bytes @ 0x0
   374  00CC                     	ds	4
   375  00D0                     ___fttol@sign1:	
   376                           
   377                           ; 1 bytes @ 0x4
   378  00D0                     	ds	1
   379  00D1                     ___fttol@lval:	
   380                           
   381                           ; 4 bytes @ 0x5
   382  00D1                     	ds	4
   383  00D5                     ___fttol@exp1:	
   384                           
   385                           ; 1 bytes @ 0x9
   386  00D5                     	ds	1
   387  00D6                     ??_SensoresAnalogicos:	
   388                           
   389                           ; 0 bytes @ 0xA
   390  00D6                     	ds	4
   391  00DA                     SensoresAnalogicos@valorAtual:	
   392                           
   393                           ; 2 bytes @ 0xE
   394  00DA                     	ds	2
   395  00DC                     SensoresAnalogicos@valorAux:	
   396                           
   397                           ; 4 bytes @ 0x10
   398  00DC                     	ds	4
   399                           
   400                           	psect	cstackCOMMON
   401  0070                     __pcstackCOMMON:	
   402  0070                     ?_Serial_9600_Init:	
   403  0070                     ?_Serial_Interrupt:	
   404                           ; 0 bytes @ 0x0
   405                           
   406  0070                     ?_Serial_Write:	
   407                           ; 0 bytes @ 0x0
   408                           
   409  0070                     ?_ADC_Interrupt:	
   410                           ; 0 bytes @ 0x0
   411                           
   412  0070                     ??_ADC_Interrupt:	
   413                           ; 0 bytes @ 0x0
   414                           
   415  0070                     ?_ADC_Run:	
   416                           ; 0 bytes @ 0x0
   417                           
   418  0070                     ?_ADC_Select_Channel:	
   419                           ; 0 bytes @ 0x0
   420                           
   421  0070                     ?_Interrupcao:	
   422                           ; 0 bytes @ 0x0
   423                           
   424  0070                     ?_EnvioDadosSerial:	
   425                           ; 0 bytes @ 0x0
   426                           
   427  0070                     ?_TrataComandoESP:	
   428                           ; 0 bytes @ 0x0
   429                           
   430  0070                     ?_ControleLed:	
   431                           ; 0 bytes @ 0x0
   432                           
   433  0070                     ?_SensoresAnalogicos:	
   434                           ; 0 bytes @ 0x0
   435                           
   436  0070                     ?_Setup:	
   437                           ; 0 bytes @ 0x0
   438                           
   439  0070                     ?i1_inserir:	
   440                           ; 0 bytes @ 0x0
   441                           
   442  0070                     ?_Serial_Read:	
   443                           ; 0 bytes @ 0x0
   444                           
   445  0070                     ?_Serial_Available:	
   446                           ; 1 bytes @ 0x0
   447                           
   448  0070                     ?_ADC_Available:	
   449                           ; 1 bytes @ 0x0
   450                           
   451  0070                     ?i1_remover:	
   452                           ; 1 bytes @ 0x0
   453                           
   454  0070                     ?i1_estaVazia:	
   455                           ; 1 bytes @ 0x0
   456                           
   457  0070                     ?i1_estaCheia:	
   458                           ; 1 bytes @ 0x0
   459                           
   460  0070                     ?_main:	
   461                           ; 1 bytes @ 0x0
   462                           
   463  0070                     i1inserir@buf:	
   464                           ; 2 bytes @ 0x0
   465                           
   466  0070                     i1remover@buf:	
   467                           ; 2 bytes @ 0x0
   468                           
   469  0070                     i1estaVazia@buf:	
   470                           ; 2 bytes @ 0x0
   471                           
   472  0070                     i1estaCheia@buf:	
   473                           ; 2 bytes @ 0x0
   474                           
   475                           
   476                           ; 2 bytes @ 0x0
   477  0070                     	ds	2
   478  0072                     ??i1_remover:	
   479  0072                     ??i1_estaVazia:	
   480                           ; 0 bytes @ 0x2
   481                           
   482  0072                     ??i1_estaCheia:	
   483                           ; 0 bytes @ 0x2
   484                           
   485  0072                     i1inserir@Valor:	
   486                           ; 0 bytes @ 0x2
   487                           
   488                           
   489                           ; 1 bytes @ 0x2
   490  0072                     	ds	1
   491  0073                     ??i1_inserir:	
   492                           
   493                           ; 0 bytes @ 0x3
   494  0073                     	ds	5
   495  0078                     i1remover@temp:	
   496                           
   497                           ; 2 bytes @ 0x8
   498  0078                     	ds	2
   499  007A                     ??_Serial_Interrupt:	
   500                           
   501                           ; 0 bytes @ 0xA
   502  007A                     	ds	1
   503  007B                     Serial_Interrupt@tmp:	
   504                           
   505                           ; 1 bytes @ 0xB
   506  007B                     	ds	1
   507                           
   508                           	psect	cstackBANK0
   509  0020                     __pcstackBANK0:	
   510  0020                     ??_Interrupcao:	
   511                           
   512                           ; 0 bytes @ 0x0
   513  0020                     	ds	5
   514  0025                     ?_inserir:	
   515  0025                     ??_Serial_9600_Init:	
   516                           ; 0 bytes @ 0x5
   517                           
   518  0025                     ?_ADC_Init:	
   519                           ; 0 bytes @ 0x5
   520                           
   521  0025                     ??_ADC_Run:	
   522                           ; 0 bytes @ 0x5
   523                           
   524  0025                     ??_ADC_Select_Channel:	
   525                           ; 0 bytes @ 0x5
   526                           
   527  0025                     ??_ADC_Available:	
   528                           ; 0 bytes @ 0x5
   529                           
   530  0025                     ??_ControleLed:	
   531                           ; 0 bytes @ 0x5
   532                           
   533  0025                     ?___ftge:	
   534                           ; 0 bytes @ 0x5
   535                           
   536  0025                     ?_estaVazia:	
   537                           ; 1 bit 
   538                           
   539  0025                     ?_remover:	
   540                           ; 1 bytes @ 0x5
   541                           
   542  0025                     ?_estaCheia:	
   543                           ; 1 bytes @ 0x5
   544                           
   545  0025                     ?_ADC_Read:	
   546                           ; 1 bytes @ 0x5
   547                           
   548  0025                     ?___awmod:	
   549                           ; 2 bytes @ 0x5
   550                           
   551  0025                     ?___ftpack:	
   552                           ; 2 bytes @ 0x5
   553                           
   554  0025                     ?___aldiv:	
   555                           ; 3 bytes @ 0x5
   556                           
   557  0025                     ?___lmul:	
   558                           ; 4 bytes @ 0x5
   559                           
   560  0025                     Serial_9600_Init@osc_freq:	
   561                           ; 4 bytes @ 0x5
   562                           
   563  0025                     ADC_Init@config:	
   564                           ; 1 bytes @ 0x5
   565                           
   566  0025                     inserir@buf:	
   567                           ; 1 bytes @ 0x5
   568                           
   569  0025                     remover@buf:	
   570                           ; 2 bytes @ 0x5
   571                           
   572  0025                     estaVazia@buf:	
   573                           ; 2 bytes @ 0x5
   574                           
   575  0025                     estaCheia@buf:	
   576                           ; 2 bytes @ 0x5
   577                           
   578  0025                     ___awmod@divisor:	
   579                           ; 2 bytes @ 0x5
   580                           
   581  0025                     ___ftpack@arg:	
   582                           ; 2 bytes @ 0x5
   583                           
   584  0025                     ___ftge@ff1:	
   585                           ; 3 bytes @ 0x5
   586                           
   587  0025                     ___aldiv@divisor:	
   588                           ; 3 bytes @ 0x5
   589                           
   590  0025                     ___lmul@multiplier:	
   591                           ; 4 bytes @ 0x5
   592                           
   593                           
   594                           ; 4 bytes @ 0x5
   595  0025                     	ds	1
   596  0026                     ??_ADC_Init:	
   597                           
   598                           ; 0 bytes @ 0x6
   599  0026                     	ds	1
   600  0027                     ??_estaVazia:	
   601  0027                     ??_remover:	
   602                           ; 0 bytes @ 0x7
   603                           
   604  0027                     ??_estaCheia:	
   605                           ; 0 bytes @ 0x7
   606                           
   607  0027                     ??_ADC_Read:	
   608                           ; 0 bytes @ 0x7
   609                           
   610  0027                     inserir@Valor:	
   611                           ; 0 bytes @ 0x7
   612                           
   613  0027                     ADC_Init@trisa:	
   614                           ; 1 bytes @ 0x7
   615                           
   616  0027                     ADC_Select_Channel@ch:	
   617                           ; 1 bytes @ 0x7
   618                           
   619  0027                     ___awmod@dividend:	
   620                           ; 1 bytes @ 0x7
   621                           
   622                           
   623                           ; 2 bytes @ 0x7
   624  0027                     	ds	1
   625  0028                     ??_inserir:	
   626  0028                     ??_Setup:	
   627                           ; 0 bytes @ 0x8
   628                           
   629  0028                     ___ftpack@exp:	
   630                           ; 0 bytes @ 0x8
   631                           
   632  0028                     ___ftge@ff2:	
   633                           ; 1 bytes @ 0x8
   634                           
   635                           
   636                           ; 3 bytes @ 0x8
   637  0028                     	ds	1
   638  0029                     ??_Serial_Available:	
   639  0029                     ??___awmod:	
   640                           ; 0 bytes @ 0x9
   641                           
   642  0029                     ___ftpack@sign:	
   643                           ; 0 bytes @ 0x9
   644                           
   645  0029                     ___aldiv@dividend:	
   646                           ; 1 bytes @ 0x9
   647                           
   648  0029                     ___lmul@multiplicand:	
   649                           ; 4 bytes @ 0x9
   650                           
   651                           
   652                           ; 4 bytes @ 0x9
   653  0029                     	ds	1
   654  002A                     ??___ftpack:	
   655  002A                     ___awmod@counter:	
   656                           ; 0 bytes @ 0xA
   657                           
   658                           
   659                           ; 1 bytes @ 0xA
   660  002A                     	ds	1
   661  002B                     ??___ftge:	
   662  002B                     ___awmod@sign:	
   663                           ; 0 bytes @ 0xB
   664                           
   665                           
   666                           ; 1 bytes @ 0xB
   667  002B                     	ds	2
   668  002D                     ??_Serial_Write:	
   669  002D                     ??___aldiv:	
   670                           ; 0 bytes @ 0xD
   671                           
   672  002D                     ??___lmul:	
   673                           ; 0 bytes @ 0xD
   674                           
   675  002D                     ?___ftadd:	
   676                           ; 0 bytes @ 0xD
   677                           
   678  002D                     ?___ftmul:	
   679                           ; 3 bytes @ 0xD
   680                           
   681  002D                     remover@temp:	
   682                           ; 3 bytes @ 0xD
   683                           
   684  002D                     ___ftadd@f1:	
   685                           ; 2 bytes @ 0xD
   686                           
   687  002D                     ___ftmul@f1:	
   688                           ; 3 bytes @ 0xD
   689                           
   690                           
   691                           ; 3 bytes @ 0xD
   692  002D                     	ds	1
   693  002E                     Serial_Write@Valor:	
   694  002E                     ___aldiv@counter:	
   695                           ; 1 bytes @ 0xE
   696                           
   697  002E                     ___lmul@product:	
   698                           ; 1 bytes @ 0xE
   699                           
   700                           
   701                           ; 4 bytes @ 0xE
   702  002E                     	ds	1
   703  002F                     ??_Serial_Read:	
   704  002F                     ??_EnvioDadosSerial:	
   705                           ; 0 bytes @ 0xF
   706                           
   707  002F                     ??_TrataComandoESP:	
   708                           ; 0 bytes @ 0xF
   709                           
   710  002F                     ___aldiv@sign:	
   711                           ; 0 bytes @ 0xF
   712                           
   713                           
   714                           ; 1 bytes @ 0xF
   715  002F                     	ds	1
   716  0030                     TrataComandoESP@cmd:	
   717  0030                     ___ftadd@f2:	
   718                           ; 1 bytes @ 0x10
   719                           
   720  0030                     ___ftmul@f2:	
   721                           ; 3 bytes @ 0x10
   722                           
   723  0030                     ___aldiv@quotient:	
   724                           ; 3 bytes @ 0x10
   725                           
   726                           
   727                           ; 4 bytes @ 0x10
   728  0030                     	ds	3
   729  0033                     ??___ftadd:	
   730  0033                     ??___ftmul:	
   731                           ; 0 bytes @ 0x13
   732                           
   733                           
   734                           ; 0 bytes @ 0x13
   735  0033                     	ds	1
   736  0034                     ?___altoft:	
   737  0034                     ___altoft@c:	
   738                           ; 3 bytes @ 0x14
   739                           
   740                           
   741                           ; 4 bytes @ 0x14
   742  0034                     	ds	3
   743  0037                     ___ftadd@sign:	
   744  0037                     ___ftmul@exp:	
   745                           ; 1 bytes @ 0x17
   746                           
   747                           
   748                           ; 1 bytes @ 0x17
   749  0037                     	ds	1
   750  0038                     ??___altoft:	
   751  0038                     ___ftadd@exp2:	
   752                           ; 0 bytes @ 0x18
   753                           
   754  0038                     ___ftmul@f3_as_product:	
   755                           ; 1 bytes @ 0x18
   756                           
   757                           
   758                           ; 3 bytes @ 0x18
   759  0038                     	ds	1
   760  0039                     ___ftadd@exp1:	
   761                           
   762                           ; 1 bytes @ 0x19
   763  0039                     	ds	1
   764  003A                     ?___ftsub:	
   765  003A                     ___altoft@exp:	
   766                           ; 3 bytes @ 0x1A
   767                           
   768  003A                     ___ftsub@f2:	
   769                           ; 1 bytes @ 0x1A
   770                           
   771                           
   772                           ; 3 bytes @ 0x1A
   773  003A                     	ds	1
   774  003B                     ___altoft@sign:	
   775  003B                     ___ftmul@cntr:	
   776                           ; 1 bytes @ 0x1B
   777                           
   778                           
   779                           ; 1 bytes @ 0x1B
   780  003B                     	ds	1
   781  003C                     ___ftmul@sign:	
   782                           
   783                           ; 1 bytes @ 0x1C
   784  003C                     	ds	1
   785  003D                     ___ftsub@f1:	
   786                           
   787                           ; 3 bytes @ 0x1D
   788  003D                     	ds	3
   789  0040                     ??___ftsub:	
   790  0040                     ?_sqrt:	
   791                           ; 0 bytes @ 0x20
   792                           
   793  0040                     sqrt@y:	
   794                           ; 3 bytes @ 0x20
   795                           
   796                           
   797                           ; 3 bytes @ 0x20
   798  0040                     	ds	3
   799  0043                     ??_sqrt:	
   800                           
   801                           ; 0 bytes @ 0x23
   802  0043                     	ds	6
   803  0049                     sqrt@og:	
   804                           
   805                           ; 3 bytes @ 0x29
   806  0049                     	ds	3
   807  004C                     sqrt@z:	
   808                           
   809                           ; 3 bytes @ 0x2C
   810  004C                     	ds	3
   811  004F                     sqrt@i:	
   812                           
   813                           ; 1 bytes @ 0x2F
   814  004F                     	ds	1
   815  0050                     sqrt@q:	
   816                           
   817                           ; 3 bytes @ 0x30
   818  0050                     	ds	3
   819  0053                     sqrt@x:	
   820                           
   821                           ; 3 bytes @ 0x33
   822  0053                     	ds	3
   823  0056                     ?___ftdiv:	
   824  0056                     ___ftdiv@f2:	
   825                           ; 3 bytes @ 0x36
   826                           
   827                           
   828                           ; 3 bytes @ 0x36
   829  0056                     	ds	3
   830  0059                     ___ftdiv@f1:	
   831                           
   832                           ; 3 bytes @ 0x39
   833  0059                     	ds	3
   834  005C                     ??___ftdiv:	
   835                           
   836                           ; 0 bytes @ 0x3C
   837  005C                     	ds	4
   838  0060                     ___ftdiv@cntr:	
   839                           
   840                           ; 1 bytes @ 0x40
   841  0060                     	ds	1
   842  0061                     ___ftdiv@f3:	
   843                           
   844                           ; 3 bytes @ 0x41
   845  0061                     	ds	3
   846  0064                     ___ftdiv@exp:	
   847                           
   848                           ; 1 bytes @ 0x44
   849  0064                     	ds	1
   850  0065                     ___ftdiv@sign:	
   851                           
   852                           ; 1 bytes @ 0x45
   853  0065                     	ds	1
   854  0066                     ?___fttol:	
   855  0066                     ___fttol@f1:	
   856                           ; 4 bytes @ 0x46
   857                           
   858                           
   859                           ; 3 bytes @ 0x46
   860  0066                     	ds	4
   861  006A                     ??_main:	
   862                           
   863                           	psect	maintext
   864  0B8B                     __pmaintext:	
   865                           ; 0 bytes @ 0x4A
   866 ;;
   867 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   868 ;;
   869 ;; *************** function _main *****************
   870 ;; Defined at:
   871 ;;		line 271 in file "TCC_Main.c"
   872 ;; Parameters:    Size  Location     Type
   873 ;;		None
   874 ;; Auto vars:     Size  Location     Type
   875 ;;		None
   876 ;; Return value:  Size  Location     Type
   877 ;;                  2  278[COMMON] int 
   878 ;; Registers used:
   879 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   880 ;; Tracked objects:
   881 ;;		On entry : 17F/0
   882 ;;		On exit  : 0/0
   883 ;;		Unchanged: 0/0
   884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   885 ;;      Params:         0       0       0       0       0
   886 ;;      Locals:         0       0       0       0       0
   887 ;;      Temps:          0       0       0       0       0
   888 ;;      Totals:         0       0       0       0       0
   889 ;;Total ram usage:        0 bytes
   890 ;; Hardware stack levels required when called:    8
   891 ;; This function calls:
   892 ;;		_ADC_Run
   893 ;;		_EnvioDadosSerial
   894 ;;		_TrataComandoESP
   895 ;;		_ControleLed
   896 ;;		_SensoresAnalogicos
   897 ;;		_Setup
   898 ;; This function is called by:
   899 ;;		Startup code after reset
   900 ;; This function uses a non-reentrant model
   901 ;;
   902                           
   903                           
   904                           ;psect for function _main
   905  0B8B                     _main:	
   906                           
   907                           ;TCC_Main.c: 272: Setup();
   908                           
   909                           ;incstack = 0
   910                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   911  0B8B  120A  158A  23CA   	fcall	_Setup
      +       120A  158A         
   912  0B90                     l279:	
   913                           ;TCC_Main.c: 274: while(1)
   914                           
   915                           
   916                           ;TCC_Main.c: 275: {
   917                           ;TCC_Main.c: 276: ControleLed();
   918  0B90  120A  158A  2570   	fcall	_ControleLed
      +       120A  158A         
   919                           
   920                           ;TCC_Main.c: 277: EnvioDadosSerial();
   921  0B95  120A  118A  26C6   	fcall	_EnvioDadosSerial
      +       120A  158A         
   922                           
   923                           ;TCC_Main.c: 278: TrataComandoESP();
   924  0B9A  120A  118A  2755   	fcall	_TrataComandoESP
      +       120A  158A         
   925                           
   926                           ;TCC_Main.c: 279: ADC_Run();
   927  0B9F  120A  158A  2351   	fcall	_ADC_Run
      +       120A  158A         
   928                           
   929                           ;TCC_Main.c: 280: SensoresAnalogicos();
   930  0BA4  120A  118A  2015   	fcall	_SensoresAnalogicos
      +       120A  158A         
   931  0BA9  2B90               	goto	l279
   932  0BAA                     __end_of_main:	
   933                           
   934                           	psect	text1
   935  0BCA                     __ptext1:	
   936 ;; *************** function _Setup *****************
   937 ;; Defined at:
   938 ;;		line 245 in file "TCC_Main.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;		None
   941 ;; Auto vars:     Size  Location     Type
   942 ;;		None
   943 ;; Return value:  Size  Location     Type
   944 ;;		None               void
   945 ;; Registers used:
   946 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   947 ;; Tracked objects:
   948 ;;		On entry : 0/0
   949 ;;		On exit  : 0/0
   950 ;;		Unchanged: 0/0
   951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   952 ;;      Params:         0       0       0       0       0
   953 ;;      Locals:         0       0       0       0       0
   954 ;;      Temps:          0       1       0       0       0
   955 ;;      Totals:         0       1       0       0       0
   956 ;;Total ram usage:        1 bytes
   957 ;; Hardware stack levels used:    1
   958 ;; Hardware stack levels required when called:    4
   959 ;; This function calls:
   960 ;;		_Serial_9600_Init
   961 ;;		_ADC_Init
   962 ;;		_ADC_Select_Channel
   963 ;; This function is called by:
   964 ;;		_main
   965 ;; This function uses a non-reentrant model
   966 ;;
   967                           
   968                           
   969                           ;psect for function _Setup
   970  0BCA                     _Setup:	
   971                           
   972                           ;TCC_Main.c: 246: TRISB = 0;
   973                           
   974                           ;incstack = 0
   975                           ; Regs used in _Setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   976  0BCA  1683               	bsf	3,5	;RP0=1, select bank1
   977  0BCB  1303               	bcf	3,6	;RP1=0, select bank1
   978  0BCC  0186               	clrf	6	;volatile
   979                           
   980                           ;TCC_Main.c: 247: PORTB = 0;
   981  0BCD  1283               	bcf	3,5	;RP0=0, select bank0
   982  0BCE  1303               	bcf	3,6	;RP1=0, select bank0
   983  0BCF  0186               	clrf	6	;volatile
   984                           
   985                           ;TCC_Main.c: 248: TRISD = 0;
   986  0BD0  1683               	bsf	3,5	;RP0=1, select bank1
   987  0BD1  1303               	bcf	3,6	;RP1=0, select bank1
   988  0BD2  0188               	clrf	8	;volatile
   989                           
   990                           ;TCC_Main.c: 249: PORTD = 0;
   991  0BD3  1283               	bcf	3,5	;RP0=0, select bank0
   992  0BD4  1303               	bcf	3,6	;RP1=0, select bank0
   993  0BD5  0188               	clrf	8	;volatile
   994                           
   995                           ;TCC_Main.c: 251: OPTION_REG = 0b00000000;
   996  0BD6  1683               	bsf	3,5	;RP0=1, select bank1
   997  0BD7  1303               	bcf	3,6	;RP1=0, select bank1
   998  0BD8  0181               	clrf	1	;volatile
   999                           
  1000                           ;TCC_Main.c: 252: TMR0 = 130;
  1001  0BD9  3082               	movlw	130
  1002  0BDA  1283               	bcf	3,5	;RP0=0, select bank0
  1003  0BDB  1303               	bcf	3,6	;RP1=0, select bank0
  1004  0BDC  0081               	movwf	1	;volatile
  1005                           
  1006                           ;TCC_Main.c: 253: INTCON = 0b11100000;
  1007  0BDD  30E0               	movlw	224
  1008  0BDE  008B               	movwf	11	;volatile
  1009                           
  1010                           ;TCC_Main.c: 255: Serial_9600_Init(10);
  1011  0BDF  300A               	movlw	10
  1012  0BE0  120A  118A  27C6   	fcall	_Serial_9600_Init
      +       120A  158A         
  1013                           
  1014                           ;TCC_Main.c: 256: ADC_Init(0xFF, 0x00);
  1015  0BE5  1283               	bcf	3,5	;RP0=0, select bank0
  1016  0BE6  1303               	bcf	3,6	;RP1=0, select bank0
  1017  0BE7  01A5               	clrf	?_ADC_Init
  1018  0BE8  30FF               	movlw	255
  1019  0BE9  120A  158A  23AA   	fcall	_ADC_Init
      +       120A  158A         
  1020                           
  1021                           ;TCC_Main.c: 257: ADC_Select_Channel(0);
  1022  0BEE  3000               	movlw	0
  1023  0BEF  120A  158A  22F0   	fcall	_ADC_Select_Channel
  1024                           
  1025                           ;TCC_Main.c: 261: ModuloCM.status = 0b00000011;
  1026  0BF2  3003               	movlw	3
  1027  0BF3  1283               	bcf	3,5	;RP0=0, select bank0
  1028  0BF4  1303               	bcf	3,6	;RP1=0, select bank0
  1029  0BF5  00A8               	movwf	??_Setup
  1030  0BF6  0828               	movf	??_Setup,w
  1031  0BF7  1683               	bsf	3,5	;RP0=1, select bank1
  1032  0BF8  1303               	bcf	3,6	;RP1=0, select bank1
  1033  0BF9  00E2               	movwf	_ModuloCM^(0+128)
  1034                           
  1035                           ;TCC_Main.c: 262: ModuloCM.corrente[0] = 0;
  1036  0BFA  01E3               	clrf	(_ModuloCM^(0+128)+1)
  1037  0BFB  01E4               	clrf	((_ModuloCM+1)^(0+128)+1)
  1038                           
  1039                           ;TCC_Main.c: 263: ModuloCM.corrente[1] = 0;
  1040  0BFC  01E5               	clrf	(_ModuloCM^(0+128)+3)
  1041  0BFD  01E6               	clrf	((_ModuloCM+1)^(0+128)+3)
  1042                           
  1043                           ;TCC_Main.c: 264: ModuloCM.corrente[2] = 0;
  1044  0BFE  01E7               	clrf	(_ModuloCM^(0+128)+5)
  1045  0BFF  01E8               	clrf	((_ModuloCM+1)^(0+128)+5)
  1046                           
  1047                           ;TCC_Main.c: 265: ModuloCM.corrente[3] = 0;
  1048  0C00  01E9               	clrf	(_ModuloCM^(0+128)+7)
  1049  0C01  01EA               	clrf	((_ModuloCM+1)^(0+128)+7)
  1050                           
  1051                           ;TCC_Main.c: 267: TemporizadorSerialW = 20000;
  1052  0C02  3020               	movlw	32
  1053  0C03  00E0               	movwf	_TemporizadorSerialW^(0+128)
  1054  0C04  304E               	movlw	78
  1055  0C05  00E1               	movwf	(_TemporizadorSerialW^(0+128)+1)
  1056  0C06  0008               	return
  1057  0C07                     __end_of_Setup:	
  1058                           
  1059                           	psect	text2
  1060  0BAA                     __ptext2:	
  1061 ;; *************** function _ADC_Init *****************
  1062 ;; Defined at:
  1063 ;;		line 23 in file "ConversorAD.c"
  1064 ;; Parameters:    Size  Location     Type
  1065 ;;  trisa           1    wreg     unsigned char 
  1066 ;;  config          1    5[BANK0 ] unsigned char 
  1067 ;; Auto vars:     Size  Location     Type
  1068 ;;  trisa           1    7[BANK0 ] unsigned char 
  1069 ;; Return value:  Size  Location     Type
  1070 ;;		None               void
  1071 ;; Registers used:
  1072 ;;		wreg, status,2, status,0
  1073 ;; Tracked objects:
  1074 ;;		On entry : 0/0
  1075 ;;		On exit  : 0/0
  1076 ;;		Unchanged: 0/0
  1077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1078 ;;      Params:         0       1       0       0       0
  1079 ;;      Locals:         0       1       0       0       0
  1080 ;;      Temps:          0       1       0       0       0
  1081 ;;      Totals:         0       3       0       0       0
  1082 ;;Total ram usage:        3 bytes
  1083 ;; Hardware stack levels used:    1
  1084 ;; Hardware stack levels required when called:    3
  1085 ;; This function calls:
  1086 ;;		Nothing
  1087 ;; This function is called by:
  1088 ;;		_Setup
  1089 ;; This function uses a non-reentrant model
  1090 ;;
  1091                           
  1092                           
  1093                           ;psect for function _ADC_Init
  1094  0BAA                     _ADC_Init:	
  1095                           
  1096                           ;incstack = 0
  1097                           ; Regs used in _ADC_Init: [wreg+status,2+status,0]
  1098                           ;ADC_Init@trisa stored from wreg
  1099  0BAA  1283               	bcf	3,5	;RP0=0, select bank0
  1100  0BAB  1303               	bcf	3,6	;RP1=0, select bank0
  1101  0BAC  00A7               	movwf	ADC_Init@trisa
  1102                           
  1103                           ;ConversorAD.c: 24: TRISA = trisa;
  1104  0BAD  0827               	movf	ADC_Init@trisa,w
  1105  0BAE  1683               	bsf	3,5	;RP0=1, select bank1
  1106  0BAF  1303               	bcf	3,6	;RP1=0, select bank1
  1107  0BB0  0085               	movwf	5	;volatile
  1108                           
  1109                           ;ConversorAD.c: 25: TRISE = 0b00000111;
  1110  0BB1  3007               	movlw	7
  1111  0BB2  0089               	movwf	9	;volatile
  1112                           
  1113                           ;ConversorAD.c: 26: ADCON0 = 0b10000001;
  1114  0BB3  3081               	movlw	129
  1115  0BB4  1283               	bcf	3,5	;RP0=0, select bank0
  1116  0BB5  1303               	bcf	3,6	;RP1=0, select bank0
  1117  0BB6  009F               	movwf	31	;volatile
  1118                           
  1119                           ;ConversorAD.c: 27: ADCON1 = 0b10000000;
  1120  0BB7  3080               	movlw	128
  1121  0BB8  1683               	bsf	3,5	;RP0=1, select bank1
  1122  0BB9  1303               	bcf	3,6	;RP1=0, select bank1
  1123  0BBA  009F               	movwf	31	;volatile
  1124                           
  1125                           ;ConversorAD.c: 28: ADCON1 |= config;
  1126  0BBB  1283               	bcf	3,5	;RP0=0, select bank0
  1127  0BBC  1303               	bcf	3,6	;RP1=0, select bank0
  1128  0BBD  0825               	movf	ADC_Init@config,w
  1129  0BBE  00A6               	movwf	??_ADC_Init
  1130  0BBF  0826               	movf	??_ADC_Init,w
  1131  0BC0  1683               	bsf	3,5	;RP0=1, select bank1
  1132  0BC1  1303               	bcf	3,6	;RP1=0, select bank1
  1133  0BC2  049F               	iorwf	31,f	;volatile
  1134                           
  1135                           ;ConversorAD.c: 30: PIR1bits.ADIF = 0;
  1136  0BC3  1283               	bcf	3,5	;RP0=0, select bank0
  1137  0BC4  1303               	bcf	3,6	;RP1=0, select bank0
  1138  0BC5  130C               	bcf	12,6	;volatile
  1139                           
  1140                           ;ConversorAD.c: 31: PIE1bits.ADIE = 1;
  1141  0BC6  1683               	bsf	3,5	;RP0=1, select bank1
  1142  0BC7  1303               	bcf	3,6	;RP1=0, select bank1
  1143  0BC8  170C               	bsf	12,6	;volatile
  1144  0BC9  0008               	return
  1145  0BCA                     __end_of_ADC_Init:	
  1146                           
  1147                           	psect	text3
  1148  07C6                     __ptext3:	
  1149 ;; *************** function _Serial_9600_Init *****************
  1150 ;; Defined at:
  1151 ;;		line 7 in file "Serial.c"
  1152 ;; Parameters:    Size  Location     Type
  1153 ;;  osc_freq        1    wreg     unsigned char 
  1154 ;; Auto vars:     Size  Location     Type
  1155 ;;  osc_freq        1    5[BANK0 ] unsigned char 
  1156 ;; Return value:  Size  Location     Type
  1157 ;;		None               void
  1158 ;; Registers used:
  1159 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1160 ;; Tracked objects:
  1161 ;;		On entry : 0/0
  1162 ;;		On exit  : 0/0
  1163 ;;		Unchanged: 0/0
  1164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1165 ;;      Params:         0       0       0       0       0
  1166 ;;      Locals:         0       1       0       0       0
  1167 ;;      Temps:          0       0       0       0       0
  1168 ;;      Totals:         0       1       0       0       0
  1169 ;;Total ram usage:        1 bytes
  1170 ;; Hardware stack levels used:    1
  1171 ;; Hardware stack levels required when called:    3
  1172 ;; This function calls:
  1173 ;;		Nothing
  1174 ;; This function is called by:
  1175 ;;		_Setup
  1176 ;; This function uses a non-reentrant model
  1177 ;;
  1178                           
  1179                           
  1180                           ;psect for function _Serial_9600_Init
  1181  07C6                     _Serial_9600_Init:	
  1182                           
  1183                           ;incstack = 0
  1184                           ; Regs used in _Serial_9600_Init: [wreg-fsr0h+status,2+status,0]
  1185                           ;Serial_9600_Init@osc_freq stored from wreg
  1186  07C6  1283               	bcf	3,5	;RP0=0, select bank0
  1187  07C7  1303               	bcf	3,6	;RP1=0, select bank0
  1188  07C8  00A5               	movwf	Serial_9600_Init@osc_freq
  1189                           
  1190                           ;Serial.c: 8: TXSTA = 0b00100100;
  1191  07C9  3024               	movlw	36
  1192  07CA  1683               	bsf	3,5	;RP0=1, select bank1
  1193  07CB  1303               	bcf	3,6	;RP1=0, select bank1
  1194  07CC  0098               	movwf	24	;volatile
  1195                           
  1196                           ;Serial.c: 9: RCSTA = 0b10010000;
  1197  07CD  3090               	movlw	144
  1198  07CE  1283               	bcf	3,5	;RP0=0, select bank0
  1199  07CF  1303               	bcf	3,6	;RP1=0, select bank0
  1200  07D0  0098               	movwf	24	;volatile
  1201                           
  1202                           ;Serial.c: 10: switch(osc_freq)
  1203  07D1  2FDB               	goto	l1820
  1204  07D2                     l1812:	
  1205                           ;Serial.c: 11: {
  1206                           ;Serial.c: 12: case 10:
  1207                           
  1208                           
  1209                           ;Serial.c: 13: SPBRG = 64;
  1210  07D2  3040               	movlw	64
  1211  07D3  2FD7               	goto	L2
  1212  07D4                     l1814:	
  1213                           ;Serial.c: 15: case 16:
  1214                           
  1215                           ;Serial.c: 14: break;
  1216                           
  1217                           
  1218                           ;Serial.c: 16: SPBRG = 103;
  1219  07D4  3067               	movlw	103
  1220  07D5  2FD7               	goto	L2
  1221  07D6                     l1816:	
  1222                           ;Serial.c: 18: case 20:
  1223                           
  1224                           ;Serial.c: 17: break;
  1225                           
  1226                           
  1227                           ;Serial.c: 19: SPBRG = 129;
  1228  07D6  3081               	movlw	129
  1229  07D7                     L2:	
  1230  07D7  1683               	bsf	3,5	;RP0=1, select bank1
  1231  07D8  1303               	bcf	3,6	;RP1=0, select bank1
  1232  07D9  0099               	movwf	25	;volatile
  1233                           
  1234                           ;Serial.c: 21: }
  1235                           
  1236                           ;Serial.c: 20: break;
  1237  07DA  2FE7               	goto	l35
  1238  07DB                     l1820:	
  1239  07DB  1283               	bcf	3,5	;RP0=0, select bank0
  1240  07DC  0825               	movf	Serial_9600_Init@osc_freq,w
  1241                           
  1242                           ; Switch size 1, requested type "space"
  1243                           ; Number of cases is 3, Range of values is 10 to 20
  1244                           ; switch strategies available:
  1245                           ; Name         Instructions Cycles
  1246                           ; simple_byte           10     6 (average)
  1247                           ; direct_byte           44    11 (fixed)
  1248                           ; jumptable            263     9 (fixed)
  1249                           ;	Chosen strategy is simple_byte
  1250  07DD  3A0A               	xorlw	10	; case 10
  1251  07DE  1903               	skipnz
  1252  07DF  2FD2               	goto	l1812
  1253  07E0  3A1A               	xorlw	26	; case 16
  1254  07E1  1903               	skipnz
  1255  07E2  2FD4               	goto	l1814
  1256  07E3  3A04               	xorlw	4	; case 20
  1257  07E4  1903               	skipnz
  1258  07E5  2FD6               	goto	l1816
  1259  07E6  2FE7               	goto	l35
  1260  07E7                     l35:	
  1261                           
  1262                           ;Serial.c: 23: PIE1bits.RCIE = 1;
  1263  07E7  1683               	bsf	3,5	;RP0=1, select bank1
  1264  07E8  1303               	bcf	3,6	;RP1=0, select bank1
  1265  07E9  168C               	bsf	12,5	;volatile
  1266                           
  1267                           ;Serial.c: 25: BufferWrite.primeiro = 0;
  1268  07EA  1683               	bsf	3,5	;RP0=1, select bank3
  1269  07EB  1703               	bsf	3,6	;RP1=1, select bank3
  1270  07EC  01A0               	clrf	(_BufferWrite^(0+384)+16)
  1271                           
  1272                           ;Serial.c: 26: BufferWrite.ultimo = 0;
  1273  07ED  01A1               	clrf	(_BufferWrite^(0+384)+17)
  1274                           
  1275                           ;Serial.c: 27: BufferWrite.nItens = 0;
  1276  07EE  01A2               	clrf	(_BufferWrite^(0+384)+18)
  1277                           
  1278                           ;Serial.c: 28: BufferRead.primeiro = 0;
  1279  07EF  1683               	bsf	3,5	;RP0=1, select bank1
  1280  07F0  1303               	bcf	3,6	;RP1=0, select bank1
  1281  07F1  01C9               	clrf	(_BufferRead^(0+128)+16)
  1282                           
  1283                           ;Serial.c: 29: BufferRead.ultimo = 0;
  1284  07F2  01CA               	clrf	(_BufferRead^(0+128)+17)
  1285                           
  1286                           ;Serial.c: 30: BufferRead.nItens = 0;
  1287  07F3  01CB               	clrf	(_BufferRead^(0+128)+18)
  1288                           
  1289                           ;Serial.c: 32: TXREG = 0x00;
  1290  07F4  1283               	bcf	3,5	;RP0=0, select bank0
  1291  07F5  1303               	bcf	3,6	;RP1=0, select bank0
  1292  07F6  0199               	clrf	25	;volatile
  1293  07F7  0008               	return
  1294  07F8                     __end_of_Serial_9600_Init:	
  1295                           
  1296                           	psect	text4
  1297  0015                     __ptext4:	
  1298 ;; *************** function _SensoresAnalogicos *****************
  1299 ;; Defined at:
  1300 ;;		line 199 in file "TCC_Main.c"
  1301 ;; Parameters:    Size  Location     Type
  1302 ;;		None
  1303 ;; Auto vars:     Size  Location     Type
  1304 ;;  valorAtual      2   14[BANK1 ] int 
  1305 ;;  valorAux        4   16[BANK1 ] long 
  1306 ;; Return value:  Size  Location     Type
  1307 ;;		None               void
  1308 ;; Registers used:
  1309 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1310 ;; Tracked objects:
  1311 ;;		On entry : 0/0
  1312 ;;		On exit  : 0/0
  1313 ;;		Unchanged: 0/0
  1314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1315 ;;      Params:         0       0       0       0       0
  1316 ;;      Locals:         0       0       6       0       0
  1317 ;;      Temps:          0       0       4       0       0
  1318 ;;      Totals:         0       0      10       0       0
  1319 ;;Total ram usage:       10 bytes
  1320 ;; Hardware stack levels used:    1
  1321 ;; Hardware stack levels required when called:    7
  1322 ;; This function calls:
  1323 ;;		_ADC_Read
  1324 ;;		_ADC_Select_Channel
  1325 ;;		_ADC_Available
  1326 ;;		_sqrt
  1327 ;;		___aldiv
  1328 ;;		___altoft
  1329 ;;		___awmod
  1330 ;;		___ftdiv
  1331 ;;		___fttol
  1332 ;;		___lmul
  1333 ;; This function is called by:
  1334 ;;		_main
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           
  1339                           ;psect for function _SensoresAnalogicos
  1340  0015                     _SensoresAnalogicos:	
  1341                           
  1342                           ;TCC_Main.c: 200: static int n = 0;
  1343                           ;TCC_Main.c: 201: static char index = 0;
  1344                           ;TCC_Main.c: 202: signed long valorAux = 0;
  1345                           
  1346                           ;incstack = 0
  1347                           ; Regs used in _SensoresAnalogicos: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1348  0015  3000               	movlw	0
  1349  0016  1683               	bsf	3,5	;RP0=1, select bank1
  1350  0017  1303               	bcf	3,6	;RP1=0, select bank1
  1351  0018  00DF               	movwf	(SensoresAnalogicos@valorAux+3)^(0+128)
  1352  0019  3000               	movlw	0
  1353  001A  00DE               	movwf	(SensoresAnalogicos@valorAux+2)^(0+128)
  1354  001B  3000               	movlw	0
  1355  001C  00DD               	movwf	(SensoresAnalogicos@valorAux+1)^(0+128)
  1356  001D  3000               	movlw	0
  1357  001E  00DC               	movwf	SensoresAnalogicos@valorAux^(0+128)
  1358                           
  1359                           ;TCC_Main.c: 203: static long somatorio = 0;
  1360                           ;TCC_Main.c: 205: if( n < 500 )
  1361  001F  0828               	movf	(SensoresAnalogicos@n+1)^(0+128),w
  1362  0020  3A80               	xorlw	128
  1363  0021  00FF               	movwf	127
  1364  0022  3081               	movlw	129
  1365  0023  027F               	subwf	127,w
  1366  0024  1D03               	skipz
  1367  0025  2828               	goto	u3045
  1368  0026  30F4               	movlw	244
  1369  0027  0227               	subwf	SensoresAnalogicos@n^(0+128),w
  1370  0028                     u3045:	
  1371  0028  1803               	skipnc
  1372  0029  28ED               	goto	l2690
  1373                           
  1374                           ;TCC_Main.c: 206: {
  1375                           ;TCC_Main.c: 207: if(ADC_Available())
  1376  002A  120A  158A  2277   	fcall	_ADC_Available
      +       120A  118A         
  1377  002F  3A00               	xorlw	0
  1378  0030  1903               	skipnz
  1379  0031  0008               	return
  1380                           
  1381                           ;TCC_Main.c: 208: {
  1382                           ;TCC_Main.c: 209: if(index < 4){
  1383  0032  3004               	movlw	4
  1384  0033  1683               	bsf	3,5	;RP0=1, select bank1
  1385  0034  1303               	bcf	3,6	;RP1=0, select bank1
  1386  0035  0235               	subwf	SensoresAnalogicos@index^(0+128),w
  1387  0036  1803               	skipnc
  1388  0037  2872               	goto	l2686
  1389                           
  1390                           ;TCC_Main.c: 212: int valorAtual = ADC_Read();
  1391  0038  120A  158A  2289   	fcall	_ADC_Read
      +       120A  118A         
  1392  003D  1283               	bcf	3,5	;RP0=0, select bank0
  1393  003E  1303               	bcf	3,6	;RP1=0, select bank0
  1394  003F  0826               	movf	?_ADC_Read+1,w
  1395  0040  1683               	bsf	3,5	;RP0=1, select bank1
  1396  0041  1303               	bcf	3,6	;RP1=0, select bank1
  1397  0042  01DB               	clrf	(SensoresAnalogicos@valorAtual+1)^(0+128)
  1398  0043  07DB               	addwf	(SensoresAnalogicos@valorAtual+1)^(0+128),f
  1399  0044  1283               	bcf	3,5	;RP0=0, select bank0
  1400  0045  1303               	bcf	3,6	;RP1=0, select bank0
  1401  0046  0825               	movf	?_ADC_Read,w
  1402  0047  1683               	bsf	3,5	;RP0=1, select bank1
  1403  0048  1303               	bcf	3,6	;RP1=0, select bank1
  1404  0049  01DA               	clrf	SensoresAnalogicos@valorAtual^(0+128)
  1405  004A  07DA               	addwf	SensoresAnalogicos@valorAtual^(0+128),f
  1406                           
  1407                           ;TCC_Main.c: 213: if( somatorio < valorAtual ) somatorio = valorAtual;
  1408  004B  085A               	movf	SensoresAnalogicos@valorAtual^(0+128),w
  1409  004C  00D6               	movwf	??_SensoresAnalogicos^(0+128)
  1410  004D  085B               	movf	(SensoresAnalogicos@valorAtual+1)^(0+128),w
  1411  004E  00D7               	movwf	(??_SensoresAnalogicos^(0+128)+1)
  1412  004F  3000               	movlw	0
  1413  0050  1BD7               	btfsc	(??_SensoresAnalogicos^(0+128)+1),7
  1414  0051  30FF               	movlw	255
  1415  0052  00D8               	movwf	(??_SensoresAnalogicos^(0+128)+2)
  1416  0053  00D9               	movwf	(??_SensoresAnalogicos^(0+128)+3)
  1417  0054  0823               	movf	(SensoresAnalogicos@somatorio+3)^(0+128),w
  1418  0055  3A80               	xorlw	128
  1419  0056  00FF               	movwf	127
  1420  0057  0859               	movf	(??_SensoresAnalogicos+3)^(0+128),w
  1421  0058  3A80               	xorlw	128
  1422  0059  027F               	subwf	127,w
  1423  005A  1D03               	skipz
  1424  005B  2866               	goto	u3073
  1425  005C  0858               	movf	(??_SensoresAnalogicos+2)^(0+128),w
  1426  005D  0222               	subwf	(SensoresAnalogicos@somatorio+2)^(0+128),w
  1427  005E  1D03               	skipz
  1428  005F  2866               	goto	u3073
  1429  0060  0857               	movf	(??_SensoresAnalogicos+1)^(0+128),w
  1430  0061  0221               	subwf	(SensoresAnalogicos@somatorio+1)^(0+128),w
  1431  0062  1D03               	skipz
  1432  0063  2866               	goto	u3073
  1433  0064  0856               	movf	??_SensoresAnalogicos^(0+128),w
  1434  0065  0220               	subwf	SensoresAnalogicos@somatorio^(0+128),w
  1435  0066                     u3073:	
  1436  0066  1803               	skipnc
  1437  0067  28E6               	goto	l2688
  1438  0068  085A               	movf	SensoresAnalogicos@valorAtual^(0+128),w
  1439  0069  00A0               	movwf	SensoresAnalogicos@somatorio^(0+128)
  1440  006A  085B               	movf	(SensoresAnalogicos@valorAtual+1)^(0+128),w
  1441  006B  00A1               	movwf	(SensoresAnalogicos@somatorio+1)^(0+128)
  1442  006C  3000               	movlw	0
  1443  006D  1BA1               	btfsc	(SensoresAnalogicos@somatorio+1)^(0+128),7
  1444  006E  30FF               	movlw	255
  1445  006F  00A2               	movwf	(SensoresAnalogicos@somatorio+2)^(0+128)
  1446  0070  00A3               	movwf	(SensoresAnalogicos@somatorio+3)^(0+128)
  1447                           
  1448                           ;TCC_Main.c: 214: }
  1449  0071  28E6               	goto	l2688
  1450  0072                     l2686:	
  1451                           
  1452                           ;TCC_Main.c: 215: else{
  1453                           ;TCC_Main.c: 216: valorAux = ADC_Read();
  1454  0072  120A  158A  2289   	fcall	_ADC_Read
      +       120A  118A         
  1455  0077  1283               	bcf	3,5	;RP0=0, select bank0
  1456  0078  1303               	bcf	3,6	;RP1=0, select bank0
  1457  0079  0825               	movf	?_ADC_Read,w
  1458  007A  1683               	bsf	3,5	;RP0=1, select bank1
  1459  007B  1303               	bcf	3,6	;RP1=0, select bank1
  1460  007C  00DC               	movwf	SensoresAnalogicos@valorAux^(0+128)
  1461  007D  1283               	bcf	3,5	;RP0=0, select bank0
  1462  007E  1303               	bcf	3,6	;RP1=0, select bank0
  1463  007F  0826               	movf	?_ADC_Read+1,w
  1464  0080  1683               	bsf	3,5	;RP0=1, select bank1
  1465  0081  1303               	bcf	3,6	;RP1=0, select bank1
  1466  0082  00DD               	movwf	(SensoresAnalogicos@valorAux+1)^(0+128)
  1467  0083  3000               	movlw	0
  1468  0084  1BDD               	btfsc	(SensoresAnalogicos@valorAux+1)^(0+128),7
  1469  0085  30FF               	movlw	255
  1470  0086  00DE               	movwf	(SensoresAnalogicos@valorAux+2)^(0+128)
  1471  0087  00DF               	movwf	(SensoresAnalogicos@valorAux+3)^(0+128)
  1472                           
  1473                           ;TCC_Main.c: 217: somatorio += valorAux*valorAux;
  1474  0088  085F               	movf	(SensoresAnalogicos@valorAux+3)^(0+128),w
  1475  0089  1283               	bcf	3,5	;RP0=0, select bank0
  1476  008A  1303               	bcf	3,6	;RP1=0, select bank0
  1477  008B  00A8               	movwf	?___lmul+3
  1478  008C  1683               	bsf	3,5	;RP0=1, select bank1
  1479  008D  1303               	bcf	3,6	;RP1=0, select bank1
  1480  008E  085E               	movf	(SensoresAnalogicos@valorAux+2)^(0+128),w
  1481  008F  1283               	bcf	3,5	;RP0=0, select bank0
  1482  0090  1303               	bcf	3,6	;RP1=0, select bank0
  1483  0091  00A7               	movwf	?___lmul+2
  1484  0092  1683               	bsf	3,5	;RP0=1, select bank1
  1485  0093  1303               	bcf	3,6	;RP1=0, select bank1
  1486  0094  085D               	movf	(SensoresAnalogicos@valorAux+1)^(0+128),w
  1487  0095  1283               	bcf	3,5	;RP0=0, select bank0
  1488  0096  1303               	bcf	3,6	;RP1=0, select bank0
  1489  0097  00A6               	movwf	?___lmul+1
  1490  0098  1683               	bsf	3,5	;RP0=1, select bank1
  1491  0099  1303               	bcf	3,6	;RP1=0, select bank1
  1492  009A  085C               	movf	SensoresAnalogicos@valorAux^(0+128),w
  1493  009B  1283               	bcf	3,5	;RP0=0, select bank0
  1494  009C  1303               	bcf	3,6	;RP1=0, select bank0
  1495  009D  00A5               	movwf	?___lmul
  1496  009E  1683               	bsf	3,5	;RP0=1, select bank1
  1497  009F  1303               	bcf	3,6	;RP1=0, select bank1
  1498  00A0  085F               	movf	(SensoresAnalogicos@valorAux+3)^(0+128),w
  1499  00A1  1283               	bcf	3,5	;RP0=0, select bank0
  1500  00A2  1303               	bcf	3,6	;RP1=0, select bank0
  1501  00A3  00AC               	movwf	?___lmul+7
  1502  00A4  1683               	bsf	3,5	;RP0=1, select bank1
  1503  00A5  1303               	bcf	3,6	;RP1=0, select bank1
  1504  00A6  085E               	movf	(SensoresAnalogicos@valorAux+2)^(0+128),w
  1505  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  1506  00A8  1303               	bcf	3,6	;RP1=0, select bank0
  1507  00A9  00AB               	movwf	?___lmul+6
  1508  00AA  1683               	bsf	3,5	;RP0=1, select bank1
  1509  00AB  1303               	bcf	3,6	;RP1=0, select bank1
  1510  00AC  085D               	movf	(SensoresAnalogicos@valorAux+1)^(0+128),w
  1511  00AD  1283               	bcf	3,5	;RP0=0, select bank0
  1512  00AE  1303               	bcf	3,6	;RP1=0, select bank0
  1513  00AF  00AA               	movwf	?___lmul+5
  1514  00B0  1683               	bsf	3,5	;RP0=1, select bank1
  1515  00B1  1303               	bcf	3,6	;RP1=0, select bank1
  1516  00B2  085C               	movf	SensoresAnalogicos@valorAux^(0+128),w
  1517  00B3  1283               	bcf	3,5	;RP0=0, select bank0
  1518  00B4  1303               	bcf	3,6	;RP1=0, select bank0
  1519  00B5  00A9               	movwf	?___lmul+4
  1520  00B6  120A  158A  2407   	fcall	___lmul
      +       120A  118A         
  1521  00BB  1283               	bcf	3,5	;RP0=0, select bank0
  1522  00BC  1303               	bcf	3,6	;RP1=0, select bank0
  1523  00BD  0825               	movf	?___lmul,w
  1524  00BE  1683               	bsf	3,5	;RP0=1, select bank1
  1525  00BF  1303               	bcf	3,6	;RP1=0, select bank1
  1526  00C0  07A0               	addwf	SensoresAnalogicos@somatorio^(0+128),f
  1527  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  1528  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  1529  00C3  0826               	movf	?___lmul+1,w
  1530  00C4  1103               	clrz
  1531  00C5  1803               	skipnc
  1532  00C6  3E01               	addlw	1
  1533  00C7  1903               	skipnz
  1534  00C8  28CC               	goto	u3081
  1535  00C9  1683               	bsf	3,5	;RP0=1, select bank1
  1536  00CA  1303               	bcf	3,6	;RP1=0, select bank1
  1537  00CB  07A1               	addwf	(SensoresAnalogicos@somatorio+1)^(0+128),f
  1538  00CC                     u3081:	
  1539  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  1540  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  1541  00CE  0827               	movf	?___lmul+2,w
  1542  00CF  1103               	clrz
  1543  00D0  1803               	skipnc
  1544  00D1  3E01               	addlw	1
  1545  00D2  1903               	skipnz
  1546  00D3  28D7               	goto	u3082
  1547  00D4  1683               	bsf	3,5	;RP0=1, select bank1
  1548  00D5  1303               	bcf	3,6	;RP1=0, select bank1
  1549  00D6  07A2               	addwf	(SensoresAnalogicos@somatorio+2)^(0+128),f
  1550  00D7                     u3082:	
  1551  00D7  1283               	bcf	3,5	;RP0=0, select bank0
  1552  00D8  1303               	bcf	3,6	;RP1=0, select bank0
  1553  00D9  0828               	movf	?___lmul+3,w
  1554  00DA  1103               	clrz
  1555  00DB  1803               	skipnc
  1556  00DC  3E01               	addlw	1
  1557  00DD  1903               	skipnz
  1558  00DE  28E2               	goto	u3083
  1559  00DF  1683               	bsf	3,5	;RP0=1, select bank1
  1560  00E0  1303               	bcf	3,6	;RP1=0, select bank1
  1561  00E1  07A3               	addwf	(SensoresAnalogicos@somatorio+3)^(0+128),f
  1562  00E2                     u3083:	
  1563  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  1564  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  1565  00E4  1683               	bsf	3,5	;RP0=1, select bank1
  1566  00E5  1303               	bcf	3,6	;RP1=0, select bank1
  1567  00E6                     l2688:	
  1568                           
  1569                           ;TCC_Main.c: 218: }
  1570                           ;TCC_Main.c: 219: n++;
  1571  00E6  3001               	movlw	1
  1572  00E7  07A7               	addwf	SensoresAnalogicos@n^(0+128),f
  1573  00E8  1803               	skipnc
  1574  00E9  0AA8               	incf	(SensoresAnalogicos@n+1)^(0+128),f
  1575  00EA  3000               	movlw	0
  1576  00EB  07A8               	addwf	(SensoresAnalogicos@n+1)^(0+128),f
  1577                           
  1578                           ;TCC_Main.c: 220: }
  1579                           ;TCC_Main.c: 221: }
  1580  00EC  0008               	return
  1581  00ED                     l2690:	
  1582                           
  1583                           ;TCC_Main.c: 222: else
  1584                           ;TCC_Main.c: 223: {
  1585                           ;TCC_Main.c: 224: if(index < 4)
  1586  00ED  3004               	movlw	4
  1587  00EE  1683               	bsf	3,5	;RP0=1, select bank1
  1588  00EF  1303               	bcf	3,6	;RP1=0, select bank1
  1589  00F0  0235               	subwf	SensoresAnalogicos@index^(0+128),w
  1590  00F1  1803               	skipnc
  1591  00F2  28FF               	goto	l2694
  1592                           
  1593                           ;TCC_Main.c: 226: ModuloCM.corrente[index] = somatorio;
  1594  00F3  0835               	movf	SensoresAnalogicos@index^(0+128),w
  1595  00F4  00D6               	movwf	??_SensoresAnalogicos^(0+128)
  1596  00F5  0756               	addwf	??_SensoresAnalogicos^(0+128),w
  1597  00F6  3EE3               	addlw	(_ModuloCM+1)& (0+255)
  1598  00F7  0084               	movwf	4
  1599  00F8  0820               	movf	SensoresAnalogicos@somatorio^(0+128),w
  1600  00F9  1383               	bcf	3,7	;select IRP bank1
  1601  00FA  0080               	movwf	0
  1602  00FB  0A84               	incf	4,f
  1603  00FC  0821               	movf	(SensoresAnalogicos@somatorio+1)^(0+128),w
  1604  00FD  0080               	movwf	0
  1605  00FE  2978               	goto	l2700
  1606  00FF                     l2694:	
  1607                           
  1608                           ;TCC_Main.c: 227: else
  1609                           ;TCC_Main.c: 228: {
  1610                           ;TCC_Main.c: 229: Tensao[index-4] = sqrt(somatorio/500)/3.2;
  1611  00FF  0823               	movf	(SensoresAnalogicos@somatorio+3)^(0+128),w
  1612  0100  1283               	bcf	3,5	;RP0=0, select bank0
  1613  0101  1303               	bcf	3,6	;RP1=0, select bank0
  1614  0102  00AC               	movwf	?___aldiv+7
  1615  0103  1683               	bsf	3,5	;RP0=1, select bank1
  1616  0104  1303               	bcf	3,6	;RP1=0, select bank1
  1617  0105  0822               	movf	(SensoresAnalogicos@somatorio+2)^(0+128),w
  1618  0106  1283               	bcf	3,5	;RP0=0, select bank0
  1619  0107  1303               	bcf	3,6	;RP1=0, select bank0
  1620  0108  00AB               	movwf	?___aldiv+6
  1621  0109  1683               	bsf	3,5	;RP0=1, select bank1
  1622  010A  1303               	bcf	3,6	;RP1=0, select bank1
  1623  010B  0821               	movf	(SensoresAnalogicos@somatorio+1)^(0+128),w
  1624  010C  1283               	bcf	3,5	;RP0=0, select bank0
  1625  010D  1303               	bcf	3,6	;RP1=0, select bank0
  1626  010E  00AA               	movwf	?___aldiv+5
  1627  010F  1683               	bsf	3,5	;RP0=1, select bank1
  1628  0110  1303               	bcf	3,6	;RP1=0, select bank1
  1629  0111  0820               	movf	SensoresAnalogicos@somatorio^(0+128),w
  1630  0112  1283               	bcf	3,5	;RP0=0, select bank0
  1631  0113  1303               	bcf	3,6	;RP1=0, select bank0
  1632  0114  00A9               	movwf	?___aldiv+4
  1633  0115  3000               	movlw	0
  1634  0116  00A8               	movwf	?___aldiv+3
  1635  0117  3000               	movlw	0
  1636  0118  00A7               	movwf	?___aldiv+2
  1637  0119  3001               	movlw	1
  1638  011A  00A6               	movwf	?___aldiv+1
  1639  011B  30F4               	movlw	244
  1640  011C  00A5               	movwf	?___aldiv
  1641  011D  120A  118A  2637   	fcall	___aldiv
      +       120A  118A         
  1642  0122  1283               	bcf	3,5	;RP0=0, select bank0
  1643  0123  1303               	bcf	3,6	;RP1=0, select bank0
  1644  0124  0828               	movf	?___aldiv+3,w
  1645  0125  00B7               	movwf	?___altoft+3
  1646  0126  0827               	movf	?___aldiv+2,w
  1647  0127  00B6               	movwf	?___altoft+2
  1648  0128  0826               	movf	?___aldiv+1,w
  1649  0129  00B5               	movwf	?___altoft+1
  1650  012A  0825               	movf	?___aldiv,w
  1651  012B  00B4               	movwf	?___altoft
  1652  012C  120A  158A  2448   	fcall	___altoft
      +       120A  118A         
  1653  0131  1283               	bcf	3,5	;RP0=0, select bank0
  1654  0132  1303               	bcf	3,6	;RP1=0, select bank0
  1655  0133  0834               	movf	?___altoft,w
  1656  0134  00C0               	movwf	?_sqrt
  1657  0135  0835               	movf	?___altoft+1,w
  1658  0136  00C1               	movwf	?_sqrt+1
  1659  0137  0836               	movf	?___altoft+2,w
  1660  0138  00C2               	movwf	?_sqrt+2
  1661  0139  120A  118A  21B7   	fcall	_sqrt
      +       120A  118A         
  1662  013E  1283               	bcf	3,5	;RP0=0, select bank0
  1663  013F  1303               	bcf	3,6	;RP1=0, select bank0
  1664  0140  0840               	movf	?_sqrt,w
  1665  0141  00D9               	movwf	?___ftdiv+3
  1666  0142  0841               	movf	?_sqrt+1,w
  1667  0143  00DA               	movwf	?___ftdiv+4
  1668  0144  0842               	movf	?_sqrt+2,w
  1669  0145  00DB               	movwf	?___ftdiv+5
  1670  0146  30CD               	movlw	205
  1671  0147  00D6               	movwf	?___ftdiv
  1672  0148  304C               	movlw	76
  1673  0149  00D7               	movwf	?___ftdiv+1
  1674  014A  3040               	movlw	64
  1675  014B  00D8               	movwf	?___ftdiv+2
  1676  014C  120A  118A  257F   	fcall	___ftdiv
      +       120A  118A         
  1677  0151  1283               	bcf	3,5	;RP0=0, select bank0
  1678  0152  1303               	bcf	3,6	;RP1=0, select bank0
  1679  0153  0856               	movf	?___ftdiv,w
  1680  0154  00E6               	movwf	?___fttol
  1681  0155  0857               	movf	?___ftdiv+1,w
  1682  0156  00E7               	movwf	?___fttol+1
  1683  0157  0858               	movf	?___ftdiv+2,w
  1684  0158  00E8               	movwf	?___fttol+2
  1685  0159  120A  118A  24B6   	fcall	___fttol
      +       120A  118A         
  1686  015E  1283               	bcf	3,5	;RP0=0, select bank0
  1687  015F  1303               	bcf	3,6	;RP1=0, select bank0
  1688  0160  0866               	movf	?___fttol,w
  1689  0161  1683               	bsf	3,5	;RP0=1, select bank1
  1690  0162  1303               	bcf	3,6	;RP1=0, select bank1
  1691  0163  00D6               	movwf	??_SensoresAnalogicos^(0+128)
  1692  0164  0835               	movf	SensoresAnalogicos@index^(0+128),w
  1693  0165  3EFC               	addlw	252
  1694  0166  3EA4               	addlw	_Tensao& (0+255)
  1695  0167  0084               	movwf	4
  1696  0168  0856               	movf	??_SensoresAnalogicos^(0+128),w
  1697  0169  1383               	bcf	3,7	;select IRP bank1
  1698  016A  0080               	movwf	0
  1699                           
  1700                           ;TCC_Main.c: 230: if(Tensao[index-4] < 70) Tensao[index-4] = 0;
  1701  016B  0835               	movf	SensoresAnalogicos@index^(0+128),w
  1702  016C  3EFC               	addlw	252
  1703  016D  3EA4               	addlw	_Tensao& (0+255)
  1704  016E  0084               	movwf	4
  1705  016F  3046               	movlw	70
  1706  0170  0200               	subwf	0,w
  1707  0171  1803               	skipnc
  1708  0172  2978               	goto	l2700
  1709  0173  0835               	movf	SensoresAnalogicos@index^(0+128),w
  1710  0174  3EFC               	addlw	252
  1711  0175  3EA4               	addlw	_Tensao& (0+255)
  1712  0176  0084               	movwf	4
  1713  0177  0180               	clrf	0
  1714  0178                     l2700:	
  1715                           
  1716                           ;TCC_Main.c: 231: }
  1717                           ;TCC_Main.c: 232: somatorio = 0;
  1718  0178  3000               	movlw	0
  1719  0179  00A3               	movwf	(SensoresAnalogicos@somatorio+3)^(0+128)
  1720  017A  3000               	movlw	0
  1721  017B  00A2               	movwf	(SensoresAnalogicos@somatorio+2)^(0+128)
  1722  017C  3000               	movlw	0
  1723  017D  00A1               	movwf	(SensoresAnalogicos@somatorio+1)^(0+128)
  1724  017E  3000               	movlw	0
  1725  017F  00A0               	movwf	SensoresAnalogicos@somatorio^(0+128)
  1726                           
  1727                           ;TCC_Main.c: 233: index++;
  1728  0180  3001               	movlw	1
  1729  0181  00D6               	movwf	??_SensoresAnalogicos^(0+128)
  1730  0182  0856               	movf	??_SensoresAnalogicos^(0+128),w
  1731  0183  07B5               	addwf	SensoresAnalogicos@index^(0+128),f
  1732                           
  1733                           ;TCC_Main.c: 234: index = index%7;
  1734  0184  3007               	movlw	7
  1735  0185  1283               	bcf	3,5	;RP0=0, select bank0
  1736  0186  1303               	bcf	3,6	;RP1=0, select bank0
  1737  0187  00A5               	movwf	?___awmod
  1738  0188  3000               	movlw	0
  1739  0189  00A6               	movwf	?___awmod+1
  1740  018A  1683               	bsf	3,5	;RP0=1, select bank1
  1741  018B  1303               	bcf	3,6	;RP1=0, select bank1
  1742  018C  0835               	movf	SensoresAnalogicos@index^(0+128),w
  1743  018D  00D6               	movwf	??_SensoresAnalogicos^(0+128)
  1744  018E  01D7               	clrf	(??_SensoresAnalogicos^(0+128)+1)
  1745  018F  0856               	movf	??_SensoresAnalogicos^(0+128),w
  1746  0190  1283               	bcf	3,5	;RP0=0, select bank0
  1747  0191  1303               	bcf	3,6	;RP1=0, select bank0
  1748  0192  00A7               	movwf	?___awmod+2
  1749  0193  1683               	bsf	3,5	;RP0=1, select bank1
  1750  0194  1303               	bcf	3,6	;RP1=0, select bank1
  1751  0195  0857               	movf	(??_SensoresAnalogicos+1)^(0+128),w
  1752  0196  1283               	bcf	3,5	;RP0=0, select bank0
  1753  0197  1303               	bcf	3,6	;RP1=0, select bank0
  1754  0198  00A8               	movwf	?___awmod+3
  1755  0199  120A  158A  2521   	fcall	___awmod
      +       120A  118A         
  1756  019E  1283               	bcf	3,5	;RP0=0, select bank0
  1757  019F  1303               	bcf	3,6	;RP1=0, select bank0
  1758  01A0  0825               	movf	?___awmod,w
  1759  01A1  1683               	bsf	3,5	;RP0=1, select bank1
  1760  01A2  1303               	bcf	3,6	;RP1=0, select bank1
  1761  01A3  00D8               	movwf	(??_SensoresAnalogicos+2)^(0+128)
  1762  01A4  0858               	movf	(??_SensoresAnalogicos+2)^(0+128),w
  1763  01A5  00B5               	movwf	SensoresAnalogicos@index^(0+128)
  1764                           
  1765                           ;TCC_Main.c: 236: if(index < 4)
  1766  01A6  3004               	movlw	4
  1767  01A7  0235               	subwf	SensoresAnalogicos@index^(0+128),w
  1768  01A8  1803               	skipnc
  1769  01A9  29AC               	goto	l2710
  1770                           
  1771                           ;TCC_Main.c: 237: ADC_Select_Channel(index);
  1772  01AA  0835               	movf	SensoresAnalogicos@index^(0+128),w
  1773  01AB  29AF               	goto	L3
  1774  01AC                     l2710:	
  1775                           
  1776                           ;TCC_Main.c: 238: else
  1777                           ;TCC_Main.c: 239: ADC_Select_Channel(index+1);
  1778  01AC  1683               	bsf	3,5	;RP0=1, select bank1
  1779  01AD  1303               	bcf	3,6	;RP1=0, select bank1
  1780  01AE  0A35               	incf	SensoresAnalogicos@index^(0+128),w
  1781  01AF                     L3:	
  1782  01AF  120A  158A  22F0   	fcall	_ADC_Select_Channel
  1783                           
  1784                           ;TCC_Main.c: 240: n = 0;
  1785  01B2  1683               	bsf	3,5	;RP0=1, select bank1
  1786  01B3  1303               	bcf	3,6	;RP1=0, select bank1
  1787  01B4  01A7               	clrf	SensoresAnalogicos@n^(0+128)
  1788  01B5  01A8               	clrf	(SensoresAnalogicos@n+1)^(0+128)
  1789  01B6  0008               	return
  1790  01B7                     __end_of_SensoresAnalogicos:	
  1791                           
  1792                           	psect	text5
  1793  0C07                     __ptext5:	
  1794 ;; *************** function ___lmul *****************
  1795 ;; Defined at:
  1796 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\lmul.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;  multiplier      4    5[BANK0 ] unsigned long 
  1799 ;;  multiplicand    4    9[BANK0 ] unsigned long 
  1800 ;; Auto vars:     Size  Location     Type
  1801 ;;  product         4   14[BANK0 ] unsigned long 
  1802 ;; Return value:  Size  Location     Type
  1803 ;;                  4    5[BANK0 ] unsigned long 
  1804 ;; Registers used:
  1805 ;;		wreg, status,2, status,0
  1806 ;; Tracked objects:
  1807 ;;		On entry : 0/0
  1808 ;;		On exit  : 0/0
  1809 ;;		Unchanged: 0/0
  1810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1811 ;;      Params:         0       8       0       0       0
  1812 ;;      Locals:         0       4       0       0       0
  1813 ;;      Temps:          0       1       0       0       0
  1814 ;;      Totals:         0      13       0       0       0
  1815 ;;Total ram usage:       13 bytes
  1816 ;; Hardware stack levels used:    1
  1817 ;; Hardware stack levels required when called:    3
  1818 ;; This function calls:
  1819 ;;		Nothing
  1820 ;; This function is called by:
  1821 ;;		_SensoresAnalogicos
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825                           
  1826                           ;psect for function ___lmul
  1827  0C07                     ___lmul:	
  1828                           
  1829                           ;incstack = 0
  1830                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1831  0C07  3000               	movlw	0
  1832  0C08  1283               	bcf	3,5	;RP0=0, select bank0
  1833  0C09  1303               	bcf	3,6	;RP1=0, select bank0
  1834  0C0A  00B1               	movwf	___lmul@product+3
  1835  0C0B  3000               	movlw	0
  1836  0C0C  00B0               	movwf	___lmul@product+2
  1837  0C0D  3000               	movlw	0
  1838  0C0E  00AF               	movwf	___lmul@product+1
  1839  0C0F  3000               	movlw	0
  1840  0C10  00AE               	movwf	___lmul@product
  1841  0C11                     l2474:	
  1842  0C11  1C25               	btfss	___lmul@multiplier,0
  1843  0C12  2C27               	goto	l2478
  1844  0C13  0829               	movf	___lmul@multiplicand,w
  1845  0C14  07AE               	addwf	___lmul@product,f
  1846  0C15  082A               	movf	___lmul@multiplicand+1,w
  1847  0C16  1103               	clrz
  1848  0C17  1803               	skipnc
  1849  0C18  3E01               	addlw	1
  1850  0C19  1D03               	btfss	3,2
  1851  0C1A  07AF               	addwf	___lmul@product+1,f
  1852  0C1B  082B               	movf	___lmul@multiplicand+2,w
  1853  0C1C  1103               	clrz
  1854  0C1D  1803               	skipnc
  1855  0C1E  3E01               	addlw	1
  1856  0C1F  1D03               	btfss	3,2
  1857  0C20  07B0               	addwf	___lmul@product+2,f
  1858  0C21  082C               	movf	___lmul@multiplicand+3,w
  1859  0C22  1103               	clrz
  1860  0C23  1803               	skipnc
  1861  0C24  3E01               	addlw	1
  1862  0C25  1D03               	btfss	3,2
  1863  0C26  07B1               	addwf	___lmul@product+3,f
  1864  0C27                     l2478:	
  1865  0C27  3001               	movlw	1
  1866  0C28  00AD               	movwf	??___lmul
  1867  0C29                     u2775:	
  1868  0C29  1003               	clrc
  1869  0C2A  0DA9               	rlf	___lmul@multiplicand,f
  1870  0C2B  0DAA               	rlf	___lmul@multiplicand+1,f
  1871  0C2C  0DAB               	rlf	___lmul@multiplicand+2,f
  1872  0C2D  0DAC               	rlf	___lmul@multiplicand+3,f
  1873  0C2E  0BAD               	decfsz	??___lmul,f
  1874  0C2F  2C29               	goto	u2775
  1875  0C30  3001               	movlw	1
  1876  0C31                     u2785:	
  1877  0C31  1003               	clrc
  1878  0C32  0CA8               	rrf	___lmul@multiplier+3,f
  1879  0C33  0CA7               	rrf	___lmul@multiplier+2,f
  1880  0C34  0CA6               	rrf	___lmul@multiplier+1,f
  1881  0C35  0CA5               	rrf	___lmul@multiplier,f
  1882  0C36  3EFF               	addlw	-1
  1883  0C37  1D03               	skipz
  1884  0C38  2C31               	goto	u2785
  1885  0C39  0828               	movf	___lmul@multiplier+3,w
  1886  0C3A  0427               	iorwf	___lmul@multiplier+2,w
  1887  0C3B  0426               	iorwf	___lmul@multiplier+1,w
  1888  0C3C  0425               	iorwf	___lmul@multiplier,w
  1889  0C3D  1D03               	skipz
  1890  0C3E  2C11               	goto	l2474
  1891  0C3F  0831               	movf	___lmul@product+3,w
  1892  0C40  00A8               	movwf	?___lmul+3
  1893  0C41  0830               	movf	___lmul@product+2,w
  1894  0C42  00A7               	movwf	?___lmul+2
  1895  0C43  082F               	movf	___lmul@product+1,w
  1896  0C44  00A6               	movwf	?___lmul+1
  1897  0C45  082E               	movf	___lmul@product,w
  1898  0C46  00A5               	movwf	?___lmul
  1899  0C47  0008               	return
  1900  0C48                     __end_of___lmul:	
  1901                           
  1902                           	psect	text6
  1903  04B6                     __ptext6:	
  1904 ;; *************** function ___fttol *****************
  1905 ;; Defined at:
  1906 ;;		line 45 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\fttol.c"
  1907 ;; Parameters:    Size  Location     Type
  1908 ;;  f1              3   70[BANK0 ] float 
  1909 ;; Auto vars:     Size  Location     Type
  1910 ;;  lval            4    5[BANK1 ] unsigned long 
  1911 ;;  exp1            1    9[BANK1 ] unsigned char 
  1912 ;;  sign1           1    4[BANK1 ] unsigned char 
  1913 ;; Return value:  Size  Location     Type
  1914 ;;                  4   70[BANK0 ] long 
  1915 ;; Registers used:
  1916 ;;		wreg, status,2, status,0
  1917 ;; Tracked objects:
  1918 ;;		On entry : 0/0
  1919 ;;		On exit  : 0/0
  1920 ;;		Unchanged: 0/0
  1921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1922 ;;      Params:         0       4       0       0       0
  1923 ;;      Locals:         0       0       6       0       0
  1924 ;;      Temps:          0       0       4       0       0
  1925 ;;      Totals:         0       4      10       0       0
  1926 ;;Total ram usage:       14 bytes
  1927 ;; Hardware stack levels used:    1
  1928 ;; Hardware stack levels required when called:    3
  1929 ;; This function calls:
  1930 ;;		Nothing
  1931 ;; This function is called by:
  1932 ;;		_SensoresAnalogicos
  1933 ;; This function uses a non-reentrant model
  1934 ;;
  1935                           
  1936                           
  1937                           ;psect for function ___fttol
  1938  04B6                     ___fttol:	
  1939                           
  1940                           ;incstack = 0
  1941                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1942  04B6  1283               	bcf	3,5	;RP0=0, select bank0
  1943  04B7  1303               	bcf	3,6	;RP1=0, select bank0
  1944  04B8  0866               	movf	___fttol@f1,w
  1945  04B9  1683               	bsf	3,5	;RP0=1, select bank1
  1946  04BA  1303               	bcf	3,6	;RP1=0, select bank1
  1947  04BB  00CC               	movwf	??___fttol^(0+128)
  1948  04BC  1283               	bcf	3,5	;RP0=0, select bank0
  1949  04BD  1303               	bcf	3,6	;RP1=0, select bank0
  1950  04BE  0867               	movf	___fttol@f1+1,w
  1951  04BF  1683               	bsf	3,5	;RP0=1, select bank1
  1952  04C0  1303               	bcf	3,6	;RP1=0, select bank1
  1953  04C1  00CD               	movwf	(??___fttol^(0+128)+1)
  1954  04C2  1283               	bcf	3,5	;RP0=0, select bank0
  1955  04C3  1303               	bcf	3,6	;RP1=0, select bank0
  1956  04C4  0868               	movf	___fttol@f1+2,w
  1957  04C5  1683               	bsf	3,5	;RP0=1, select bank1
  1958  04C6  1303               	bcf	3,6	;RP1=0, select bank1
  1959  04C7  00CE               	movwf	(??___fttol^(0+128)+2)
  1960  04C8  1003               	clrc
  1961  04C9  0D4D               	rlf	(??___fttol^(0+128)+1),w
  1962  04CA  0D4E               	rlf	(??___fttol^(0+128)+2),w
  1963  04CB  00CF               	movwf	(??___fttol+3)^(0+128)
  1964  04CC  084F               	movf	(??___fttol+3)^(0+128),w
  1965  04CD  00D5               	movwf	___fttol@exp1^(0+128)
  1966  04CE  08D5               	movf	___fttol@exp1^(0+128),f
  1967  04CF  1D03               	skipz
  1968  04D0  2CDC               	goto	l2724
  1969  04D1  3000               	movlw	0
  1970  04D2  1283               	bcf	3,5	;RP0=0, select bank0
  1971  04D3  1303               	bcf	3,6	;RP1=0, select bank0
  1972  04D4  00E9               	movwf	?___fttol+3
  1973  04D5  3000               	movlw	0
  1974  04D6  00E8               	movwf	?___fttol+2
  1975  04D7  3000               	movlw	0
  1976  04D8  00E7               	movwf	?___fttol+1
  1977  04D9  3000               	movlw	0
  1978  04DA  00E6               	movwf	?___fttol
  1979  04DB  0008               	return
  1980  04DC                     l2724:	
  1981  04DC  1283               	bcf	3,5	;RP0=0, select bank0
  1982  04DD  0866               	movf	___fttol@f1,w
  1983  04DE  1683               	bsf	3,5	;RP0=1, select bank1
  1984  04DF  1303               	bcf	3,6	;RP1=0, select bank1
  1985  04E0  00CC               	movwf	??___fttol^(0+128)
  1986  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  1987  04E2  1303               	bcf	3,6	;RP1=0, select bank0
  1988  04E3  0867               	movf	___fttol@f1+1,w
  1989  04E4  1683               	bsf	3,5	;RP0=1, select bank1
  1990  04E5  1303               	bcf	3,6	;RP1=0, select bank1
  1991  04E6  00CD               	movwf	(??___fttol^(0+128)+1)
  1992  04E7  1283               	bcf	3,5	;RP0=0, select bank0
  1993  04E8  1303               	bcf	3,6	;RP1=0, select bank0
  1994  04E9  0868               	movf	___fttol@f1+2,w
  1995  04EA  1683               	bsf	3,5	;RP0=1, select bank1
  1996  04EB  1303               	bcf	3,6	;RP1=0, select bank1
  1997  04EC  00CE               	movwf	(??___fttol^(0+128)+2)
  1998  04ED  3017               	movlw	23
  1999  04EE                     u3135:	
  2000  04EE  1003               	clrc
  2001  04EF  0CCE               	rrf	(??___fttol^(0+128)+2),f
  2002  04F0  0CCD               	rrf	(??___fttol^(0+128)+1),f
  2003  04F1  0CCC               	rrf	??___fttol^(0+128),f
  2004  04F2  3EFF               	addlw	-1
  2005  04F3  1D03               	skipz
  2006  04F4  2CEE               	goto	u3135
  2007  04F5  084C               	movf	??___fttol^(0+128),w
  2008  04F6  00CF               	movwf	(??___fttol+3)^(0+128)
  2009  04F7  084F               	movf	(??___fttol+3)^(0+128),w
  2010  04F8  00D0               	movwf	___fttol@sign1^(0+128)
  2011  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  2012  04FA  1303               	bcf	3,6	;RP1=0, select bank0
  2013  04FB  17E7               	bsf	___fttol@f1+1,7
  2014  04FC  30FF               	movlw	255
  2015  04FD  05E6               	andwf	___fttol@f1,f
  2016  04FE  30FF               	movlw	255
  2017  04FF  05E7               	andwf	___fttol@f1+1,f
  2018  0500  3000               	movlw	0
  2019  0501  05E8               	andwf	___fttol@f1+2,f
  2020  0502  0866               	movf	___fttol@f1,w
  2021  0503  1683               	bsf	3,5	;RP0=1, select bank1
  2022  0504  1303               	bcf	3,6	;RP1=0, select bank1
  2023  0505  00D1               	movwf	___fttol@lval^(0+128)
  2024  0506  1283               	bcf	3,5	;RP0=0, select bank0
  2025  0507  1303               	bcf	3,6	;RP1=0, select bank0
  2026  0508  0867               	movf	___fttol@f1+1,w
  2027  0509  1683               	bsf	3,5	;RP0=1, select bank1
  2028  050A  1303               	bcf	3,6	;RP1=0, select bank1
  2029  050B  00D2               	movwf	(___fttol@lval^(0+128)+1)
  2030  050C  1283               	bcf	3,5	;RP0=0, select bank0
  2031  050D  1303               	bcf	3,6	;RP1=0, select bank0
  2032  050E  0868               	movf	___fttol@f1+2,w
  2033  050F  1683               	bsf	3,5	;RP0=1, select bank1
  2034  0510  1303               	bcf	3,6	;RP1=0, select bank1
  2035  0511  00D3               	movwf	(___fttol@lval^(0+128)+2)
  2036  0512  01D4               	clrf	(___fttol@lval^(0+128)+3)
  2037  0513  308E               	movlw	142
  2038  0514  02D5               	subwf	___fttol@exp1^(0+128),f
  2039  0515  1FD5               	btfss	___fttol@exp1^(0+128),7
  2040  0516  2D39               	goto	l2744
  2041  0517  0855               	movf	___fttol@exp1^(0+128),w
  2042  0518  3A80               	xorlw	128
  2043  0519  3E8F               	addlw	143
  2044  051A  1803               	skipnc
  2045  051B  2D27               	goto	l2742
  2046  051C  3000               	movlw	0
  2047  051D  1283               	bcf	3,5	;RP0=0, select bank0
  2048  051E  1303               	bcf	3,6	;RP1=0, select bank0
  2049  051F  00E9               	movwf	?___fttol+3
  2050  0520  3000               	movlw	0
  2051  0521  00E8               	movwf	?___fttol+2
  2052  0522  3000               	movlw	0
  2053  0523  00E7               	movwf	?___fttol+1
  2054  0524  3000               	movlw	0
  2055  0525  00E6               	movwf	?___fttol
  2056  0526  0008               	return
  2057  0527                     l2742:	
  2058  0527  3001               	movlw	1
  2059  0528                     u3165:	
  2060  0528  1003               	clrc
  2061  0529  1683               	bsf	3,5	;RP0=1, select bank1
  2062  052A  1303               	bcf	3,6	;RP1=0, select bank1
  2063  052B  0CD4               	rrf	(___fttol@lval+3)^(0+128),f
  2064  052C  0CD3               	rrf	(___fttol@lval+2)^(0+128),f
  2065  052D  0CD2               	rrf	(___fttol@lval+1)^(0+128),f
  2066  052E  0CD1               	rrf	___fttol@lval^(0+128),f
  2067  052F  3EFF               	addlw	-1
  2068  0530  1D03               	skipz
  2069  0531  2D28               	goto	u3165
  2070  0532  3001               	movlw	1
  2071  0533  00CC               	movwf	??___fttol^(0+128)
  2072  0534  084C               	movf	??___fttol^(0+128),w
  2073  0535  07D5               	addwf	___fttol@exp1^(0+128),f
  2074  0536  1903               	btfsc	3,2
  2075  0537  2D5A               	goto	l2754
  2076  0538  2D27               	goto	l2742
  2077  0539                     l2744:	
  2078  0539  3018               	movlw	24
  2079  053A  0255               	subwf	___fttol@exp1^(0+128),w
  2080  053B  1C03               	skipc
  2081  053C  2D55               	goto	l2752
  2082  053D  3000               	movlw	0
  2083  053E  1283               	bcf	3,5	;RP0=0, select bank0
  2084  053F  1303               	bcf	3,6	;RP1=0, select bank0
  2085  0540  00E9               	movwf	?___fttol+3
  2086  0541  3000               	movlw	0
  2087  0542  00E8               	movwf	?___fttol+2
  2088  0543  3000               	movlw	0
  2089  0544  00E7               	movwf	?___fttol+1
  2090  0545  3000               	movlw	0
  2091  0546  00E6               	movwf	?___fttol
  2092  0547  0008               	return
  2093  0548                     l2750:	
  2094  0548  3001               	movlw	1
  2095  0549  1683               	bsf	3,5	;RP0=1, select bank1
  2096  054A  1303               	bcf	3,6	;RP1=0, select bank1
  2097  054B  00CC               	movwf	??___fttol^(0+128)
  2098  054C                     u3195:	
  2099  054C  1003               	clrc
  2100  054D  0DD1               	rlf	___fttol@lval^(0+128),f
  2101  054E  0DD2               	rlf	(___fttol@lval+1)^(0+128),f
  2102  054F  0DD3               	rlf	(___fttol@lval+2)^(0+128),f
  2103  0550  0DD4               	rlf	(___fttol@lval+3)^(0+128),f
  2104  0551  0BCC               	decfsz	??___fttol^(0+128),f
  2105  0552  2D4C               	goto	u3195
  2106  0553  3001               	movlw	1
  2107  0554  02D5               	subwf	___fttol@exp1^(0+128),f
  2108  0555                     l2752:	
  2109  0555  1683               	bsf	3,5	;RP0=1, select bank1
  2110  0556  1303               	bcf	3,6	;RP1=0, select bank1
  2111  0557  08D5               	movf	___fttol@exp1^(0+128),f
  2112  0558  1D03               	skipz
  2113  0559  2D48               	goto	l2750
  2114  055A                     l2754:	
  2115  055A  0850               	movf	___fttol@sign1^(0+128),w
  2116  055B  1903               	btfsc	3,2
  2117  055C  2D68               	goto	l2758
  2118  055D  09D1               	comf	___fttol@lval^(0+128),f
  2119  055E  09D2               	comf	(___fttol@lval+1)^(0+128),f
  2120  055F  09D3               	comf	(___fttol@lval+2)^(0+128),f
  2121  0560  09D4               	comf	(___fttol@lval+3)^(0+128),f
  2122  0561  0AD1               	incf	___fttol@lval^(0+128),f
  2123  0562  1903               	skipnz
  2124  0563  0AD2               	incf	(___fttol@lval+1)^(0+128),f
  2125  0564  1903               	skipnz
  2126  0565  0AD3               	incf	(___fttol@lval+2)^(0+128),f
  2127  0566  1903               	skipnz
  2128  0567  0AD4               	incf	(___fttol@lval+3)^(0+128),f
  2129  0568                     l2758:	
  2130  0568  0854               	movf	(___fttol@lval+3)^(0+128),w
  2131  0569  1283               	bcf	3,5	;RP0=0, select bank0
  2132  056A  1303               	bcf	3,6	;RP1=0, select bank0
  2133  056B  00E9               	movwf	?___fttol+3
  2134  056C  1683               	bsf	3,5	;RP0=1, select bank1
  2135  056D  1303               	bcf	3,6	;RP1=0, select bank1
  2136  056E  0853               	movf	(___fttol@lval+2)^(0+128),w
  2137  056F  1283               	bcf	3,5	;RP0=0, select bank0
  2138  0570  1303               	bcf	3,6	;RP1=0, select bank0
  2139  0571  00E8               	movwf	?___fttol+2
  2140  0572  1683               	bsf	3,5	;RP0=1, select bank1
  2141  0573  1303               	bcf	3,6	;RP1=0, select bank1
  2142  0574  0852               	movf	(___fttol@lval+1)^(0+128),w
  2143  0575  1283               	bcf	3,5	;RP0=0, select bank0
  2144  0576  1303               	bcf	3,6	;RP1=0, select bank0
  2145  0577  00E7               	movwf	?___fttol+1
  2146  0578  1683               	bsf	3,5	;RP0=1, select bank1
  2147  0579  1303               	bcf	3,6	;RP1=0, select bank1
  2148  057A  0851               	movf	___fttol@lval^(0+128),w
  2149  057B  1283               	bcf	3,5	;RP0=0, select bank0
  2150  057C  1303               	bcf	3,6	;RP1=0, select bank0
  2151  057D  00E6               	movwf	?___fttol
  2152  057E  0008               	return
  2153  057F                     __end_of___fttol:	
  2154                           
  2155                           	psect	text7
  2156  057F                     __ptext7:	
  2157 ;; *************** function ___ftdiv *****************
  2158 ;; Defined at:
  2159 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\ftdiv.c"
  2160 ;; Parameters:    Size  Location     Type
  2161 ;;  f2              3   54[BANK0 ] float 
  2162 ;;  f1              3   57[BANK0 ] float 
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;  f3              3   65[BANK0 ] float 
  2165 ;;  sign            1   69[BANK0 ] unsigned char 
  2166 ;;  exp             1   68[BANK0 ] unsigned char 
  2167 ;;  cntr            1   64[BANK0 ] unsigned char 
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  3   54[BANK0 ] float 
  2170 ;; Registers used:
  2171 ;;		wreg, status,2, status,0, pclath, cstack
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2177 ;;      Params:         0       6       0       0       0
  2178 ;;      Locals:         0       6       0       0       0
  2179 ;;      Temps:          0       4       0       0       0
  2180 ;;      Totals:         0      16       0       0       0
  2181 ;;Total ram usage:       16 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; Hardware stack levels required when called:    4
  2184 ;; This function calls:
  2185 ;;		___ftpack
  2186 ;; This function is called by:
  2187 ;;		_SensoresAnalogicos
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191                           
  2192                           ;psect for function ___ftdiv
  2193  057F                     ___ftdiv:	
  2194                           
  2195                           ;incstack = 0
  2196                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2197  057F  1283               	bcf	3,5	;RP0=0, select bank0
  2198  0580  1303               	bcf	3,6	;RP1=0, select bank0
  2199  0581  0859               	movf	___ftdiv@f1,w
  2200  0582  00DC               	movwf	??___ftdiv
  2201  0583  085A               	movf	___ftdiv@f1+1,w
  2202  0584  00DD               	movwf	??___ftdiv+1
  2203  0585  085B               	movf	___ftdiv@f1+2,w
  2204  0586  00DE               	movwf	??___ftdiv+2
  2205  0587  1003               	clrc
  2206  0588  0D5D               	rlf	??___ftdiv+1,w
  2207  0589  0D5E               	rlf	??___ftdiv+2,w
  2208  058A  00DF               	movwf	??___ftdiv+3
  2209  058B  085F               	movf	??___ftdiv+3,w
  2210  058C  00E4               	movwf	___ftdiv@exp
  2211  058D  08E4               	movf	___ftdiv@exp,f
  2212  058E  1D03               	skipz
  2213  058F  2D97               	goto	l2316
  2214  0590  3000               	movlw	0
  2215  0591  00D6               	movwf	?___ftdiv
  2216  0592  3000               	movlw	0
  2217  0593  00D7               	movwf	?___ftdiv+1
  2218  0594  3000               	movlw	0
  2219  0595  00D8               	movwf	?___ftdiv+2
  2220  0596  0008               	return
  2221  0597                     l2316:	
  2222  0597  0856               	movf	___ftdiv@f2,w
  2223  0598  00DC               	movwf	??___ftdiv
  2224  0599  0857               	movf	___ftdiv@f2+1,w
  2225  059A  00DD               	movwf	??___ftdiv+1
  2226  059B  0858               	movf	___ftdiv@f2+2,w
  2227  059C  00DE               	movwf	??___ftdiv+2
  2228  059D  1003               	clrc
  2229  059E  0D5D               	rlf	??___ftdiv+1,w
  2230  059F  0D5E               	rlf	??___ftdiv+2,w
  2231  05A0  00DF               	movwf	??___ftdiv+3
  2232  05A1  085F               	movf	??___ftdiv+3,w
  2233  05A2  00E5               	movwf	___ftdiv@sign
  2234  05A3  08E5               	movf	___ftdiv@sign,f
  2235  05A4  1D03               	skipz
  2236  05A5  2DAD               	goto	l2322
  2237  05A6  3000               	movlw	0
  2238  05A7  00D6               	movwf	?___ftdiv
  2239  05A8  3000               	movlw	0
  2240  05A9  00D7               	movwf	?___ftdiv+1
  2241  05AA  3000               	movlw	0
  2242  05AB  00D8               	movwf	?___ftdiv+2
  2243  05AC  0008               	return
  2244  05AD                     l2322:	
  2245  05AD  3000               	movlw	0
  2246  05AE  00E1               	movwf	___ftdiv@f3
  2247  05AF  3000               	movlw	0
  2248  05B0  00E2               	movwf	___ftdiv@f3+1
  2249  05B1  3000               	movlw	0
  2250  05B2  00E3               	movwf	___ftdiv@f3+2
  2251  05B3  3089               	movlw	137
  2252  05B4  0765               	addwf	___ftdiv@sign,w
  2253  05B5  00DC               	movwf	??___ftdiv
  2254  05B6  085C               	movf	??___ftdiv,w
  2255  05B7  02E4               	subwf	___ftdiv@exp,f
  2256  05B8  0859               	movf	___ftdiv@f1,w
  2257  05B9  00DC               	movwf	??___ftdiv
  2258  05BA  085A               	movf	___ftdiv@f1+1,w
  2259  05BB  00DD               	movwf	??___ftdiv+1
  2260  05BC  085B               	movf	___ftdiv@f1+2,w
  2261  05BD  00DE               	movwf	??___ftdiv+2
  2262  05BE  3010               	movlw	16
  2263  05BF                     u2405:	
  2264  05BF  1003               	clrc
  2265  05C0  0CDE               	rrf	??___ftdiv+2,f
  2266  05C1  0CDD               	rrf	??___ftdiv+1,f
  2267  05C2  0CDC               	rrf	??___ftdiv,f
  2268  05C3  3EFF               	addlw	-1
  2269  05C4  1D03               	skipz
  2270  05C5  2DBF               	goto	u2405
  2271  05C6  085C               	movf	??___ftdiv,w
  2272  05C7  00DF               	movwf	??___ftdiv+3
  2273  05C8  085F               	movf	??___ftdiv+3,w
  2274  05C9  00E5               	movwf	___ftdiv@sign
  2275  05CA  0856               	movf	___ftdiv@f2,w
  2276  05CB  00DC               	movwf	??___ftdiv
  2277  05CC  0857               	movf	___ftdiv@f2+1,w
  2278  05CD  00DD               	movwf	??___ftdiv+1
  2279  05CE  0858               	movf	___ftdiv@f2+2,w
  2280  05CF  00DE               	movwf	??___ftdiv+2
  2281  05D0  3010               	movlw	16
  2282  05D1                     u2415:	
  2283  05D1  1003               	clrc
  2284  05D2  0CDE               	rrf	??___ftdiv+2,f
  2285  05D3  0CDD               	rrf	??___ftdiv+1,f
  2286  05D4  0CDC               	rrf	??___ftdiv,f
  2287  05D5  3EFF               	addlw	-1
  2288  05D6  1D03               	skipz
  2289  05D7  2DD1               	goto	u2415
  2290  05D8  085C               	movf	??___ftdiv,w
  2291  05D9  00DF               	movwf	??___ftdiv+3
  2292  05DA  085F               	movf	??___ftdiv+3,w
  2293  05DB  06E5               	xorwf	___ftdiv@sign,f
  2294  05DC  3080               	movlw	128
  2295  05DD  00DC               	movwf	??___ftdiv
  2296  05DE  085C               	movf	??___ftdiv,w
  2297  05DF  05E5               	andwf	___ftdiv@sign,f
  2298  05E0  17DA               	bsf	___ftdiv@f1+1,7
  2299  05E1  30FF               	movlw	255
  2300  05E2  05D9               	andwf	___ftdiv@f1,f
  2301  05E3  30FF               	movlw	255
  2302  05E4  05DA               	andwf	___ftdiv@f1+1,f
  2303  05E5  3000               	movlw	0
  2304  05E6  05DB               	andwf	___ftdiv@f1+2,f
  2305  05E7  17D7               	bsf	___ftdiv@f2+1,7
  2306  05E8  30FF               	movlw	255
  2307  05E9  05D6               	andwf	___ftdiv@f2,f
  2308  05EA  30FF               	movlw	255
  2309  05EB  05D7               	andwf	___ftdiv@f2+1,f
  2310  05EC  3000               	movlw	0
  2311  05ED  05D8               	andwf	___ftdiv@f2+2,f
  2312  05EE  3018               	movlw	24
  2313  05EF  00DC               	movwf	??___ftdiv
  2314  05F0  085C               	movf	??___ftdiv,w
  2315  05F1  00E0               	movwf	___ftdiv@cntr
  2316  05F2                     l2336:	
  2317  05F2  3001               	movlw	1
  2318  05F3                     u2425:	
  2319  05F3  1003               	clrc
  2320  05F4  0DE1               	rlf	___ftdiv@f3,f
  2321  05F5  0DE2               	rlf	___ftdiv@f3+1,f
  2322  05F6  0DE3               	rlf	___ftdiv@f3+2,f
  2323  05F7  3EFF               	addlw	-1
  2324  05F8  1D03               	skipz
  2325  05F9  2DF3               	goto	u2425
  2326  05FA  0858               	movf	___ftdiv@f2+2,w
  2327  05FB  025B               	subwf	___ftdiv@f1+2,w
  2328  05FC  1D03               	skipz
  2329  05FD  2E04               	goto	u2435
  2330  05FE  0857               	movf	___ftdiv@f2+1,w
  2331  05FF  025A               	subwf	___ftdiv@f1+1,w
  2332  0600  1D03               	skipz
  2333  0601  2E04               	goto	u2435
  2334  0602  0856               	movf	___ftdiv@f2,w
  2335  0603  0259               	subwf	___ftdiv@f1,w
  2336  0604                     u2435:	
  2337  0604  1C03               	skipc
  2338  0605  2E11               	goto	l2344
  2339  0606  0856               	movf	___ftdiv@f2,w
  2340  0607  02D9               	subwf	___ftdiv@f1,f
  2341  0608  0857               	movf	___ftdiv@f2+1,w
  2342  0609  1C03               	skipc
  2343  060A  0F57               	incfsz	___ftdiv@f2+1,w
  2344  060B  02DA               	subwf	___ftdiv@f1+1,f
  2345  060C  0858               	movf	___ftdiv@f2+2,w
  2346  060D  1C03               	skipc
  2347  060E  0A58               	incf	___ftdiv@f2+2,w
  2348  060F  02DB               	subwf	___ftdiv@f1+2,f
  2349  0610  1461               	bsf	___ftdiv@f3,0
  2350  0611                     l2344:	
  2351  0611  3001               	movlw	1
  2352  0612                     u2445:	
  2353  0612  1003               	clrc
  2354  0613  0DD9               	rlf	___ftdiv@f1,f
  2355  0614  0DDA               	rlf	___ftdiv@f1+1,f
  2356  0615  0DDB               	rlf	___ftdiv@f1+2,f
  2357  0616  3EFF               	addlw	-1
  2358  0617  1D03               	skipz
  2359  0618  2E12               	goto	u2445
  2360  0619  3001               	movlw	1
  2361  061A  02E0               	subwf	___ftdiv@cntr,f
  2362  061B  1D03               	btfss	3,2
  2363  061C  2DF2               	goto	l2336
  2364  061D  0861               	movf	___ftdiv@f3,w
  2365  061E  00A5               	movwf	?___ftpack
  2366  061F  0862               	movf	___ftdiv@f3+1,w
  2367  0620  00A6               	movwf	?___ftpack+1
  2368  0621  0863               	movf	___ftdiv@f3+2,w
  2369  0622  00A7               	movwf	?___ftpack+2
  2370  0623  0864               	movf	___ftdiv@exp,w
  2371  0624  00DC               	movwf	??___ftdiv
  2372  0625  085C               	movf	??___ftdiv,w
  2373  0626  00A8               	movwf	?___ftpack+3
  2374  0627  0865               	movf	___ftdiv@sign,w
  2375  0628  00DD               	movwf	??___ftdiv+1
  2376  0629  085D               	movf	??___ftdiv+1,w
  2377  062A  00A9               	movwf	?___ftpack+4
  2378  062B  120A  158A  2796   	fcall	___ftpack
  2379  062E  1283               	bcf	3,5	;RP0=0, select bank0
  2380  062F  1303               	bcf	3,6	;RP1=0, select bank0
  2381  0630  0825               	movf	?___ftpack,w
  2382  0631  00D6               	movwf	?___ftdiv
  2383  0632  0826               	movf	?___ftpack+1,w
  2384  0633  00D7               	movwf	?___ftdiv+1
  2385  0634  0827               	movf	?___ftpack+2,w
  2386  0635  00D8               	movwf	?___ftdiv+2
  2387  0636  0008               	return
  2388  0637                     __end_of___ftdiv:	
  2389                           
  2390                           	psect	text8
  2391  0D21                     __ptext8:	
  2392 ;; *************** function ___awmod *****************
  2393 ;; Defined at:
  2394 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\awmod.c"
  2395 ;; Parameters:    Size  Location     Type
  2396 ;;  divisor         2    5[BANK0 ] int 
  2397 ;;  dividend        2    7[BANK0 ] int 
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;  sign            1   11[BANK0 ] unsigned char 
  2400 ;;  counter         1   10[BANK0 ] unsigned char 
  2401 ;; Return value:  Size  Location     Type
  2402 ;;                  2    5[BANK0 ] int 
  2403 ;; Registers used:
  2404 ;;		wreg, status,2, status,0
  2405 ;; Tracked objects:
  2406 ;;		On entry : 0/0
  2407 ;;		On exit  : 0/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2410 ;;      Params:         0       4       0       0       0
  2411 ;;      Locals:         0       2       0       0       0
  2412 ;;      Temps:          0       1       0       0       0
  2413 ;;      Totals:         0       7       0       0       0
  2414 ;;Total ram usage:        7 bytes
  2415 ;; Hardware stack levels used:    1
  2416 ;; Hardware stack levels required when called:    3
  2417 ;; This function calls:
  2418 ;;		Nothing
  2419 ;; This function is called by:
  2420 ;;		_SensoresAnalogicos
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           
  2425                           ;psect for function ___awmod
  2426  0D21                     ___awmod:	
  2427                           
  2428                           ;incstack = 0
  2429                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2430  0D21  1283               	bcf	3,5	;RP0=0, select bank0
  2431  0D22  1303               	bcf	3,6	;RP1=0, select bank0
  2432  0D23  01AB               	clrf	___awmod@sign
  2433  0D24  1FA8               	btfss	___awmod@dividend+1,7
  2434  0D25  2D2D               	goto	l2208
  2435  0D26  09A7               	comf	___awmod@dividend,f
  2436  0D27  09A8               	comf	___awmod@dividend+1,f
  2437  0D28  0AA7               	incf	___awmod@dividend,f
  2438  0D29  1903               	skipnz
  2439  0D2A  0AA8               	incf	___awmod@dividend+1,f
  2440  0D2B  01AB               	clrf	___awmod@sign
  2441  0D2C  0AAB               	incf	___awmod@sign,f
  2442  0D2D                     l2208:	
  2443  0D2D  1FA6               	btfss	___awmod@divisor+1,7
  2444  0D2E  2D34               	goto	l2212
  2445  0D2F  09A5               	comf	___awmod@divisor,f
  2446  0D30  09A6               	comf	___awmod@divisor+1,f
  2447  0D31  0AA5               	incf	___awmod@divisor,f
  2448  0D32  1903               	skipnz
  2449  0D33  0AA6               	incf	___awmod@divisor+1,f
  2450  0D34                     l2212:	
  2451  0D34  0826               	movf	___awmod@divisor+1,w
  2452  0D35  0425               	iorwf	___awmod@divisor,w
  2453  0D36  1903               	skipnz
  2454  0D37  2D61               	goto	l2230
  2455  0D38  01AA               	clrf	___awmod@counter
  2456  0D39  0AAA               	incf	___awmod@counter,f
  2457  0D3A                     l2220:	
  2458  0D3A  1BA6               	btfsc	___awmod@divisor+1,7
  2459  0D3B  2D48               	goto	l2222
  2460  0D3C  3001               	movlw	1
  2461  0D3D                     u2085:	
  2462  0D3D  1003               	clrc
  2463  0D3E  0DA5               	rlf	___awmod@divisor,f
  2464  0D3F  0DA6               	rlf	___awmod@divisor+1,f
  2465  0D40  3EFF               	addlw	-1
  2466  0D41  1D03               	skipz
  2467  0D42  2D3D               	goto	u2085
  2468  0D43  3001               	movlw	1
  2469  0D44  00A9               	movwf	??___awmod
  2470  0D45  0829               	movf	??___awmod,w
  2471  0D46  07AA               	addwf	___awmod@counter,f
  2472  0D47  2D3A               	goto	l2220
  2473  0D48                     l2222:	
  2474  0D48  0826               	movf	___awmod@divisor+1,w
  2475  0D49  0228               	subwf	___awmod@dividend+1,w
  2476  0D4A  1D03               	skipz
  2477  0D4B  2D4E               	goto	u2105
  2478  0D4C  0825               	movf	___awmod@divisor,w
  2479  0D4D  0227               	subwf	___awmod@dividend,w
  2480  0D4E                     u2105:	
  2481  0D4E  1C03               	skipc
  2482  0D4F  2D56               	goto	l2226
  2483  0D50  0825               	movf	___awmod@divisor,w
  2484  0D51  02A7               	subwf	___awmod@dividend,f
  2485  0D52  0826               	movf	___awmod@divisor+1,w
  2486  0D53  1C03               	skipc
  2487  0D54  03A8               	decf	___awmod@dividend+1,f
  2488  0D55  02A8               	subwf	___awmod@dividend+1,f
  2489  0D56                     l2226:	
  2490  0D56  3001               	movlw	1
  2491  0D57                     u2115:	
  2492  0D57  1003               	clrc
  2493  0D58  0CA6               	rrf	___awmod@divisor+1,f
  2494  0D59  0CA5               	rrf	___awmod@divisor,f
  2495  0D5A  3EFF               	addlw	-1
  2496  0D5B  1D03               	skipz
  2497  0D5C  2D57               	goto	u2115
  2498  0D5D  3001               	movlw	1
  2499  0D5E  02AA               	subwf	___awmod@counter,f
  2500  0D5F  1D03               	btfss	3,2
  2501  0D60  2D48               	goto	l2222
  2502  0D61                     l2230:	
  2503  0D61  082B               	movf	___awmod@sign,w
  2504  0D62  1903               	btfsc	3,2
  2505  0D63  2D69               	goto	l2234
  2506  0D64  09A7               	comf	___awmod@dividend,f
  2507  0D65  09A8               	comf	___awmod@dividend+1,f
  2508  0D66  0AA7               	incf	___awmod@dividend,f
  2509  0D67  1903               	skipnz
  2510  0D68  0AA8               	incf	___awmod@dividend+1,f
  2511  0D69                     l2234:	
  2512  0D69  0828               	movf	___awmod@dividend+1,w
  2513  0D6A  01A6               	clrf	?___awmod+1
  2514  0D6B  07A6               	addwf	?___awmod+1,f
  2515  0D6C  0827               	movf	___awmod@dividend,w
  2516  0D6D  01A5               	clrf	?___awmod
  2517  0D6E  07A5               	addwf	?___awmod,f
  2518  0D6F  0008               	return
  2519  0D70                     __end_of___awmod:	
  2520                           
  2521                           	psect	text9
  2522  0C48                     __ptext9:	
  2523 ;; *************** function ___altoft *****************
  2524 ;; Defined at:
  2525 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\altoft.c"
  2526 ;; Parameters:    Size  Location     Type
  2527 ;;  c               4   20[BANK0 ] long 
  2528 ;; Auto vars:     Size  Location     Type
  2529 ;;  sign            1   27[BANK0 ] unsigned char 
  2530 ;;  exp             1   26[BANK0 ] unsigned char 
  2531 ;; Return value:  Size  Location     Type
  2532 ;;                  3   20[BANK0 ] float 
  2533 ;; Registers used:
  2534 ;;		wreg, status,2, status,0, pclath, cstack
  2535 ;; Tracked objects:
  2536 ;;		On entry : 0/0
  2537 ;;		On exit  : 0/0
  2538 ;;		Unchanged: 0/0
  2539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2540 ;;      Params:         0       4       0       0       0
  2541 ;;      Locals:         0       2       0       0       0
  2542 ;;      Temps:          0       2       0       0       0
  2543 ;;      Totals:         0       8       0       0       0
  2544 ;;Total ram usage:        8 bytes
  2545 ;; Hardware stack levels used:    1
  2546 ;; Hardware stack levels required when called:    4
  2547 ;; This function calls:
  2548 ;;		___ftpack
  2549 ;; This function is called by:
  2550 ;;		_SensoresAnalogicos
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           
  2555                           ;psect for function ___altoft
  2556  0C48                     ___altoft:	
  2557                           
  2558                           ;incstack = 0
  2559                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  2560  0C48  1283               	bcf	3,5	;RP0=0, select bank0
  2561  0C49  1303               	bcf	3,6	;RP1=0, select bank0
  2562  0C4A  01BB               	clrf	___altoft@sign
  2563  0C4B  308E               	movlw	142
  2564  0C4C  00B8               	movwf	??___altoft
  2565  0C4D  0838               	movf	??___altoft,w
  2566  0C4E  00BA               	movwf	___altoft@exp
  2567  0C4F  1FB7               	btfss	___altoft@c+3,7
  2568  0C50  2C5E               	goto	l2194
  2569  0C51  09B4               	comf	___altoft@c,f
  2570  0C52  09B5               	comf	___altoft@c+1,f
  2571  0C53  09B6               	comf	___altoft@c+2,f
  2572  0C54  09B7               	comf	___altoft@c+3,f
  2573  0C55  0AB4               	incf	___altoft@c,f
  2574  0C56  1903               	skipnz
  2575  0C57  0AB5               	incf	___altoft@c+1,f
  2576  0C58  1903               	skipnz
  2577  0C59  0AB6               	incf	___altoft@c+2,f
  2578  0C5A  1903               	skipnz
  2579  0C5B  0AB7               	incf	___altoft@c+3,f
  2580  0C5C  01BB               	clrf	___altoft@sign
  2581  0C5D  0ABB               	incf	___altoft@sign,f
  2582  0C5E                     l2194:	
  2583  0C5E  30FF               	movlw	255
  2584  0C5F  0537               	andwf	___altoft@c+3,w
  2585  0C60  1903               	btfsc	3,2
  2586  0C61  2C70               	goto	l2196
  2587  0C62  3001               	movlw	1
  2588  0C63                     u2035:	
  2589  0C63  1003               	clrc
  2590  0C64  0CB7               	rrf	___altoft@c+3,f
  2591  0C65  0CB6               	rrf	___altoft@c+2,f
  2592  0C66  0CB5               	rrf	___altoft@c+1,f
  2593  0C67  0CB4               	rrf	___altoft@c,f
  2594  0C68  3EFF               	addlw	-1
  2595  0C69  1D03               	skipz
  2596  0C6A  2C63               	goto	u2035
  2597  0C6B  3001               	movlw	1
  2598  0C6C  00B8               	movwf	??___altoft
  2599  0C6D  0838               	movf	??___altoft,w
  2600  0C6E  07BA               	addwf	___altoft@exp,f
  2601  0C6F  2C5E               	goto	l2194
  2602  0C70                     l2196:	
  2603  0C70  0834               	movf	___altoft@c,w
  2604  0C71  00A5               	movwf	?___ftpack
  2605  0C72  0835               	movf	___altoft@c+1,w
  2606  0C73  00A6               	movwf	?___ftpack+1
  2607  0C74  0836               	movf	___altoft@c+2,w
  2608  0C75  00A7               	movwf	?___ftpack+2
  2609  0C76  083A               	movf	___altoft@exp,w
  2610  0C77  00B8               	movwf	??___altoft
  2611  0C78  0838               	movf	??___altoft,w
  2612  0C79  00A8               	movwf	?___ftpack+3
  2613  0C7A  083B               	movf	___altoft@sign,w
  2614  0C7B  00B9               	movwf	??___altoft+1
  2615  0C7C  0839               	movf	??___altoft+1,w
  2616  0C7D  00A9               	movwf	?___ftpack+4
  2617  0C7E  120A  158A  2796   	fcall	___ftpack
  2618  0C81  1283               	bcf	3,5	;RP0=0, select bank0
  2619  0C82  1303               	bcf	3,6	;RP1=0, select bank0
  2620  0C83  0825               	movf	?___ftpack,w
  2621  0C84  00B4               	movwf	?___altoft
  2622  0C85  0826               	movf	?___ftpack+1,w
  2623  0C86  00B5               	movwf	?___altoft+1
  2624  0C87  0827               	movf	?___ftpack+2,w
  2625  0C88  00B6               	movwf	?___altoft+2
  2626  0C89  0008               	return
  2627  0C8A                     __end_of___altoft:	
  2628                           
  2629                           	psect	text10
  2630  0637                     __ptext10:	
  2631 ;; *************** function ___aldiv *****************
  2632 ;; Defined at:
  2633 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\aldiv.c"
  2634 ;; Parameters:    Size  Location     Type
  2635 ;;  divisor         4    5[BANK0 ] long 
  2636 ;;  dividend        4    9[BANK0 ] long 
  2637 ;; Auto vars:     Size  Location     Type
  2638 ;;  quotient        4   16[BANK0 ] long 
  2639 ;;  sign            1   15[BANK0 ] unsigned char 
  2640 ;;  counter         1   14[BANK0 ] unsigned char 
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  4    5[BANK0 ] long 
  2643 ;; Registers used:
  2644 ;;		wreg, status,2, status,0
  2645 ;; Tracked objects:
  2646 ;;		On entry : 0/0
  2647 ;;		On exit  : 0/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2650 ;;      Params:         0       8       0       0       0
  2651 ;;      Locals:         0       6       0       0       0
  2652 ;;      Temps:          0       1       0       0       0
  2653 ;;      Totals:         0      15       0       0       0
  2654 ;;Total ram usage:       15 bytes
  2655 ;; Hardware stack levels used:    1
  2656 ;; Hardware stack levels required when called:    3
  2657 ;; This function calls:
  2658 ;;		Nothing
  2659 ;; This function is called by:
  2660 ;;		_SensoresAnalogicos
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664                           
  2665                           ;psect for function ___aldiv
  2666  0637                     ___aldiv:	
  2667                           
  2668                           ;incstack = 0
  2669                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2670  0637  1283               	bcf	3,5	;RP0=0, select bank0
  2671  0638  1303               	bcf	3,6	;RP1=0, select bank0
  2672  0639  01AF               	clrf	___aldiv@sign
  2673  063A  1FA8               	btfss	___aldiv@divisor+3,7
  2674  063B  2E49               	goto	l397
  2675  063C  09A5               	comf	___aldiv@divisor,f
  2676  063D  09A6               	comf	___aldiv@divisor+1,f
  2677  063E  09A7               	comf	___aldiv@divisor+2,f
  2678  063F  09A8               	comf	___aldiv@divisor+3,f
  2679  0640  0AA5               	incf	___aldiv@divisor,f
  2680  0641  1903               	skipnz
  2681  0642  0AA6               	incf	___aldiv@divisor+1,f
  2682  0643  1903               	skipnz
  2683  0644  0AA7               	incf	___aldiv@divisor+2,f
  2684  0645  1903               	skipnz
  2685  0646  0AA8               	incf	___aldiv@divisor+3,f
  2686  0647  01AF               	clrf	___aldiv@sign
  2687  0648  0AAF               	incf	___aldiv@sign,f
  2688  0649                     l397:	
  2689  0649  1FAC               	btfss	___aldiv@dividend+3,7
  2690  064A  2E5A               	goto	l2154
  2691  064B  09A9               	comf	___aldiv@dividend,f
  2692  064C  09AA               	comf	___aldiv@dividend+1,f
  2693  064D  09AB               	comf	___aldiv@dividend+2,f
  2694  064E  09AC               	comf	___aldiv@dividend+3,f
  2695  064F  0AA9               	incf	___aldiv@dividend,f
  2696  0650  1903               	skipnz
  2697  0651  0AAA               	incf	___aldiv@dividend+1,f
  2698  0652  1903               	skipnz
  2699  0653  0AAB               	incf	___aldiv@dividend+2,f
  2700  0654  1903               	skipnz
  2701  0655  0AAC               	incf	___aldiv@dividend+3,f
  2702  0656  3001               	movlw	1
  2703  0657  00AD               	movwf	??___aldiv
  2704  0658  082D               	movf	??___aldiv,w
  2705  0659  06AF               	xorwf	___aldiv@sign,f
  2706  065A                     l2154:	
  2707  065A  3000               	movlw	0
  2708  065B  00B3               	movwf	___aldiv@quotient+3
  2709  065C  3000               	movlw	0
  2710  065D  00B2               	movwf	___aldiv@quotient+2
  2711  065E  3000               	movlw	0
  2712  065F  00B1               	movwf	___aldiv@quotient+1
  2713  0660  3000               	movlw	0
  2714  0661  00B0               	movwf	___aldiv@quotient
  2715  0662  0828               	movf	___aldiv@divisor+3,w
  2716  0663  0427               	iorwf	___aldiv@divisor+2,w
  2717  0664  0426               	iorwf	___aldiv@divisor+1,w
  2718  0665  0425               	iorwf	___aldiv@divisor,w
  2719  0666  1903               	skipnz
  2720  0667  2EAF               	goto	l2176
  2721  0668  01AE               	clrf	___aldiv@counter
  2722  0669  0AAE               	incf	___aldiv@counter,f
  2723  066A                     l2162:	
  2724  066A  1BA8               	btfsc	___aldiv@divisor+3,7
  2725  066B  2E7A               	goto	l2164
  2726  066C  3001               	movlw	1
  2727  066D  00AD               	movwf	??___aldiv
  2728  066E                     u1955:	
  2729  066E  1003               	clrc
  2730  066F  0DA5               	rlf	___aldiv@divisor,f
  2731  0670  0DA6               	rlf	___aldiv@divisor+1,f
  2732  0671  0DA7               	rlf	___aldiv@divisor+2,f
  2733  0672  0DA8               	rlf	___aldiv@divisor+3,f
  2734  0673  0BAD               	decfsz	??___aldiv,f
  2735  0674  2E6E               	goto	u1955
  2736  0675  3001               	movlw	1
  2737  0676  00AD               	movwf	??___aldiv
  2738  0677  082D               	movf	??___aldiv,w
  2739  0678  07AE               	addwf	___aldiv@counter,f
  2740  0679  2E6A               	goto	l2162
  2741  067A                     l2164:	
  2742  067A  3001               	movlw	1
  2743  067B  00AD               	movwf	??___aldiv
  2744  067C                     u1975:	
  2745  067C  1003               	clrc
  2746  067D  0DB0               	rlf	___aldiv@quotient,f
  2747  067E  0DB1               	rlf	___aldiv@quotient+1,f
  2748  067F  0DB2               	rlf	___aldiv@quotient+2,f
  2749  0680  0DB3               	rlf	___aldiv@quotient+3,f
  2750  0681  0BAD               	decfsz	??___aldiv,f
  2751  0682  2E7C               	goto	u1975
  2752  0683  0828               	movf	___aldiv@divisor+3,w
  2753  0684  022C               	subwf	___aldiv@dividend+3,w
  2754  0685  1D03               	skipz
  2755  0686  2E91               	goto	u1985
  2756  0687  0827               	movf	___aldiv@divisor+2,w
  2757  0688  022B               	subwf	___aldiv@dividend+2,w
  2758  0689  1D03               	skipz
  2759  068A  2E91               	goto	u1985
  2760  068B  0826               	movf	___aldiv@divisor+1,w
  2761  068C  022A               	subwf	___aldiv@dividend+1,w
  2762  068D  1D03               	skipz
  2763  068E  2E91               	goto	u1985
  2764  068F  0825               	movf	___aldiv@divisor,w
  2765  0690  0229               	subwf	___aldiv@dividend,w
  2766  0691                     u1985:	
  2767  0691  1C03               	skipc
  2768  0692  2EA2               	goto	l2172
  2769  0693  0825               	movf	___aldiv@divisor,w
  2770  0694  02A9               	subwf	___aldiv@dividend,f
  2771  0695  0826               	movf	___aldiv@divisor+1,w
  2772  0696  1C03               	skipc
  2773  0697  0F26               	incfsz	___aldiv@divisor+1,w
  2774  0698  02AA               	subwf	___aldiv@dividend+1,f
  2775  0699  0827               	movf	___aldiv@divisor+2,w
  2776  069A  1C03               	skipc
  2777  069B  0F27               	incfsz	___aldiv@divisor+2,w
  2778  069C  02AB               	subwf	___aldiv@dividend+2,f
  2779  069D  0828               	movf	___aldiv@divisor+3,w
  2780  069E  1C03               	skipc
  2781  069F  0F28               	incfsz	___aldiv@divisor+3,w
  2782  06A0  02AC               	subwf	___aldiv@dividend+3,f
  2783  06A1  1430               	bsf	___aldiv@quotient,0
  2784  06A2                     l2172:	
  2785  06A2  3001               	movlw	1
  2786  06A3                     u1995:	
  2787  06A3  1003               	clrc
  2788  06A4  0CA8               	rrf	___aldiv@divisor+3,f
  2789  06A5  0CA7               	rrf	___aldiv@divisor+2,f
  2790  06A6  0CA6               	rrf	___aldiv@divisor+1,f
  2791  06A7  0CA5               	rrf	___aldiv@divisor,f
  2792  06A8  3EFF               	addlw	-1
  2793  06A9  1D03               	skipz
  2794  06AA  2EA3               	goto	u1995
  2795  06AB  3001               	movlw	1
  2796  06AC  02AE               	subwf	___aldiv@counter,f
  2797  06AD  1D03               	btfss	3,2
  2798  06AE  2E7A               	goto	l2164
  2799  06AF                     l2176:	
  2800  06AF  082F               	movf	___aldiv@sign,w
  2801  06B0  1903               	btfsc	3,2
  2802  06B1  2EBD               	goto	l2180
  2803  06B2  09B0               	comf	___aldiv@quotient,f
  2804  06B3  09B1               	comf	___aldiv@quotient+1,f
  2805  06B4  09B2               	comf	___aldiv@quotient+2,f
  2806  06B5  09B3               	comf	___aldiv@quotient+3,f
  2807  06B6  0AB0               	incf	___aldiv@quotient,f
  2808  06B7  1903               	skipnz
  2809  06B8  0AB1               	incf	___aldiv@quotient+1,f
  2810  06B9  1903               	skipnz
  2811  06BA  0AB2               	incf	___aldiv@quotient+2,f
  2812  06BB  1903               	skipnz
  2813  06BC  0AB3               	incf	___aldiv@quotient+3,f
  2814  06BD                     l2180:	
  2815  06BD  0833               	movf	___aldiv@quotient+3,w
  2816  06BE  00A8               	movwf	?___aldiv+3
  2817  06BF  0832               	movf	___aldiv@quotient+2,w
  2818  06C0  00A7               	movwf	?___aldiv+2
  2819  06C1  0831               	movf	___aldiv@quotient+1,w
  2820  06C2  00A6               	movwf	?___aldiv+1
  2821  06C3  0830               	movf	___aldiv@quotient,w
  2822  06C4  00A5               	movwf	?___aldiv
  2823  06C5  0008               	return
  2824  06C6                     __end_of___aldiv:	
  2825                           
  2826                           	psect	text11
  2827  01B7                     __ptext11:	
  2828 ;; *************** function _sqrt *****************
  2829 ;; Defined at:
  2830 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\sqrt.c"
  2831 ;; Parameters:    Size  Location     Type
  2832 ;;  y               3   32[BANK0 ] long 
  2833 ;; Auto vars:     Size  Location     Type
  2834 ;;  x               3   51[BANK0 ] long 
  2835 ;;  q               3   48[BANK0 ] long 
  2836 ;;  z               3   44[BANK0 ] long 
  2837 ;;  og              3   41[BANK0 ] long 
  2838 ;;  i               1   47[BANK0 ] unsigned char 
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  3   32[BANK0 ] unsigned char 
  2841 ;; Registers used:
  2842 ;;		wreg, status,2, status,0, pclath, cstack
  2843 ;; Tracked objects:
  2844 ;;		On entry : 0/0
  2845 ;;		On exit  : 0/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2848 ;;      Params:         0       3       0       0       0
  2849 ;;      Locals:         0      13       0       0       0
  2850 ;;      Temps:          0       6       0       0       0
  2851 ;;      Totals:         0      22       0       0       0
  2852 ;;Total ram usage:       22 bytes
  2853 ;; Hardware stack levels used:    1
  2854 ;; Hardware stack levels required when called:    6
  2855 ;; This function calls:
  2856 ;;		___ftge
  2857 ;;		___ftmul
  2858 ;;		___ftsub
  2859 ;; This function is called by:
  2860 ;;		_SensoresAnalogicos
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           
  2865                           ;psect for function _sqrt
  2866  01B7                     _sqrt:	
  2867                           
  2868                           ;incstack = 0
  2869                           ; Regs used in _sqrt: [wreg+status,2+status,0+pclath+cstack]
  2870  01B7  3000               	movlw	0
  2871  01B8  1283               	bcf	3,5	;RP0=0, select bank0
  2872  01B9  1303               	bcf	3,6	;RP1=0, select bank0
  2873  01BA  00A5               	movwf	?___ftge
  2874  01BB  3000               	movlw	0
  2875  01BC  00A6               	movwf	?___ftge+1
  2876  01BD  3000               	movlw	0
  2877  01BE  00A7               	movwf	?___ftge+2
  2878  01BF  0840               	movf	sqrt@y,w
  2879  01C0  00A8               	movwf	?___ftge+3
  2880  01C1  0841               	movf	sqrt@y+1,w
  2881  01C2  00A9               	movwf	?___ftge+4
  2882  01C3  0842               	movf	sqrt@y+2,w
  2883  01C4  00AA               	movwf	?___ftge+5
  2884  01C5  120A  158A  2737   	fcall	___ftge
      +       120A  118A         
  2885  01CA  1C03               	btfss	3,0
  2886  01CB  29F0               	goto	l2064
  2887  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  2888  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  2889  01CE  0840               	movf	sqrt@y,w
  2890  01CF  00A5               	movwf	?___ftge
  2891  01D0  0841               	movf	sqrt@y+1,w
  2892  01D1  00A6               	movwf	?___ftge+1
  2893  01D2  0842               	movf	sqrt@y+2,w
  2894  01D3  00A7               	movwf	?___ftge+2
  2895  01D4  3000               	movlw	0
  2896  01D5  00A8               	movwf	?___ftge+3
  2897  01D6  3000               	movlw	0
  2898  01D7  00A9               	movwf	?___ftge+4
  2899  01D8  3000               	movlw	0
  2900  01D9  00AA               	movwf	?___ftge+5
  2901  01DA  120A  158A  2737   	fcall	___ftge
      +       120A  118A         
  2902  01DF  1803               	btfsc	3,0
  2903  01E0  29E7               	goto	l711
  2904  01E1  3021               	movlw	33
  2905  01E2  1683               	bsf	3,5	;RP0=1, select bank1
  2906  01E3  1303               	bcf	3,6	;RP1=0, select bank1
  2907  01E4  00B1               	movwf	_errno^(0+128)
  2908  01E5  3000               	movlw	0
  2909  01E6  00B2               	movwf	(_errno^(0+128)+1)
  2910  01E7                     l711:	
  2911  01E7  3000               	movlw	0
  2912  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  2913  01E9  1303               	bcf	3,6	;RP1=0, select bank0
  2914  01EA  00C0               	movwf	?_sqrt
  2915  01EB  3000               	movlw	0
  2916  01EC  00C1               	movwf	?_sqrt+1
  2917  01ED  3000               	movlw	0
  2918  01EE  00C2               	movwf	?_sqrt+2
  2919  01EF  0008               	return
  2920  01F0                     l2064:	
  2921  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  2922  01F1  1303               	bcf	3,6	;RP1=0, select bank0
  2923  01F2  0840               	movf	sqrt@y,w
  2924  01F3  00CC               	movwf	sqrt@z
  2925  01F4  0841               	movf	sqrt@y+1,w
  2926  01F5  00CD               	movwf	sqrt@z+1
  2927  01F6  0842               	movf	sqrt@y+2,w
  2928  01F7  00CE               	movwf	sqrt@z+2
  2929  01F8  30C8               	movlw	200
  2930  01F9  00C3               	movwf	??_sqrt
  2931  01FA  306E               	movlw	110
  2932  01FB  00C4               	movwf	??_sqrt+1
  2933  01FC  30BE               	movlw	190
  2934  01FD  00C5               	movwf	??_sqrt+2
  2935  01FE  0940               	comf	sqrt@y,w
  2936  01FF  00C6               	movwf	??_sqrt+3
  2937  0200  0941               	comf	sqrt@y+1,w
  2938  0201  00C7               	movwf	??_sqrt+4
  2939  0202  0942               	comf	sqrt@y+2,w
  2940  0203  00C8               	movwf	??_sqrt+5
  2941  0204  0AC6               	incf	??_sqrt+3,f
  2942  0205  1903               	skipnz
  2943  0206  0AC7               	incf	??_sqrt+4,f
  2944  0207  1903               	skipnz
  2945  0208  0AC8               	incf	??_sqrt+5,f
  2946  0209  0846               	movf	??_sqrt+3,w
  2947  020A  07C3               	addwf	??_sqrt,f
  2948  020B  0847               	movf	??_sqrt+4,w
  2949  020C  1803               	skipnc
  2950  020D  0F47               	incfsz	??_sqrt+4,w
  2951  020E  2A10               	goto	u1771
  2952  020F  2A11               	goto	u1772
  2953  0210                     u1771:	
  2954  0210  07C4               	addwf	??_sqrt+1,f
  2955  0211                     u1772:	
  2956  0211  0848               	movf	??_sqrt+5,w
  2957  0212  1803               	skipnc
  2958  0213  0F48               	incfsz	??_sqrt+5,w
  2959  0214  2A16               	goto	u1773
  2960  0215  2A17               	goto	u1774
  2961  0216                     u1773:	
  2962  0216  07C5               	addwf	??_sqrt+2,f
  2963  0217                     u1774:	
  2964  0217  0843               	movf	??_sqrt,w
  2965  0218  00D3               	movwf	sqrt@x
  2966  0219  0844               	movf	??_sqrt+1,w
  2967  021A  00D4               	movwf	sqrt@x+1
  2968  021B  0845               	movf	??_sqrt+2,w
  2969  021C  00D5               	movwf	sqrt@x+2
  2970  021D  3001               	movlw	1
  2971  021E                     u1785:	
  2972  021E  1003               	clrc
  2973  021F  0CD5               	rrf	sqrt@x+2,f
  2974  0220  0CD4               	rrf	sqrt@x+1,f
  2975  0221  0CD3               	rrf	sqrt@x,f
  2976  0222  3EFF               	addlw	-1
  2977  0223  1D03               	skipz
  2978  0224  2A1E               	goto	u1785
  2979  0225  3000               	movlw	0
  2980  0226  00C3               	movwf	??_sqrt
  2981  0227  3080               	movlw	128
  2982  0228  00C4               	movwf	??_sqrt+1
  2983  0229  3000               	movlw	0
  2984  022A  00C5               	movwf	??_sqrt+2
  2985  022B  0843               	movf	??_sqrt,w
  2986  022C  02CC               	subwf	sqrt@z,f
  2987  022D  0844               	movf	??_sqrt+1,w
  2988  022E  1C03               	skipc
  2989  022F  0F44               	incfsz	??_sqrt+1,w
  2990  0230  2A32               	goto	u1795
  2991  0231  2A33               	goto	u1796
  2992  0232                     u1795:	
  2993  0232  02CD               	subwf	sqrt@z+1,f
  2994  0233                     u1796:	
  2995  0233  0845               	movf	??_sqrt+2,w
  2996  0234  1C03               	skipc
  2997  0235  0A45               	incf	??_sqrt+2,w
  2998  0236  02CE               	subwf	sqrt@z+2,f
  2999  0237  3004               	movlw	4
  3000  0238  00C3               	movwf	??_sqrt
  3001  0239  0843               	movf	??_sqrt,w
  3002  023A  00CF               	movwf	sqrt@i
  3003  023B                     l713:	
  3004  023B  0853               	movf	sqrt@x,w
  3005  023C  00C9               	movwf	sqrt@og
  3006  023D  0854               	movf	sqrt@x+1,w
  3007  023E  00CA               	movwf	sqrt@og+1
  3008  023F  0855               	movf	sqrt@x+2,w
  3009  0240  00CB               	movwf	sqrt@og+2
  3010  0241  084C               	movf	sqrt@z,w
  3011  0242  00AD               	movwf	?___ftmul
  3012  0243  084D               	movf	sqrt@z+1,w
  3013  0244  00AE               	movwf	?___ftmul+1
  3014  0245  084E               	movf	sqrt@z+2,w
  3015  0246  00AF               	movwf	?___ftmul+2
  3016  0247  0853               	movf	sqrt@x,w
  3017  0248  00B0               	movwf	?___ftmul+3
  3018  0249  0854               	movf	sqrt@x+1,w
  3019  024A  00B1               	movwf	?___ftmul+4
  3020  024B  0855               	movf	sqrt@x+2,w
  3021  024C  00B2               	movwf	?___ftmul+5
  3022  024D  120A  118A  23E3   	fcall	___ftmul
      +       120A  118A         
  3023  0252  1283               	bcf	3,5	;RP0=0, select bank0
  3024  0253  1303               	bcf	3,6	;RP1=0, select bank0
  3025  0254  082D               	movf	?___ftmul,w
  3026  0255  00D0               	movwf	sqrt@q
  3027  0256  082E               	movf	?___ftmul+1,w
  3028  0257  00D1               	movwf	sqrt@q+1
  3029  0258  082F               	movf	?___ftmul+2,w
  3030  0259  00D2               	movwf	sqrt@q+2
  3031  025A  0853               	movf	sqrt@x,w
  3032  025B  00AD               	movwf	?___ftmul
  3033  025C  0854               	movf	sqrt@x+1,w
  3034  025D  00AE               	movwf	?___ftmul+1
  3035  025E  0855               	movf	sqrt@x+2,w
  3036  025F  00AF               	movwf	?___ftmul+2
  3037  0260  0850               	movf	sqrt@q,w
  3038  0261  00B0               	movwf	?___ftmul+3
  3039  0262  0851               	movf	sqrt@q+1,w
  3040  0263  00B1               	movwf	?___ftmul+4
  3041  0264  0852               	movf	sqrt@q+2,w
  3042  0265  00B2               	movwf	?___ftmul+5
  3043  0266  120A  118A  23E3   	fcall	___ftmul
      +       120A  118A         
  3044  026B  1283               	bcf	3,5	;RP0=0, select bank0
  3045  026C  1303               	bcf	3,6	;RP1=0, select bank0
  3046  026D  082D               	movf	?___ftmul,w
  3047  026E  00D0               	movwf	sqrt@q
  3048  026F  082E               	movf	?___ftmul+1,w
  3049  0270  00D1               	movwf	sqrt@q+1
  3050  0271  082F               	movf	?___ftmul+2,w
  3051  0272  00D2               	movwf	sqrt@q+2
  3052  0273  0853               	movf	sqrt@x,w
  3053  0274  00AD               	movwf	?___ftmul
  3054  0275  0854               	movf	sqrt@x+1,w
  3055  0276  00AE               	movwf	?___ftmul+1
  3056  0277  0855               	movf	sqrt@x+2,w
  3057  0278  00AF               	movwf	?___ftmul+2
  3058  0279  0850               	movf	sqrt@q,w
  3059  027A  00B0               	movwf	?___ftmul+3
  3060  027B  0851               	movf	sqrt@q+1,w
  3061  027C  00B1               	movwf	?___ftmul+4
  3062  027D  0852               	movf	sqrt@q+2,w
  3063  027E  00B2               	movwf	?___ftmul+5
  3064  027F  120A  118A  23E3   	fcall	___ftmul
      +       120A  118A         
  3065  0284  1283               	bcf	3,5	;RP0=0, select bank0
  3066  0285  1303               	bcf	3,6	;RP1=0, select bank0
  3067  0286  082D               	movf	?___ftmul,w
  3068  0287  00D0               	movwf	sqrt@q
  3069  0288  082E               	movf	?___ftmul+1,w
  3070  0289  00D1               	movwf	sqrt@q+1
  3071  028A  082F               	movf	?___ftmul+2,w
  3072  028B  00D2               	movwf	sqrt@q+2
  3073  028C  3000               	movlw	0
  3074  028D  00AD               	movwf	?___ftmul
  3075  028E  30C0               	movlw	192
  3076  028F  00AE               	movwf	?___ftmul+1
  3077  0290  303F               	movlw	63
  3078  0291  00AF               	movwf	?___ftmul+2
  3079  0292  0853               	movf	sqrt@x,w
  3080  0293  00B0               	movwf	?___ftmul+3
  3081  0294  0854               	movf	sqrt@x+1,w
  3082  0295  00B1               	movwf	?___ftmul+4
  3083  0296  0855               	movf	sqrt@x+2,w
  3084  0297  00B2               	movwf	?___ftmul+5
  3085  0298  120A  118A  23E3   	fcall	___ftmul
      +       120A  118A         
  3086  029D  1283               	bcf	3,5	;RP0=0, select bank0
  3087  029E  1303               	bcf	3,6	;RP1=0, select bank0
  3088  029F  082D               	movf	?___ftmul,w
  3089  02A0  00D3               	movwf	sqrt@x
  3090  02A1  082E               	movf	?___ftmul+1,w
  3091  02A2  00D4               	movwf	sqrt@x+1
  3092  02A3  082F               	movf	?___ftmul+2,w
  3093  02A4  00D5               	movwf	sqrt@x+2
  3094  02A5  0850               	movf	sqrt@q,w
  3095  02A6  00BA               	movwf	?___ftsub
  3096  02A7  0851               	movf	sqrt@q+1,w
  3097  02A8  00BB               	movwf	?___ftsub+1
  3098  02A9  0852               	movf	sqrt@q+2,w
  3099  02AA  00BC               	movwf	?___ftsub+2
  3100  02AB  0853               	movf	sqrt@x,w
  3101  02AC  00BD               	movwf	?___ftsub+3
  3102  02AD  0854               	movf	sqrt@x+1,w
  3103  02AE  00BE               	movwf	?___ftsub+4
  3104  02AF  0855               	movf	sqrt@x+2,w
  3105  02B0  00BF               	movwf	?___ftsub+5
  3106  02B1  120A  158A  2335   	fcall	___ftsub
      +       120A  118A         
  3107  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  3108  02B7  1303               	bcf	3,6	;RP1=0, select bank0
  3109  02B8  083A               	movf	?___ftsub,w
  3110  02B9  00D3               	movwf	sqrt@x
  3111  02BA  083B               	movf	?___ftsub+1,w
  3112  02BB  00D4               	movwf	sqrt@x+1
  3113  02BC  083C               	movf	?___ftsub+2,w
  3114  02BD  00D5               	movwf	sqrt@x+2
  3115  02BE  3001               	movlw	1
  3116  02BF  02CF               	subwf	sqrt@i,f
  3117  02C0  1D03               	btfss	3,2
  3118  02C1  2A3B               	goto	l713
  3119  02C2  0840               	movf	sqrt@y,w
  3120  02C3  00AD               	movwf	?___ftmul
  3121  02C4  0841               	movf	sqrt@y+1,w
  3122  02C5  00AE               	movwf	?___ftmul+1
  3123  02C6  0842               	movf	sqrt@y+2,w
  3124  02C7  00AF               	movwf	?___ftmul+2
  3125  02C8  0853               	movf	sqrt@x,w
  3126  02C9  00B0               	movwf	?___ftmul+3
  3127  02CA  0854               	movf	sqrt@x+1,w
  3128  02CB  00B1               	movwf	?___ftmul+4
  3129  02CC  0855               	movf	sqrt@x+2,w
  3130  02CD  00B2               	movwf	?___ftmul+5
  3131  02CE  120A  118A  23E3   	fcall	___ftmul
  3132  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  3133  02D2  1303               	bcf	3,6	;RP1=0, select bank0
  3134  02D3  082D               	movf	?___ftmul,w
  3135  02D4  00C0               	movwf	?_sqrt
  3136  02D5  082E               	movf	?___ftmul+1,w
  3137  02D6  00C1               	movwf	?_sqrt+1
  3138  02D7  082F               	movf	?___ftmul+2,w
  3139  02D8  00C2               	movwf	?_sqrt+2
  3140  02D9  0008               	return
  3141  02DA                     __end_of_sqrt:	
  3142                           
  3143                           	psect	text12
  3144  0B35                     __ptext12:	
  3145 ;; *************** function ___ftsub *****************
  3146 ;; Defined at:
  3147 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\ftsub.c"
  3148 ;; Parameters:    Size  Location     Type
  3149 ;;  f2              3   26[BANK0 ] float 
  3150 ;;  f1              3   29[BANK0 ] float 
  3151 ;; Auto vars:     Size  Location     Type
  3152 ;;		None
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  3   26[BANK0 ] float 
  3155 ;; Registers used:
  3156 ;;		wreg, status,2, status,0, pclath, cstack
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 0/0
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3162 ;;      Params:         0       6       0       0       0
  3163 ;;      Locals:         0       0       0       0       0
  3164 ;;      Temps:          0       0       0       0       0
  3165 ;;      Totals:         0       6       0       0       0
  3166 ;;Total ram usage:        6 bytes
  3167 ;; Hardware stack levels used:    1
  3168 ;; Hardware stack levels required when called:    5
  3169 ;; This function calls:
  3170 ;;		___ftadd
  3171 ;; This function is called by:
  3172 ;;		_sqrt
  3173 ;; This function uses a non-reentrant model
  3174 ;;
  3175                           
  3176                           
  3177                           ;psect for function ___ftsub
  3178  0B35                     ___ftsub:	
  3179                           
  3180                           ;incstack = 0
  3181                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  3182  0B35  3080               	movlw	128
  3183  0B36  1283               	bcf	3,5	;RP0=0, select bank0
  3184  0B37  1303               	bcf	3,6	;RP1=0, select bank0
  3185  0B38  06BC               	xorwf	___ftsub@f2+2,f
  3186  0B39  083D               	movf	___ftsub@f1,w
  3187  0B3A  00AD               	movwf	?___ftadd
  3188  0B3B  083E               	movf	___ftsub@f1+1,w
  3189  0B3C  00AE               	movwf	?___ftadd+1
  3190  0B3D  083F               	movf	___ftsub@f1+2,w
  3191  0B3E  00AF               	movwf	?___ftadd+2
  3192  0B3F  083A               	movf	___ftsub@f2,w
  3193  0B40  00B0               	movwf	?___ftadd+3
  3194  0B41  083B               	movf	___ftsub@f2+1,w
  3195  0B42  00B1               	movwf	?___ftadd+4
  3196  0B43  083C               	movf	___ftsub@f2+2,w
  3197  0B44  00B2               	movwf	?___ftadd+5
  3198  0B45  120A  118A  22DA   	fcall	___ftadd
  3199  0B48  1283               	bcf	3,5	;RP0=0, select bank0
  3200  0B49  1303               	bcf	3,6	;RP1=0, select bank0
  3201  0B4A  082D               	movf	?___ftadd,w
  3202  0B4B  00BA               	movwf	?___ftsub
  3203  0B4C  082E               	movf	?___ftadd+1,w
  3204  0B4D  00BB               	movwf	?___ftsub+1
  3205  0B4E  082F               	movf	?___ftadd+2,w
  3206  0B4F  00BC               	movwf	?___ftsub+2
  3207  0B50  0008               	return
  3208  0B51                     __end_of___ftsub:	
  3209                           
  3210                           	psect	text13
  3211  02DA                     __ptext13:	
  3212 ;; *************** function ___ftadd *****************
  3213 ;; Defined at:
  3214 ;;		line 87 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\ftadd.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;  f1              3   13[BANK0 ] float 
  3217 ;;  f2              3   16[BANK0 ] float 
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;  exp1            1   25[BANK0 ] unsigned char 
  3220 ;;  exp2            1   24[BANK0 ] unsigned char 
  3221 ;;  sign            1   23[BANK0 ] unsigned char 
  3222 ;; Return value:  Size  Location     Type
  3223 ;;                  3   13[BANK0 ] float 
  3224 ;; Registers used:
  3225 ;;		wreg, status,2, status,0, pclath, cstack
  3226 ;; Tracked objects:
  3227 ;;		On entry : 0/0
  3228 ;;		On exit  : 0/0
  3229 ;;		Unchanged: 0/0
  3230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3231 ;;      Params:         0       6       0       0       0
  3232 ;;      Locals:         0       3       0       0       0
  3233 ;;      Temps:          0       4       0       0       0
  3234 ;;      Totals:         0      13       0       0       0
  3235 ;;Total ram usage:       13 bytes
  3236 ;; Hardware stack levels used:    1
  3237 ;; Hardware stack levels required when called:    4
  3238 ;; This function calls:
  3239 ;;		___ftpack
  3240 ;; This function is called by:
  3241 ;;		___ftsub
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244                           
  3245                           
  3246                           ;psect for function ___ftadd
  3247  02DA                     ___ftadd:	
  3248                           
  3249                           ;incstack = 0
  3250                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  3251  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  3252  02DB  1303               	bcf	3,6	;RP1=0, select bank0
  3253  02DC  082D               	movf	___ftadd@f1,w
  3254  02DD  00B3               	movwf	??___ftadd
  3255  02DE  082E               	movf	___ftadd@f1+1,w
  3256  02DF  00B4               	movwf	??___ftadd+1
  3257  02E0  082F               	movf	___ftadd@f1+2,w
  3258  02E1  00B5               	movwf	??___ftadd+2
  3259  02E2  1003               	clrc
  3260  02E3  0D34               	rlf	??___ftadd+1,w
  3261  02E4  0D35               	rlf	??___ftadd+2,w
  3262  02E5  00B6               	movwf	??___ftadd+3
  3263  02E6  0836               	movf	??___ftadd+3,w
  3264  02E7  00B9               	movwf	___ftadd@exp1
  3265  02E8  0830               	movf	___ftadd@f2,w
  3266  02E9  00B3               	movwf	??___ftadd
  3267  02EA  0831               	movf	___ftadd@f2+1,w
  3268  02EB  00B4               	movwf	??___ftadd+1
  3269  02EC  0832               	movf	___ftadd@f2+2,w
  3270  02ED  00B5               	movwf	??___ftadd+2
  3271  02EE  1003               	clrc
  3272  02EF  0D34               	rlf	??___ftadd+1,w
  3273  02F0  0D35               	rlf	??___ftadd+2,w
  3274  02F1  00B6               	movwf	??___ftadd+3
  3275  02F2  0836               	movf	??___ftadd+3,w
  3276  02F3  00B8               	movwf	___ftadd@exp2
  3277  02F4  0839               	movf	___ftadd@exp1,w
  3278  02F5  1903               	btfsc	3,2
  3279  02F6  2B03               	goto	l2246
  3280  02F7  0838               	movf	___ftadd@exp2,w
  3281  02F8  0239               	subwf	___ftadd@exp1,w
  3282  02F9  1803               	skipnc
  3283  02FA  2B0A               	goto	l2250
  3284  02FB  0339               	decf	___ftadd@exp1,w
  3285  02FC  3AFF               	xorlw	255
  3286  02FD  0738               	addwf	___ftadd@exp2,w
  3287  02FE  00B3               	movwf	??___ftadd
  3288  02FF  3019               	movlw	25
  3289  0300  0233               	subwf	??___ftadd,w
  3290  0301  1C03               	skipc
  3291  0302  2B0A               	goto	l2250
  3292  0303                     l2246:	
  3293  0303  0830               	movf	___ftadd@f2,w
  3294  0304  00AD               	movwf	?___ftadd
  3295  0305  0831               	movf	___ftadd@f2+1,w
  3296  0306  00AE               	movwf	?___ftadd+1
  3297  0307  0832               	movf	___ftadd@f2+2,w
  3298  0308  00AF               	movwf	?___ftadd+2
  3299  0309  0008               	return
  3300  030A                     l2250:	
  3301  030A  0838               	movf	___ftadd@exp2,w
  3302  030B  1903               	btfsc	3,2
  3303  030C  0008               	return
  3304  030D  0839               	movf	___ftadd@exp1,w
  3305  030E  0238               	subwf	___ftadd@exp2,w
  3306  030F  1803               	skipnc
  3307  0310  2B19               	goto	l2256
  3308  0311  0338               	decf	___ftadd@exp2,w
  3309  0312  3AFF               	xorlw	255
  3310  0313  0739               	addwf	___ftadd@exp1,w
  3311  0314  00B3               	movwf	??___ftadd
  3312  0315  3019               	movlw	25
  3313  0316  0233               	subwf	??___ftadd,w
  3314  0317  1803               	btfsc	3,0
  3315  0318  0008               	return
  3316  0319                     l2256:	
  3317  0319  3006               	movlw	6
  3318  031A  00B3               	movwf	??___ftadd
  3319  031B  0833               	movf	??___ftadd,w
  3320  031C  00B7               	movwf	___ftadd@sign
  3321  031D  1BAF               	btfsc	___ftadd@f1+2,7
  3322  031E  17B7               	bsf	___ftadd@sign,7
  3323  031F  1BB2               	btfsc	___ftadd@f2+2,7
  3324  0320  1737               	bsf	___ftadd@sign,6
  3325  0321  17AE               	bsf	___ftadd@f1+1,7
  3326  0322  30FF               	movlw	255
  3327  0323  05AD               	andwf	___ftadd@f1,f
  3328  0324  30FF               	movlw	255
  3329  0325  05AE               	andwf	___ftadd@f1+1,f
  3330  0326  3000               	movlw	0
  3331  0327  05AF               	andwf	___ftadd@f1+2,f
  3332  0328  17B1               	bsf	___ftadd@f2+1,7
  3333  0329  30FF               	movlw	255
  3334  032A  05B0               	andwf	___ftadd@f2,f
  3335  032B  30FF               	movlw	255
  3336  032C  05B1               	andwf	___ftadd@f2+1,f
  3337  032D  3000               	movlw	0
  3338  032E  05B2               	andwf	___ftadd@f2+2,f
  3339  032F  0838               	movf	___ftadd@exp2,w
  3340  0330  0239               	subwf	___ftadd@exp1,w
  3341  0331  1803               	skipnc
  3342  0332  2B59               	goto	l2278
  3343  0333                     l2268:	
  3344  0333  3001               	movlw	1
  3345  0334                     u2235:	
  3346  0334  1003               	clrc
  3347  0335  0DB0               	rlf	___ftadd@f2,f
  3348  0336  0DB1               	rlf	___ftadd@f2+1,f
  3349  0337  0DB2               	rlf	___ftadd@f2+2,f
  3350  0338  3EFF               	addlw	-1
  3351  0339  1D03               	skipz
  3352  033A  2B34               	goto	u2235
  3353  033B  3001               	movlw	1
  3354  033C  02B8               	subwf	___ftadd@exp2,f
  3355  033D  0838               	movf	___ftadd@exp2,w
  3356  033E  0639               	xorwf	___ftadd@exp1,w
  3357  033F  1903               	skipnz
  3358  0340  2B54               	goto	l2276
  3359  0341  3001               	movlw	1
  3360  0342  02B7               	subwf	___ftadd@sign,f
  3361  0343  0837               	movf	___ftadd@sign,w
  3362  0344  3907               	andlw	7
  3363  0345  1903               	btfsc	3,2
  3364  0346  2B54               	goto	l2276
  3365  0347  2B33               	goto	l2268
  3366  0348                     l2274:	
  3367  0348  3001               	movlw	1
  3368  0349                     u2265:	
  3369  0349  1003               	clrc
  3370  034A  0CAF               	rrf	___ftadd@f1+2,f
  3371  034B  0CAE               	rrf	___ftadd@f1+1,f
  3372  034C  0CAD               	rrf	___ftadd@f1,f
  3373  034D  3EFF               	addlw	-1
  3374  034E  1D03               	skipz
  3375  034F  2B49               	goto	u2265
  3376  0350  3001               	movlw	1
  3377  0351  00B3               	movwf	??___ftadd
  3378  0352  0833               	movf	??___ftadd,w
  3379  0353  07B9               	addwf	___ftadd@exp1,f
  3380  0354                     l2276:	
  3381  0354  0839               	movf	___ftadd@exp1,w
  3382  0355  0638               	xorwf	___ftadd@exp2,w
  3383  0356  1903               	btfsc	3,2
  3384  0357  2B82               	goto	l538
  3385  0358  2B48               	goto	l2274
  3386  0359                     l2278:	
  3387  0359  0839               	movf	___ftadd@exp1,w
  3388  035A  0238               	subwf	___ftadd@exp2,w
  3389  035B  1803               	skipnc
  3390  035C  2B82               	goto	l538
  3391  035D                     l2280:	
  3392  035D  3001               	movlw	1
  3393  035E                     u2295:	
  3394  035E  1003               	clrc
  3395  035F  0DAD               	rlf	___ftadd@f1,f
  3396  0360  0DAE               	rlf	___ftadd@f1+1,f
  3397  0361  0DAF               	rlf	___ftadd@f1+2,f
  3398  0362  3EFF               	addlw	-1
  3399  0363  1D03               	skipz
  3400  0364  2B5E               	goto	u2295
  3401  0365  3001               	movlw	1
  3402  0366  02B9               	subwf	___ftadd@exp1,f
  3403  0367  0838               	movf	___ftadd@exp2,w
  3404  0368  0639               	xorwf	___ftadd@exp1,w
  3405  0369  1903               	skipnz
  3406  036A  2B7E               	goto	l2288
  3407  036B  3001               	movlw	1
  3408  036C  02B7               	subwf	___ftadd@sign,f
  3409  036D  0837               	movf	___ftadd@sign,w
  3410  036E  3907               	andlw	7
  3411  036F  1903               	btfsc	3,2
  3412  0370  2B7E               	goto	l2288
  3413  0371  2B5D               	goto	l2280
  3414  0372                     l2286:	
  3415  0372  3001               	movlw	1
  3416  0373                     u2325:	
  3417  0373  1003               	clrc
  3418  0374  0CB2               	rrf	___ftadd@f2+2,f
  3419  0375  0CB1               	rrf	___ftadd@f2+1,f
  3420  0376  0CB0               	rrf	___ftadd@f2,f
  3421  0377  3EFF               	addlw	-1
  3422  0378  1D03               	skipz
  3423  0379  2B73               	goto	u2325
  3424  037A  3001               	movlw	1
  3425  037B  00B3               	movwf	??___ftadd
  3426  037C  0833               	movf	??___ftadd,w
  3427  037D  07B8               	addwf	___ftadd@exp2,f
  3428  037E                     l2288:	
  3429  037E  0839               	movf	___ftadd@exp1,w
  3430  037F  0638               	xorwf	___ftadd@exp2,w
  3431  0380  1D03               	skipz
  3432  0381  2B72               	goto	l2286
  3433  0382                     l538:	
  3434  0382  1FB7               	btfss	___ftadd@sign,7
  3435  0383  2B94               	goto	l2292
  3436  0384  30FF               	movlw	255
  3437  0385  06AD               	xorwf	___ftadd@f1,f
  3438  0386  30FF               	movlw	255
  3439  0387  06AE               	xorwf	___ftadd@f1+1,f
  3440  0388  30FF               	movlw	255
  3441  0389  06AF               	xorwf	___ftadd@f1+2,f
  3442  038A  3001               	movlw	1
  3443  038B  07AD               	addwf	___ftadd@f1,f
  3444  038C  3000               	movlw	0
  3445  038D  1803               	skipnc
  3446  038E  3001               	movlw	1
  3447  038F  07AE               	addwf	___ftadd@f1+1,f
  3448  0390  3000               	movlw	0
  3449  0391  1803               	skipnc
  3450  0392  3001               	movlw	1
  3451  0393  07AF               	addwf	___ftadd@f1+2,f
  3452  0394                     l2292:	
  3453  0394  1F37               	btfss	___ftadd@sign,6
  3454  0395  2BA6               	goto	l2296
  3455  0396  30FF               	movlw	255
  3456  0397  06B0               	xorwf	___ftadd@f2,f
  3457  0398  30FF               	movlw	255
  3458  0399  06B1               	xorwf	___ftadd@f2+1,f
  3459  039A  30FF               	movlw	255
  3460  039B  06B2               	xorwf	___ftadd@f2+2,f
  3461  039C  3001               	movlw	1
  3462  039D  07B0               	addwf	___ftadd@f2,f
  3463  039E  3000               	movlw	0
  3464  039F  1803               	skipnc
  3465  03A0  3001               	movlw	1
  3466  03A1  07B1               	addwf	___ftadd@f2+1,f
  3467  03A2  3000               	movlw	0
  3468  03A3  1803               	skipnc
  3469  03A4  3001               	movlw	1
  3470  03A5  07B2               	addwf	___ftadd@f2+2,f
  3471  03A6                     l2296:	
  3472  03A6  01B7               	clrf	___ftadd@sign
  3473  03A7  082D               	movf	___ftadd@f1,w
  3474  03A8  07B0               	addwf	___ftadd@f2,f
  3475  03A9  082E               	movf	___ftadd@f1+1,w
  3476  03AA  1103               	clrz
  3477  03AB  1803               	skipnc
  3478  03AC  0A2E               	incf	___ftadd@f1+1,w
  3479  03AD  1D03               	btfss	3,2
  3480  03AE  07B1               	addwf	___ftadd@f2+1,f
  3481  03AF  082F               	movf	___ftadd@f1+2,w
  3482  03B0  1103               	clrz
  3483  03B1  1803               	skipnc
  3484  03B2  0A2F               	incf	___ftadd@f1+2,w
  3485  03B3  1D03               	btfss	3,2
  3486  03B4  07B2               	addwf	___ftadd@f2+2,f
  3487  03B5  1FB2               	btfss	___ftadd@f2+2,7
  3488  03B6  2BC9               	goto	l2306
  3489  03B7  30FF               	movlw	255
  3490  03B8  06B0               	xorwf	___ftadd@f2,f
  3491  03B9  30FF               	movlw	255
  3492  03BA  06B1               	xorwf	___ftadd@f2+1,f
  3493  03BB  30FF               	movlw	255
  3494  03BC  06B2               	xorwf	___ftadd@f2+2,f
  3495  03BD  3001               	movlw	1
  3496  03BE  07B0               	addwf	___ftadd@f2,f
  3497  03BF  3000               	movlw	0
  3498  03C0  1803               	skipnc
  3499  03C1  3001               	movlw	1
  3500  03C2  07B1               	addwf	___ftadd@f2+1,f
  3501  03C3  3000               	movlw	0
  3502  03C4  1803               	skipnc
  3503  03C5  3001               	movlw	1
  3504  03C6  07B2               	addwf	___ftadd@f2+2,f
  3505  03C7  01B7               	clrf	___ftadd@sign
  3506  03C8  0AB7               	incf	___ftadd@sign,f
  3507  03C9                     l2306:	
  3508  03C9  0830               	movf	___ftadd@f2,w
  3509  03CA  00A5               	movwf	?___ftpack
  3510  03CB  0831               	movf	___ftadd@f2+1,w
  3511  03CC  00A6               	movwf	?___ftpack+1
  3512  03CD  0832               	movf	___ftadd@f2+2,w
  3513  03CE  00A7               	movwf	?___ftpack+2
  3514  03CF  0839               	movf	___ftadd@exp1,w
  3515  03D0  00B3               	movwf	??___ftadd
  3516  03D1  0833               	movf	??___ftadd,w
  3517  03D2  00A8               	movwf	?___ftpack+3
  3518  03D3  0837               	movf	___ftadd@sign,w
  3519  03D4  00B4               	movwf	??___ftadd+1
  3520  03D5  0834               	movf	??___ftadd+1,w
  3521  03D6  00A9               	movwf	?___ftpack+4
  3522  03D7  120A  158A  2796   	fcall	___ftpack
  3523  03DA  1283               	bcf	3,5	;RP0=0, select bank0
  3524  03DB  1303               	bcf	3,6	;RP1=0, select bank0
  3525  03DC  0825               	movf	?___ftpack,w
  3526  03DD  00AD               	movwf	?___ftadd
  3527  03DE  0826               	movf	?___ftpack+1,w
  3528  03DF  00AE               	movwf	?___ftadd+1
  3529  03E0  0827               	movf	?___ftpack+2,w
  3530  03E1  00AF               	movwf	?___ftadd+2
  3531  03E2  0008               	return
  3532  03E3                     __end_of___ftadd:	
  3533                           
  3534                           	psect	text14
  3535  03E3                     __ptext14:	
  3536 ;; *************** function ___ftmul *****************
  3537 ;; Defined at:
  3538 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\ftmul.c"
  3539 ;; Parameters:    Size  Location     Type
  3540 ;;  f1              3   13[BANK0 ] float 
  3541 ;;  f2              3   16[BANK0 ] float 
  3542 ;; Auto vars:     Size  Location     Type
  3543 ;;  f3_as_produc    3   24[BANK0 ] unsigned um
  3544 ;;  sign            1   28[BANK0 ] unsigned char 
  3545 ;;  cntr            1   27[BANK0 ] unsigned char 
  3546 ;;  exp             1   23[BANK0 ] unsigned char 
  3547 ;; Return value:  Size  Location     Type
  3548 ;;                  3   13[BANK0 ] float 
  3549 ;; Registers used:
  3550 ;;		wreg, status,2, status,0, pclath, cstack
  3551 ;; Tracked objects:
  3552 ;;		On entry : 0/0
  3553 ;;		On exit  : 0/0
  3554 ;;		Unchanged: 0/0
  3555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3556 ;;      Params:         0       6       0       0       0
  3557 ;;      Locals:         0       6       0       0       0
  3558 ;;      Temps:          0       4       0       0       0
  3559 ;;      Totals:         0      16       0       0       0
  3560 ;;Total ram usage:       16 bytes
  3561 ;; Hardware stack levels used:    1
  3562 ;; Hardware stack levels required when called:    4
  3563 ;; This function calls:
  3564 ;;		___ftpack
  3565 ;; This function is called by:
  3566 ;;		_sqrt
  3567 ;; This function uses a non-reentrant model
  3568 ;;
  3569                           
  3570                           
  3571                           ;psect for function ___ftmul
  3572  03E3                     ___ftmul:	
  3573                           
  3574                           ;incstack = 0
  3575                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  3576  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  3577  03E4  1303               	bcf	3,6	;RP1=0, select bank0
  3578  03E5  082D               	movf	___ftmul@f1,w
  3579  03E6  00B3               	movwf	??___ftmul
  3580  03E7  082E               	movf	___ftmul@f1+1,w
  3581  03E8  00B4               	movwf	??___ftmul+1
  3582  03E9  082F               	movf	___ftmul@f1+2,w
  3583  03EA  00B5               	movwf	??___ftmul+2
  3584  03EB  1003               	clrc
  3585  03EC  0D34               	rlf	??___ftmul+1,w
  3586  03ED  0D35               	rlf	??___ftmul+2,w
  3587  03EE  00B6               	movwf	??___ftmul+3
  3588  03EF  0836               	movf	??___ftmul+3,w
  3589  03F0  00B7               	movwf	___ftmul@exp
  3590  03F1  08B7               	movf	___ftmul@exp,f
  3591  03F2  1D03               	skipz
  3592  03F3  2BFB               	goto	l2378
  3593  03F4  3000               	movlw	0
  3594  03F5  00AD               	movwf	?___ftmul
  3595  03F6  3000               	movlw	0
  3596  03F7  00AE               	movwf	?___ftmul+1
  3597  03F8  3000               	movlw	0
  3598  03F9  00AF               	movwf	?___ftmul+2
  3599  03FA  0008               	return
  3600  03FB                     l2378:	
  3601  03FB  0830               	movf	___ftmul@f2,w
  3602  03FC  00B3               	movwf	??___ftmul
  3603  03FD  0831               	movf	___ftmul@f2+1,w
  3604  03FE  00B4               	movwf	??___ftmul+1
  3605  03FF  0832               	movf	___ftmul@f2+2,w
  3606  0400  00B5               	movwf	??___ftmul+2
  3607  0401  1003               	clrc
  3608  0402  0D34               	rlf	??___ftmul+1,w
  3609  0403  0D35               	rlf	??___ftmul+2,w
  3610  0404  00B6               	movwf	??___ftmul+3
  3611  0405  0836               	movf	??___ftmul+3,w
  3612  0406  00BC               	movwf	___ftmul@sign
  3613  0407  08BC               	movf	___ftmul@sign,f
  3614  0408  1D03               	skipz
  3615  0409  2C11               	goto	l2384
  3616  040A  3000               	movlw	0
  3617  040B  00AD               	movwf	?___ftmul
  3618  040C  3000               	movlw	0
  3619  040D  00AE               	movwf	?___ftmul+1
  3620  040E  3000               	movlw	0
  3621  040F  00AF               	movwf	?___ftmul+2
  3622  0410  0008               	return
  3623  0411                     l2384:	
  3624  0411  083C               	movf	___ftmul@sign,w
  3625  0412  3E7B               	addlw	123
  3626  0413  00B3               	movwf	??___ftmul
  3627  0414  0833               	movf	??___ftmul,w
  3628  0415  07B7               	addwf	___ftmul@exp,f
  3629  0416  082D               	movf	___ftmul@f1,w
  3630  0417  00B3               	movwf	??___ftmul
  3631  0418  082E               	movf	___ftmul@f1+1,w
  3632  0419  00B4               	movwf	??___ftmul+1
  3633  041A  082F               	movf	___ftmul@f1+2,w
  3634  041B  00B5               	movwf	??___ftmul+2
  3635  041C  3010               	movlw	16
  3636  041D                     u2535:	
  3637  041D  1003               	clrc
  3638  041E  0CB5               	rrf	??___ftmul+2,f
  3639  041F  0CB4               	rrf	??___ftmul+1,f
  3640  0420  0CB3               	rrf	??___ftmul,f
  3641  0421  3EFF               	addlw	-1
  3642  0422  1D03               	skipz
  3643  0423  2C1D               	goto	u2535
  3644  0424  0833               	movf	??___ftmul,w
  3645  0425  00B6               	movwf	??___ftmul+3
  3646  0426  0836               	movf	??___ftmul+3,w
  3647  0427  00BC               	movwf	___ftmul@sign
  3648  0428  0830               	movf	___ftmul@f2,w
  3649  0429  00B3               	movwf	??___ftmul
  3650  042A  0831               	movf	___ftmul@f2+1,w
  3651  042B  00B4               	movwf	??___ftmul+1
  3652  042C  0832               	movf	___ftmul@f2+2,w
  3653  042D  00B5               	movwf	??___ftmul+2
  3654  042E  3010               	movlw	16
  3655  042F                     u2545:	
  3656  042F  1003               	clrc
  3657  0430  0CB5               	rrf	??___ftmul+2,f
  3658  0431  0CB4               	rrf	??___ftmul+1,f
  3659  0432  0CB3               	rrf	??___ftmul,f
  3660  0433  3EFF               	addlw	-1
  3661  0434  1D03               	skipz
  3662  0435  2C2F               	goto	u2545
  3663  0436  0833               	movf	??___ftmul,w
  3664  0437  00B6               	movwf	??___ftmul+3
  3665  0438  0836               	movf	??___ftmul+3,w
  3666  0439  06BC               	xorwf	___ftmul@sign,f
  3667  043A  3080               	movlw	128
  3668  043B  00B3               	movwf	??___ftmul
  3669  043C  0833               	movf	??___ftmul,w
  3670  043D  05BC               	andwf	___ftmul@sign,f
  3671  043E  17AE               	bsf	___ftmul@f1+1,7
  3672  043F  17B1               	bsf	___ftmul@f2+1,7
  3673  0440  30FF               	movlw	255
  3674  0441  05B0               	andwf	___ftmul@f2,f
  3675  0442  30FF               	movlw	255
  3676  0443  05B1               	andwf	___ftmul@f2+1,f
  3677  0444  3000               	movlw	0
  3678  0445  05B2               	andwf	___ftmul@f2+2,f
  3679  0446  3000               	movlw	0
  3680  0447  00B8               	movwf	___ftmul@f3_as_product
  3681  0448  3000               	movlw	0
  3682  0449  00B9               	movwf	___ftmul@f3_as_product+1
  3683  044A  3000               	movlw	0
  3684  044B  00BA               	movwf	___ftmul@f3_as_product+2
  3685  044C  3007               	movlw	7
  3686  044D  00B3               	movwf	??___ftmul
  3687  044E  0833               	movf	??___ftmul,w
  3688  044F  00BB               	movwf	___ftmul@cntr
  3689  0450                     l2396:	
  3690  0450  1C2D               	btfss	___ftmul@f1,0
  3691  0451  2C60               	goto	l2400
  3692  0452  0830               	movf	___ftmul@f2,w
  3693  0453  07B8               	addwf	___ftmul@f3_as_product,f
  3694  0454  0831               	movf	___ftmul@f2+1,w
  3695  0455  1103               	clrz
  3696  0456  1803               	skipnc
  3697  0457  0A31               	incf	___ftmul@f2+1,w
  3698  0458  1D03               	btfss	3,2
  3699  0459  07B9               	addwf	___ftmul@f3_as_product+1,f
  3700  045A  0832               	movf	___ftmul@f2+2,w
  3701  045B  1103               	clrz
  3702  045C  1803               	skipnc
  3703  045D  0A32               	incf	___ftmul@f2+2,w
  3704  045E  1D03               	btfss	3,2
  3705  045F  07BA               	addwf	___ftmul@f3_as_product+2,f
  3706  0460                     l2400:	
  3707  0460  3001               	movlw	1
  3708  0461                     u2575:	
  3709  0461  1003               	clrc
  3710  0462  0CAF               	rrf	___ftmul@f1+2,f
  3711  0463  0CAE               	rrf	___ftmul@f1+1,f
  3712  0464  0CAD               	rrf	___ftmul@f1,f
  3713  0465  3EFF               	addlw	-1
  3714  0466  1D03               	skipz
  3715  0467  2C61               	goto	u2575
  3716  0468  3001               	movlw	1
  3717  0469                     u2585:	
  3718  0469  1003               	clrc
  3719  046A  0DB0               	rlf	___ftmul@f2,f
  3720  046B  0DB1               	rlf	___ftmul@f2+1,f
  3721  046C  0DB2               	rlf	___ftmul@f2+2,f
  3722  046D  3EFF               	addlw	-1
  3723  046E  1D03               	skipz
  3724  046F  2C69               	goto	u2585
  3725  0470  3001               	movlw	1
  3726  0471  02BB               	subwf	___ftmul@cntr,f
  3727  0472  1D03               	btfss	3,2
  3728  0473  2C50               	goto	l2396
  3729  0474  3009               	movlw	9
  3730  0475  00B3               	movwf	??___ftmul
  3731  0476  0833               	movf	??___ftmul,w
  3732  0477  00BB               	movwf	___ftmul@cntr
  3733  0478                     l2408:	
  3734  0478  1C2D               	btfss	___ftmul@f1,0
  3735  0479  2C88               	goto	l2412
  3736  047A  0830               	movf	___ftmul@f2,w
  3737  047B  07B8               	addwf	___ftmul@f3_as_product,f
  3738  047C  0831               	movf	___ftmul@f2+1,w
  3739  047D  1103               	clrz
  3740  047E  1803               	skipnc
  3741  047F  0A31               	incf	___ftmul@f2+1,w
  3742  0480  1D03               	btfss	3,2
  3743  0481  07B9               	addwf	___ftmul@f3_as_product+1,f
  3744  0482  0832               	movf	___ftmul@f2+2,w
  3745  0483  1103               	clrz
  3746  0484  1803               	skipnc
  3747  0485  0A32               	incf	___ftmul@f2+2,w
  3748  0486  1D03               	btfss	3,2
  3749  0487  07BA               	addwf	___ftmul@f3_as_product+2,f
  3750  0488                     l2412:	
  3751  0488  3001               	movlw	1
  3752  0489                     u2625:	
  3753  0489  1003               	clrc
  3754  048A  0CAF               	rrf	___ftmul@f1+2,f
  3755  048B  0CAE               	rrf	___ftmul@f1+1,f
  3756  048C  0CAD               	rrf	___ftmul@f1,f
  3757  048D  3EFF               	addlw	-1
  3758  048E  1D03               	skipz
  3759  048F  2C89               	goto	u2625
  3760  0490  3001               	movlw	1
  3761  0491                     u2635:	
  3762  0491  1003               	clrc
  3763  0492  0CBA               	rrf	___ftmul@f3_as_product+2,f
  3764  0493  0CB9               	rrf	___ftmul@f3_as_product+1,f
  3765  0494  0CB8               	rrf	___ftmul@f3_as_product,f
  3766  0495  3EFF               	addlw	-1
  3767  0496  1D03               	skipz
  3768  0497  2C91               	goto	u2635
  3769  0498  3001               	movlw	1
  3770  0499  02BB               	subwf	___ftmul@cntr,f
  3771  049A  1D03               	btfss	3,2
  3772  049B  2C78               	goto	l2408
  3773  049C  0838               	movf	___ftmul@f3_as_product,w
  3774  049D  00A5               	movwf	?___ftpack
  3775  049E  0839               	movf	___ftmul@f3_as_product+1,w
  3776  049F  00A6               	movwf	?___ftpack+1
  3777  04A0  083A               	movf	___ftmul@f3_as_product+2,w
  3778  04A1  00A7               	movwf	?___ftpack+2
  3779  04A2  0837               	movf	___ftmul@exp,w
  3780  04A3  00B3               	movwf	??___ftmul
  3781  04A4  0833               	movf	??___ftmul,w
  3782  04A5  00A8               	movwf	?___ftpack+3
  3783  04A6  083C               	movf	___ftmul@sign,w
  3784  04A7  00B4               	movwf	??___ftmul+1
  3785  04A8  0834               	movf	??___ftmul+1,w
  3786  04A9  00A9               	movwf	?___ftpack+4
  3787  04AA  120A  158A  2796   	fcall	___ftpack
  3788  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  3789  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  3790  04AF  0825               	movf	?___ftpack,w
  3791  04B0  00AD               	movwf	?___ftmul
  3792  04B1  0826               	movf	?___ftpack+1,w
  3793  04B2  00AE               	movwf	?___ftmul+1
  3794  04B3  0827               	movf	?___ftpack+2,w
  3795  04B4  00AF               	movwf	?___ftmul+2
  3796  04B5  0008               	return
  3797  04B6                     __end_of___ftmul:	
  3798                           
  3799                           	psect	text15
  3800  0F96                     __ptext15:	
  3801 ;; *************** function ___ftpack *****************
  3802 ;; Defined at:
  3803 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\float.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;  arg             3    5[BANK0 ] unsigned um
  3806 ;;  exp             1    8[BANK0 ] unsigned char 
  3807 ;;  sign            1    9[BANK0 ] unsigned char 
  3808 ;; Auto vars:     Size  Location     Type
  3809 ;;		None
  3810 ;; Return value:  Size  Location     Type
  3811 ;;                  3    5[BANK0 ] float 
  3812 ;; Registers used:
  3813 ;;		wreg, status,2, status,0
  3814 ;; Tracked objects:
  3815 ;;		On entry : 0/0
  3816 ;;		On exit  : 0/0
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3819 ;;      Params:         0       5       0       0       0
  3820 ;;      Locals:         0       0       0       0       0
  3821 ;;      Temps:          0       3       0       0       0
  3822 ;;      Totals:         0       8       0       0       0
  3823 ;;Total ram usage:        8 bytes
  3824 ;; Hardware stack levels used:    1
  3825 ;; Hardware stack levels required when called:    3
  3826 ;; This function calls:
  3827 ;;		Nothing
  3828 ;; This function is called by:
  3829 ;;		___altoft
  3830 ;;		___ftadd
  3831 ;;		___ftdiv
  3832 ;;		___ftmul
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836                           
  3837                           ;psect for function ___ftpack
  3838  0F96                     ___ftpack:	
  3839                           
  3840                           ;incstack = 0
  3841                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  3842  0F96  1283               	bcf	3,5	;RP0=0, select bank0
  3843  0F97  1303               	bcf	3,6	;RP1=0, select bank0
  3844  0F98  0828               	movf	___ftpack@exp,w
  3845  0F99  1903               	btfsc	3,2
  3846  0F9A  2FA0               	goto	l2118
  3847  0F9B  0827               	movf	___ftpack@arg+2,w
  3848  0F9C  0426               	iorwf	___ftpack@arg+1,w
  3849  0F9D  0425               	iorwf	___ftpack@arg,w
  3850  0F9E  1D03               	skipz
  3851  0F9F  2FB3               	goto	l2124
  3852  0FA0                     l2118:	
  3853  0FA0  3000               	movlw	0
  3854  0FA1  00A5               	movwf	?___ftpack
  3855  0FA2  3000               	movlw	0
  3856  0FA3  00A6               	movwf	?___ftpack+1
  3857  0FA4  3000               	movlw	0
  3858  0FA5  00A7               	movwf	?___ftpack+2
  3859  0FA6  0008               	return
  3860  0FA7                     l2122:	
  3861  0FA7  3001               	movlw	1
  3862  0FA8  00AA               	movwf	??___ftpack
  3863  0FA9  082A               	movf	??___ftpack,w
  3864  0FAA  07A8               	addwf	___ftpack@exp,f
  3865  0FAB  3001               	movlw	1
  3866  0FAC                     u1835:	
  3867  0FAC  1003               	clrc
  3868  0FAD  0CA7               	rrf	___ftpack@arg+2,f
  3869  0FAE  0CA6               	rrf	___ftpack@arg+1,f
  3870  0FAF  0CA5               	rrf	___ftpack@arg,f
  3871  0FB0  3EFF               	addlw	-1
  3872  0FB1  1D03               	skipz
  3873  0FB2  2FAC               	goto	u1835
  3874  0FB3                     l2124:	
  3875  0FB3  30FE               	movlw	254
  3876  0FB4  0527               	andwf	___ftpack@arg+2,w
  3877  0FB5  1903               	btfsc	3,2
  3878  0FB6  2FCE               	goto	l509
  3879  0FB7  2FA7               	goto	l2122
  3880  0FB8                     l2126:	
  3881  0FB8  3001               	movlw	1
  3882  0FB9  00AA               	movwf	??___ftpack
  3883  0FBA  082A               	movf	??___ftpack,w
  3884  0FBB  07A8               	addwf	___ftpack@exp,f
  3885  0FBC  3001               	movlw	1
  3886  0FBD  07A5               	addwf	___ftpack@arg,f
  3887  0FBE  3000               	movlw	0
  3888  0FBF  1803               	skipnc
  3889  0FC0  3001               	movlw	1
  3890  0FC1  07A6               	addwf	___ftpack@arg+1,f
  3891  0FC2  3000               	movlw	0
  3892  0FC3  1803               	skipnc
  3893  0FC4  3001               	movlw	1
  3894  0FC5  07A7               	addwf	___ftpack@arg+2,f
  3895  0FC6  3001               	movlw	1
  3896  0FC7                     u1855:	
  3897  0FC7  1003               	clrc
  3898  0FC8  0CA7               	rrf	___ftpack@arg+2,f
  3899  0FC9  0CA6               	rrf	___ftpack@arg+1,f
  3900  0FCA  0CA5               	rrf	___ftpack@arg,f
  3901  0FCB  3EFF               	addlw	-1
  3902  0FCC  1D03               	skipz
  3903  0FCD  2FC7               	goto	u1855
  3904  0FCE                     l509:	
  3905  0FCE  30FF               	movlw	255
  3906  0FCF  0527               	andwf	___ftpack@arg+2,w
  3907  0FD0  1903               	btfsc	3,2
  3908  0FD1  2FDD               	goto	l2134
  3909  0FD2  2FB8               	goto	l2126
  3910  0FD3                     l2132:	
  3911  0FD3  3001               	movlw	1
  3912  0FD4  02A8               	subwf	___ftpack@exp,f
  3913  0FD5  3001               	movlw	1
  3914  0FD6                     u1875:	
  3915  0FD6  1003               	clrc
  3916  0FD7  0DA5               	rlf	___ftpack@arg,f
  3917  0FD8  0DA6               	rlf	___ftpack@arg+1,f
  3918  0FD9  0DA7               	rlf	___ftpack@arg+2,f
  3919  0FDA  3EFF               	addlw	-1
  3920  0FDB  1D03               	skipz
  3921  0FDC  2FD6               	goto	u1875
  3922  0FDD                     l2134:	
  3923  0FDD  1FA6               	btfss	___ftpack@arg+1,7
  3924  0FDE  2FD3               	goto	l2132
  3925  0FDF  1828               	btfsc	___ftpack@exp,0
  3926  0FE0  2FE7               	goto	l515
  3927  0FE1  30FF               	movlw	255
  3928  0FE2  05A5               	andwf	___ftpack@arg,f
  3929  0FE3  307F               	movlw	127
  3930  0FE4  05A6               	andwf	___ftpack@arg+1,f
  3931  0FE5  30FF               	movlw	255
  3932  0FE6  05A7               	andwf	___ftpack@arg+2,f
  3933  0FE7                     l515:	
  3934  0FE7  1003               	clrc
  3935  0FE8  0CA8               	rrf	___ftpack@exp,f
  3936  0FE9  0828               	movf	___ftpack@exp,w
  3937  0FEA  00AA               	movwf	??___ftpack
  3938  0FEB  01AB               	clrf	??___ftpack+1
  3939  0FEC  01AC               	clrf	??___ftpack+2
  3940  0FED  3010               	movlw	16
  3941  0FEE                     u1905:	
  3942  0FEE  1003               	clrc
  3943  0FEF  0DAA               	rlf	??___ftpack,f
  3944  0FF0  0DAB               	rlf	??___ftpack+1,f
  3945  0FF1  0DAC               	rlf	??___ftpack+2,f
  3946  0FF2  3EFF               	addlw	-1
  3947  0FF3  1D03               	skipz
  3948  0FF4  2FEE               	goto	u1905
  3949  0FF5  082A               	movf	??___ftpack,w
  3950  0FF6  04A5               	iorwf	___ftpack@arg,f
  3951  0FF7  082B               	movf	??___ftpack+1,w
  3952  0FF8  04A6               	iorwf	___ftpack@arg+1,f
  3953  0FF9  082C               	movf	??___ftpack+2,w
  3954  0FFA  04A7               	iorwf	___ftpack@arg+2,f
  3955  0FFB  0829               	movf	___ftpack@sign,w
  3956  0FFC  1903               	btfsc	3,2
  3957  0FFD  0008               	return
  3958  0FFE  17A7               	bsf	___ftpack@arg+2,7
  3959  0FFF  0008               	return
  3960  1000                     __end_of___ftpack:	
  3961                           
  3962                           	psect	text16
  3963  0F37                     __ptext16:	
  3964 ;; *************** function ___ftge *****************
  3965 ;; Defined at:
  3966 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\ftge.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;  ff1             3    5[BANK0 ] float 
  3969 ;;  ff2             3    8[BANK0 ] float 
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;		None
  3972 ;; Return value:  Size  Location     Type
  3973 ;;		None               void
  3974 ;; Registers used:
  3975 ;;		wreg, status,2, status,0
  3976 ;; Tracked objects:
  3977 ;;		On entry : 0/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3981 ;;      Params:         0       6       0       0       0
  3982 ;;      Locals:         0       0       0       0       0
  3983 ;;      Temps:          0       6       0       0       0
  3984 ;;      Totals:         0      12       0       0       0
  3985 ;;Total ram usage:       12 bytes
  3986 ;; Hardware stack levels used:    1
  3987 ;; Hardware stack levels required when called:    3
  3988 ;; This function calls:
  3989 ;;		Nothing
  3990 ;; This function is called by:
  3991 ;;		_sqrt
  3992 ;; This function uses a non-reentrant model
  3993 ;;
  3994                           
  3995                           
  3996                           ;psect for function ___ftge
  3997  0F37                     ___ftge:	
  3998                           
  3999                           ;incstack = 0
  4000                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  4001  0F37  1283               	bcf	3,5	;RP0=0, select bank0
  4002  0F38  1303               	bcf	3,6	;RP1=0, select bank0
  4003  0F39  1FA7               	btfss	___ftge@ff1+2,7
  4004  0F3A  2F60               	goto	l2356
  4005  0F3B  3000               	movlw	0
  4006  0F3C  00AB               	movwf	??___ftge
  4007  0F3D  3000               	movlw	0
  4008  0F3E  00AC               	movwf	??___ftge+1
  4009  0F3F  3080               	movlw	128
  4010  0F40  00AD               	movwf	??___ftge+2
  4011  0F41  0925               	comf	___ftge@ff1,w
  4012  0F42  00AE               	movwf	??___ftge+3
  4013  0F43  0926               	comf	___ftge@ff1+1,w
  4014  0F44  00AF               	movwf	??___ftge+4
  4015  0F45  0927               	comf	___ftge@ff1+2,w
  4016  0F46  00B0               	movwf	??___ftge+5
  4017  0F47  0AAE               	incf	??___ftge+3,f
  4018  0F48  1903               	skipnz
  4019  0F49  0AAF               	incf	??___ftge+4,f
  4020  0F4A  1903               	skipnz
  4021  0F4B  0AB0               	incf	??___ftge+5,f
  4022  0F4C  082E               	movf	??___ftge+3,w
  4023  0F4D  07AB               	addwf	??___ftge,f
  4024  0F4E  082F               	movf	??___ftge+4,w
  4025  0F4F  1803               	skipnc
  4026  0F50  0F2F               	incfsz	??___ftge+4,w
  4027  0F51  2F53               	goto	u2471
  4028  0F52  2F54               	goto	u2472
  4029  0F53                     u2471:	
  4030  0F53  07AC               	addwf	??___ftge+1,f
  4031  0F54                     u2472:	
  4032  0F54  0830               	movf	??___ftge+5,w
  4033  0F55  1803               	skipnc
  4034  0F56  0F30               	incfsz	??___ftge+5,w
  4035  0F57  2F59               	goto	u2473
  4036  0F58  2F5A               	goto	u2474
  4037  0F59                     u2473:	
  4038  0F59  07AD               	addwf	??___ftge+2,f
  4039  0F5A                     u2474:	
  4040  0F5A  082B               	movf	??___ftge,w
  4041  0F5B  00A5               	movwf	___ftge@ff1
  4042  0F5C  082C               	movf	??___ftge+1,w
  4043  0F5D  00A6               	movwf	___ftge@ff1+1
  4044  0F5E  082D               	movf	??___ftge+2,w
  4045  0F5F  00A7               	movwf	___ftge@ff1+2
  4046  0F60                     l2356:	
  4047  0F60  1FAA               	btfss	___ftge@ff2+2,7
  4048  0F61  2F87               	goto	l2360
  4049  0F62  3000               	movlw	0
  4050  0F63  00AB               	movwf	??___ftge
  4051  0F64  3000               	movlw	0
  4052  0F65  00AC               	movwf	??___ftge+1
  4053  0F66  3080               	movlw	128
  4054  0F67  00AD               	movwf	??___ftge+2
  4055  0F68  0928               	comf	___ftge@ff2,w
  4056  0F69  00AE               	movwf	??___ftge+3
  4057  0F6A  0929               	comf	___ftge@ff2+1,w
  4058  0F6B  00AF               	movwf	??___ftge+4
  4059  0F6C  092A               	comf	___ftge@ff2+2,w
  4060  0F6D  00B0               	movwf	??___ftge+5
  4061  0F6E  0AAE               	incf	??___ftge+3,f
  4062  0F6F  1903               	skipnz
  4063  0F70  0AAF               	incf	??___ftge+4,f
  4064  0F71  1903               	skipnz
  4065  0F72  0AB0               	incf	??___ftge+5,f
  4066  0F73  082E               	movf	??___ftge+3,w
  4067  0F74  07AB               	addwf	??___ftge,f
  4068  0F75  082F               	movf	??___ftge+4,w
  4069  0F76  1803               	skipnc
  4070  0F77  0F2F               	incfsz	??___ftge+4,w
  4071  0F78  2F7A               	goto	u2491
  4072  0F79  2F7B               	goto	u2492
  4073  0F7A                     u2491:	
  4074  0F7A  07AC               	addwf	??___ftge+1,f
  4075  0F7B                     u2492:	
  4076  0F7B  0830               	movf	??___ftge+5,w
  4077  0F7C  1803               	skipnc
  4078  0F7D  0F30               	incfsz	??___ftge+5,w
  4079  0F7E  2F80               	goto	u2493
  4080  0F7F  2F81               	goto	u2494
  4081  0F80                     u2493:	
  4082  0F80  07AD               	addwf	??___ftge+2,f
  4083  0F81                     u2494:	
  4084  0F81  082B               	movf	??___ftge,w
  4085  0F82  00A8               	movwf	___ftge@ff2
  4086  0F83  082C               	movf	??___ftge+1,w
  4087  0F84  00A9               	movwf	___ftge@ff2+1
  4088  0F85  082D               	movf	??___ftge+2,w
  4089  0F86  00AA               	movwf	___ftge@ff2+2
  4090  0F87                     l2360:	
  4091  0F87  3080               	movlw	128
  4092  0F88  06A7               	xorwf	___ftge@ff1+2,f
  4093  0F89  3080               	movlw	128
  4094  0F8A  06AA               	xorwf	___ftge@ff2+2,f
  4095  0F8B  082A               	movf	___ftge@ff2+2,w
  4096  0F8C  0227               	subwf	___ftge@ff1+2,w
  4097  0F8D  1D03               	skipz
  4098  0F8E  0008               	return
  4099  0F8F  0829               	movf	___ftge@ff2+1,w
  4100  0F90  0226               	subwf	___ftge@ff1+1,w
  4101  0F91  1D03               	skipz
  4102  0F92  0008               	return
  4103  0F93  0828               	movf	___ftge@ff2,w
  4104  0F94  0225               	subwf	___ftge@ff1,w
  4105  0F95  0008               	return
  4106  0F96                     __end_of___ftge:	
  4107                           
  4108                           	psect	text17
  4109  0A77                     __ptext17:	
  4110 ;; *************** function _ADC_Available *****************
  4111 ;; Defined at:
  4112 ;;		line 67 in file "ConversorAD.c"
  4113 ;; Parameters:    Size  Location     Type
  4114 ;;		None
  4115 ;; Auto vars:     Size  Location     Type
  4116 ;;		None
  4117 ;; Return value:  Size  Location     Type
  4118 ;;                  1    wreg      unsigned char 
  4119 ;; Registers used:
  4120 ;;		wreg
  4121 ;; Tracked objects:
  4122 ;;		On entry : 0/0
  4123 ;;		On exit  : 0/0
  4124 ;;		Unchanged: 0/0
  4125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4126 ;;      Params:         0       0       0       0       0
  4127 ;;      Locals:         0       0       0       0       0
  4128 ;;      Temps:          0       0       0       0       0
  4129 ;;      Totals:         0       0       0       0       0
  4130 ;;Total ram usage:        0 bytes
  4131 ;; Hardware stack levels used:    1
  4132 ;; Hardware stack levels required when called:    3
  4133 ;; This function calls:
  4134 ;;		Nothing
  4135 ;; This function is called by:
  4136 ;;		_SensoresAnalogicos
  4137 ;; This function uses a non-reentrant model
  4138 ;;
  4139                           
  4140                           
  4141                           ;psect for function _ADC_Available
  4142  0A77                     _ADC_Available:	
  4143                           
  4144                           ;ConversorAD.c: 68: return dadoDisponivel;
  4145                           
  4146                           ;incstack = 0
  4147                           ; Regs used in _ADC_Available: [wreg]
  4148  0A77  1283               	bcf	3,5	;RP0=0, select bank0
  4149  0A78  1303               	bcf	3,6	;RP1=0, select bank0
  4150  0A79  086A               	movf	_dadoDisponivel,w
  4151  0A7A  0008               	return
  4152  0A7B                     __end_of_ADC_Available:	
  4153                           
  4154                           	psect	text18
  4155  0AF0                     __ptext18:	
  4156 ;; *************** function _ADC_Select_Channel *****************
  4157 ;; Defined at:
  4158 ;;		line 61 in file "ConversorAD.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;  ch              1    wreg     unsigned char 
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;  ch              1    7[BANK0 ] unsigned char 
  4163 ;; Return value:  Size  Location     Type
  4164 ;;		None               void
  4165 ;; Registers used:
  4166 ;;		wreg, status,2, status,0
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4172 ;;      Params:         0       0       0       0       0
  4173 ;;      Locals:         0       1       0       0       0
  4174 ;;      Temps:          0       2       0       0       0
  4175 ;;      Totals:         0       3       0       0       0
  4176 ;;Total ram usage:        3 bytes
  4177 ;; Hardware stack levels used:    1
  4178 ;; Hardware stack levels required when called:    3
  4179 ;; This function calls:
  4180 ;;		Nothing
  4181 ;; This function is called by:
  4182 ;;		_SensoresAnalogicos
  4183 ;;		_Setup
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187                           
  4188                           ;psect for function _ADC_Select_Channel
  4189  0AF0                     _ADC_Select_Channel:	
  4190                           
  4191                           ;incstack = 0
  4192                           ; Regs used in _ADC_Select_Channel: [wreg+status,2+status,0]
  4193                           ;ADC_Select_Channel@ch stored from wreg
  4194  0AF0  1283               	bcf	3,5	;RP0=0, select bank0
  4195  0AF1  1303               	bcf	3,6	;RP1=0, select bank0
  4196  0AF2  00A7               	movwf	ADC_Select_Channel@ch
  4197                           
  4198                           ;ConversorAD.c: 62: ADCON0 &= 0b11000111;
  4199  0AF3  30C7               	movlw	199
  4200  0AF4  00A5               	movwf	??_ADC_Select_Channel
  4201  0AF5  0825               	movf	??_ADC_Select_Channel,w
  4202  0AF6  059F               	andwf	31,f	;volatile
  4203                           
  4204                           ;ConversorAD.c: 63: ADCON0 |= (ch<<3);
  4205  0AF7  0827               	movf	ADC_Select_Channel@ch,w
  4206  0AF8  00A5               	movwf	??_ADC_Select_Channel
  4207  0AF9  3002               	movlw	2
  4208  0AFA                     u1565:	
  4209  0AFA  1003               	clrc
  4210  0AFB  0DA5               	rlf	??_ADC_Select_Channel,f
  4211  0AFC  3EFF               	addlw	-1
  4212  0AFD  1D03               	skipz
  4213  0AFE  2AFA               	goto	u1565
  4214  0AFF  1003               	clrc
  4215  0B00  0D25               	rlf	??_ADC_Select_Channel,w
  4216  0B01  00A6               	movwf	??_ADC_Select_Channel+1
  4217  0B02  0826               	movf	??_ADC_Select_Channel+1,w
  4218  0B03  049F               	iorwf	31,f	;volatile
  4219  0B04  0008               	return
  4220  0B05                     __end_of_ADC_Select_Channel:	
  4221                           
  4222                           	psect	text19
  4223  0A89                     __ptext19:	
  4224 ;; *************** function _ADC_Read *****************
  4225 ;; Defined at:
  4226 ;;		line 55 in file "ConversorAD.c"
  4227 ;; Parameters:    Size  Location     Type
  4228 ;;		None
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;		None
  4231 ;; Return value:  Size  Location     Type
  4232 ;;                  2    5[BANK0 ] int 
  4233 ;; Registers used:
  4234 ;;		wreg, status,2, status,0
  4235 ;; Tracked objects:
  4236 ;;		On entry : 0/0
  4237 ;;		On exit  : 0/0
  4238 ;;		Unchanged: 0/0
  4239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4240 ;;      Params:         0       2       0       0       0
  4241 ;;      Locals:         0       0       0       0       0
  4242 ;;      Temps:          0       0       0       0       0
  4243 ;;      Totals:         0       2       0       0       0
  4244 ;;Total ram usage:        2 bytes
  4245 ;; Hardware stack levels used:    1
  4246 ;; Hardware stack levels required when called:    3
  4247 ;; This function calls:
  4248 ;;		Nothing
  4249 ;; This function is called by:
  4250 ;;		_SensoresAnalogicos
  4251 ;; This function uses a non-reentrant model
  4252 ;;
  4253                           
  4254                           
  4255                           ;psect for function _ADC_Read
  4256  0A89                     _ADC_Read:	
  4257                           
  4258                           ;ConversorAD.c: 56: dadoDisponivel = 0;
  4259                           
  4260                           ;incstack = 0
  4261                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  4262  0A89  1283               	bcf	3,5	;RP0=0, select bank0
  4263  0A8A  1303               	bcf	3,6	;RP1=0, select bank0
  4264  0A8B  01EA               	clrf	_dadoDisponivel
  4265                           
  4266                           ;ConversorAD.c: 57: return ((ADRESH<<8) | ADRESL);
  4267  0A8C  081E               	movf	30,w	;volatile
  4268  0A8D  01A6               	clrf	?_ADC_Read+1
  4269  0A8E  07A6               	addwf	?_ADC_Read+1,f
  4270  0A8F  1683               	bsf	3,5	;RP0=1, select bank1
  4271  0A90  1303               	bcf	3,6	;RP1=0, select bank1
  4272  0A91  081E               	movf	30,w	;volatile
  4273  0A92  1283               	bcf	3,5	;RP0=0, select bank0
  4274  0A93  1303               	bcf	3,6	;RP1=0, select bank0
  4275  0A94  01A5               	clrf	?_ADC_Read
  4276  0A95  07A5               	addwf	?_ADC_Read,f
  4277  0A96  0008               	return
  4278  0A97                     __end_of_ADC_Read:	
  4279                           
  4280                           	psect	text20
  4281  0D70                     __ptext20:	
  4282 ;; *************** function _ControleLed *****************
  4283 ;; Defined at:
  4284 ;;		line 163 in file "TCC_Main.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;		None
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;		None
  4289 ;; Return value:  Size  Location     Type
  4290 ;;		None               void
  4291 ;; Registers used:
  4292 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4293 ;; Tracked objects:
  4294 ;;		On entry : 0/0
  4295 ;;		On exit  : 0/0
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4298 ;;      Params:         0       0       0       0       0
  4299 ;;      Locals:         0       0       0       0       0
  4300 ;;      Temps:          0       1       0       0       0
  4301 ;;      Totals:         0       1       0       0       0
  4302 ;;Total ram usage:        1 bytes
  4303 ;; Hardware stack levels used:    1
  4304 ;; Hardware stack levels required when called:    3
  4305 ;; This function calls:
  4306 ;;		Nothing
  4307 ;; This function is called by:
  4308 ;;		_main
  4309 ;; This function uses a non-reentrant model
  4310 ;;
  4311                           
  4312                           
  4313                           ;psect for function _ControleLed
  4314  0D70                     _ControleLed:	
  4315                           
  4316                           ;TCC_Main.c: 164: static char Estado = 0;
  4317                           ;TCC_Main.c: 165: if (TemporizadorLed == 0)
  4318                           
  4319                           ;incstack = 0
  4320                           ; Regs used in _ControleLed: [wreg-fsr0h+status,2+status,0]
  4321  0D70  1683               	bsf	3,5	;RP0=1, select bank1
  4322  0D71  1303               	bcf	3,6	;RP1=0, select bank1
  4323  0D72  082C               	movf	(_TemporizadorLed+1)^(0+128),w
  4324  0D73  042B               	iorwf	_TemporizadorLed^(0+128),w
  4325  0D74  1D03               	skipz
  4326  0D75  0008               	return
  4327  0D76  2DB7               	goto	l2012
  4328  0D77                     l1986:	
  4329                           ;TCC_Main.c: 168: {
  4330                           ;TCC_Main.c: 169: case 0:
  4331                           
  4332                           ;TCC_Main.c: 166: {
  4333                           ;TCC_Main.c: 167: switch(Estado)
  4334                           
  4335                           
  4336                           ;TCC_Main.c: 170: TemporizadorLed = 2000;
  4337  0D77  30D0               	movlw	208
  4338  0D78  00AB               	movwf	_TemporizadorLed^(0+128)
  4339  0D79  3007               	movlw	7
  4340  0D7A  00AC               	movwf	(_TemporizadorLed^(0+128)+1)
  4341                           
  4342                           ;TCC_Main.c: 171: PORTDbits.RD0 = 1;
  4343  0D7B  1283               	bcf	3,5	;RP0=0, select bank0
  4344  0D7C  1303               	bcf	3,6	;RP1=0, select bank0
  4345  0D7D  1408               	bsf	8,0	;volatile
  4346                           
  4347                           ;TCC_Main.c: 172: Estado = 1;
  4348  0D7E  1683               	bsf	3,5	;RP0=1, select bank1
  4349  0D7F  1303               	bcf	3,6	;RP1=0, select bank1
  4350  0D80  01B4               	clrf	ControleLed@Estado^(0+128)
  4351  0D81  0AB4               	incf	ControleLed@Estado^(0+128),f
  4352                           
  4353                           ;TCC_Main.c: 173: break;
  4354  0D82  0008               	return
  4355  0D83                     l248:	
  4356                           ;TCC_Main.c: 174: case 1:
  4357                           
  4358                           
  4359                           ;TCC_Main.c: 175: PORTDbits.RD0 = 0;
  4360  0D83  1283               	bcf	3,5	;RP0=0, select bank0
  4361  0D84  1303               	bcf	3,6	;RP1=0, select bank0
  4362  0D85  1008               	bcf	8,0	;volatile
  4363                           
  4364                           ;TCC_Main.c: 176: if(conectado) {
  4365  0D86  1683               	bsf	3,5	;RP0=1, select bank1
  4366  0D87  1303               	bcf	3,6	;RP1=0, select bank1
  4367  0D88  0838               	movf	_conectado^(0+128),w
  4368  0D89  1903               	btfsc	3,2
  4369  0D8A  2D98               	goto	l1996
  4370                           
  4371                           ;TCC_Main.c: 177: TemporizadorLed = 2000;
  4372  0D8B  30D0               	movlw	208
  4373  0D8C  00AB               	movwf	_TemporizadorLed^(0+128)
  4374  0D8D  3007               	movlw	7
  4375  0D8E  00AC               	movwf	(_TemporizadorLed^(0+128)+1)
  4376                           
  4377                           ;TCC_Main.c: 178: Estado = 2;
  4378  0D8F  3002               	movlw	2
  4379  0D90  1283               	bcf	3,5	;RP0=0, select bank0
  4380  0D91  1303               	bcf	3,6	;RP1=0, select bank0
  4381  0D92  00A5               	movwf	??_ControleLed
  4382  0D93  0825               	movf	??_ControleLed,w
  4383  0D94  1683               	bsf	3,5	;RP0=1, select bank1
  4384  0D95  1303               	bcf	3,6	;RP1=0, select bank1
  4385  0D96  00B4               	movwf	ControleLed@Estado^(0+128)
  4386                           
  4387                           ;TCC_Main.c: 179: } else {
  4388  0D97  0008               	return
  4389  0D98                     l1996:	
  4390                           
  4391                           ;TCC_Main.c: 180: TemporizadorLed = 10000;
  4392  0D98  3010               	movlw	16
  4393  0D99  00AB               	movwf	_TemporizadorLed^(0+128)
  4394  0D9A  3027               	movlw	39
  4395  0D9B  00AC               	movwf	(_TemporizadorLed^(0+128)+1)
  4396                           
  4397                           ;TCC_Main.c: 181: Estado = 0;
  4398  0D9C  01B4               	clrf	ControleLed@Estado^(0+128)
  4399                           
  4400                           ;TCC_Main.c: 182: }
  4401                           ;TCC_Main.c: 183: break;
  4402  0D9D  0008               	return
  4403  0D9E                     l2000:	
  4404                           ;TCC_Main.c: 184: case 2:
  4405                           
  4406                           
  4407                           ;TCC_Main.c: 185: TemporizadorLed = 2000;
  4408  0D9E  30D0               	movlw	208
  4409  0D9F  00AB               	movwf	_TemporizadorLed^(0+128)
  4410  0DA0  3007               	movlw	7
  4411  0DA1  00AC               	movwf	(_TemporizadorLed^(0+128)+1)
  4412                           
  4413                           ;TCC_Main.c: 186: PORTDbits.RD0 = 1;
  4414  0DA2  1283               	bcf	3,5	;RP0=0, select bank0
  4415  0DA3  1303               	bcf	3,6	;RP1=0, select bank0
  4416  0DA4  1408               	bsf	8,0	;volatile
  4417                           
  4418                           ;TCC_Main.c: 187: Estado = 3;
  4419  0DA5  3003               	movlw	3
  4420  0DA6  00A5               	movwf	??_ControleLed
  4421  0DA7  0825               	movf	??_ControleLed,w
  4422  0DA8  1683               	bsf	3,5	;RP0=1, select bank1
  4423  0DA9  1303               	bcf	3,6	;RP1=0, select bank1
  4424  0DAA  00B4               	movwf	ControleLed@Estado^(0+128)
  4425                           
  4426                           ;TCC_Main.c: 188: break;
  4427  0DAB  0008               	return
  4428  0DAC                     l2004:	
  4429                           ;TCC_Main.c: 189: case 3:
  4430                           
  4431                           
  4432                           ;TCC_Main.c: 190: TemporizadorLed = 10000;
  4433  0DAC  3010               	movlw	16
  4434  0DAD  00AB               	movwf	_TemporizadorLed^(0+128)
  4435  0DAE  3027               	movlw	39
  4436  0DAF  00AC               	movwf	(_TemporizadorLed^(0+128)+1)
  4437                           
  4438                           ;TCC_Main.c: 191: PORTDbits.RD0 = 0;
  4439  0DB0  1283               	bcf	3,5	;RP0=0, select bank0
  4440  0DB1  1303               	bcf	3,6	;RP1=0, select bank0
  4441  0DB2  1008               	bcf	8,0	;volatile
  4442                           
  4443                           ;TCC_Main.c: 192: Estado = 0;
  4444  0DB3  1683               	bsf	3,5	;RP0=1, select bank1
  4445  0DB4  1303               	bcf	3,6	;RP1=0, select bank1
  4446  0DB5  01B4               	clrf	ControleLed@Estado^(0+128)
  4447                           
  4448                           ;TCC_Main.c: 194: }
  4449                           
  4450                           ;TCC_Main.c: 193: break;
  4451  0DB6  0008               	return
  4452  0DB7                     l2012:	
  4453  0DB7  0834               	movf	ControleLed@Estado^(0+128),w
  4454                           
  4455                           ; Switch size 1, requested type "space"
  4456                           ; Number of cases is 4, Range of values is 0 to 3
  4457                           ; switch strategies available:
  4458                           ; Name         Instructions Cycles
  4459                           ; simple_byte           13     7 (average)
  4460                           ; direct_byte           20     8 (fixed)
  4461                           ; jumptable            260     6 (fixed)
  4462                           ; rangetable             8     6 (fixed)
  4463                           ; spacedrange           14     9 (fixed)
  4464                           ; locatedrange           4     3 (fixed)
  4465                           ;	Chosen strategy is simple_byte
  4466  0DB8  3A00               	xorlw	0	; case 0
  4467  0DB9  1903               	skipnz
  4468  0DBA  2D77               	goto	l1986
  4469  0DBB  3A01               	xorlw	1	; case 1
  4470  0DBC  1903               	skipnz
  4471  0DBD  2D83               	goto	l248
  4472  0DBE  3A03               	xorlw	3	; case 2
  4473  0DBF  1903               	skipnz
  4474  0DC0  2D9E               	goto	l2000
  4475  0DC1  3A01               	xorlw	1	; case 3
  4476  0DC2  1903               	skipnz
  4477  0DC3  2DAC               	goto	l2004
  4478  0DC4  2DC6               	goto	l253
  4479  0DC5  0008               	return
  4480  0DC6                     l253:	
  4481  0DC6  0008               	return
  4482  0DC7                     __end_of_ControleLed:	
  4483                           
  4484                           	psect	text21
  4485  0755                     __ptext21:	
  4486 ;; *************** function _TrataComandoESP *****************
  4487 ;; Defined at:
  4488 ;;		line 104 in file "TCC_Main.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;		None
  4491 ;; Auto vars:     Size  Location     Type
  4492 ;;  cmd             1   16[BANK0 ] unsigned char 
  4493 ;; Return value:  Size  Location     Type
  4494 ;;		None               void
  4495 ;; Registers used:
  4496 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4497 ;; Tracked objects:
  4498 ;;		On entry : 0/0
  4499 ;;		On exit  : 0/0
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4502 ;;      Params:         0       0       0       0       0
  4503 ;;      Locals:         0       1       0       0       0
  4504 ;;      Temps:          0       1       0       0       0
  4505 ;;      Totals:         0       2       0       0       0
  4506 ;;Total ram usage:        2 bytes
  4507 ;; Hardware stack levels used:    1
  4508 ;; Hardware stack levels required when called:    5
  4509 ;; This function calls:
  4510 ;;		_Serial_Read
  4511 ;;		_Serial_Available
  4512 ;; This function is called by:
  4513 ;;		_main
  4514 ;; This function uses a non-reentrant model
  4515 ;;
  4516                           
  4517                           
  4518                           ;psect for function _TrataComandoESP
  4519  0755                     _TrataComandoESP:	
  4520                           
  4521                           ;TCC_Main.c: 105: static char Estado = 0;
  4522                           ;TCC_Main.c: 107: if(TemporizadorSerialR == 0)
  4523                           
  4524                           ;incstack = 0
  4525                           ; Regs used in _TrataComandoESP: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4526  0755  1683               	bsf	3,5	;RP0=1, select bank1
  4527  0756  1303               	bcf	3,6	;RP1=0, select bank1
  4528  0757  0830               	movf	(_TemporizadorSerialR+1)^(0+128),w
  4529  0758  042F               	iorwf	_TemporizadorSerialR^(0+128),w
  4530  0759  1D03               	skipz
  4531  075A  2FB7               	goto	l2666
  4532                           
  4533                           ;TCC_Main.c: 108: {
  4534                           ;TCC_Main.c: 109: TemporizadorSerialR = 5000;
  4535  075B  3088               	movlw	136
  4536  075C  00AF               	movwf	_TemporizadorSerialR^(0+128)
  4537  075D  3013               	movlw	19
  4538  075E  00B0               	movwf	(_TemporizadorSerialR^(0+128)+1)
  4539                           
  4540                           ;TCC_Main.c: 110: char cmd;
  4541                           ;TCC_Main.c: 112: while(Serial_Available())
  4542  075F  2FA1               	goto	l2664
  4543  0760                     l2638:	
  4544                           ;TCC_Main.c: 115: {
  4545                           ;TCC_Main.c: 116: case 0:
  4546                           
  4547                           ;TCC_Main.c: 113: {
  4548                           ;TCC_Main.c: 114: switch(Estado)
  4549                           
  4550                           
  4551                           ;TCC_Main.c: 117: cmd = Serial_Read();
  4552  0760  120A  158A  231B   	fcall	_Serial_Read
      +       120A  118A         
  4553  0765  1283               	bcf	3,5	;RP0=0, select bank0
  4554  0766  1303               	bcf	3,6	;RP1=0, select bank0
  4555  0767  00AF               	movwf	??_TrataComandoESP
  4556  0768  082F               	movf	??_TrataComandoESP,w
  4557  0769  00B0               	movwf	TrataComandoESP@cmd
  4558                           
  4559                           ;TCC_Main.c: 118: if(cmd == 0xF0)
  4560  076A  0830               	movf	TrataComandoESP@cmd,w
  4561  076B  3AF0               	xorlw	240
  4562  076C  1D03               	skipz
  4563  076D  2F73               	goto	l2644
  4564                           
  4565                           ;TCC_Main.c: 119: Estado = 1;
  4566  076E  1683               	bsf	3,5	;RP0=1, select bank1
  4567  076F  1303               	bcf	3,6	;RP1=0, select bank1
  4568  0770  01B6               	clrf	TrataComandoESP@Estado^(0+128)
  4569  0771  0AB6               	incf	TrataComandoESP@Estado^(0+128),f
  4570  0772  2FA1               	goto	l2664
  4571  0773                     l2644:	
  4572                           
  4573                           ;TCC_Main.c: 120: else if(cmd == 0x0F)
  4574  0773  1283               	bcf	3,5	;RP0=0, select bank0
  4575  0774  0830               	movf	TrataComandoESP@cmd,w
  4576  0775  3A0F               	xorlw	15
  4577  0776  1D03               	skipz
  4578  0777  2FA1               	goto	l2664
  4579                           
  4580                           ;TCC_Main.c: 121: Estado = 2;
  4581  0778  3002               	movlw	2
  4582  0779  00AF               	movwf	??_TrataComandoESP
  4583  077A  082F               	movf	??_TrataComandoESP,w
  4584  077B  1683               	bsf	3,5	;RP0=1, select bank1
  4585  077C  1303               	bcf	3,6	;RP1=0, select bank1
  4586  077D  00B6               	movwf	TrataComandoESP@Estado^(0+128)
  4587                           
  4588                           ;TCC_Main.c: 122: break;
  4589  077E  2FA1               	goto	l2664
  4590  077F                     l227:	
  4591                           ;TCC_Main.c: 123: case 1:
  4592                           
  4593                           
  4594                           ;TCC_Main.c: 124: clearPORTB = 1;
  4595  077F  01B7               	clrf	_clearPORTB^(0+128)
  4596  0780  0AB7               	incf	_clearPORTB^(0+128),f
  4597                           
  4598                           ;TCC_Main.c: 125: TemporizadorPortb = 10000;
  4599  0781  3010               	movlw	16
  4600  0782  00AD               	movwf	_TemporizadorPortb^(0+128)
  4601  0783  3027               	movlw	39
  4602  0784  00AE               	movwf	(_TemporizadorPortb^(0+128)+1)
  4603                           
  4604                           ;TCC_Main.c: 126: PORTB = Serial_Read();
  4605  0785  120A  158A  231B   	fcall	_Serial_Read
      +       120A  118A         
  4606  078A  1283               	bcf	3,5	;RP0=0, select bank0
  4607  078B  1303               	bcf	3,6	;RP1=0, select bank0
  4608  078C  0086               	movwf	6	;volatile
  4609                           
  4610                           ;TCC_Main.c: 127: Estado = 0;
  4611  078D  1683               	bsf	3,5	;RP0=1, select bank1
  4612  078E  1303               	bcf	3,6	;RP1=0, select bank1
  4613  078F  2FA0               	goto	l230
  4614  0790                     l2654:	
  4615                           ;TCC_Main.c: 129: case 2:
  4616                           
  4617                           ;TCC_Main.c: 128: break;
  4618                           
  4619                           
  4620                           ;TCC_Main.c: 130: if(Serial_Read() == 1)
  4621  0790  120A  158A  231B   	fcall	_Serial_Read
      +       120A  118A         
  4622  0795  3A01               	xorlw	1
  4623  0796  1D03               	skipz
  4624  0797  2F9D               	goto	l2658
  4625                           
  4626                           ;TCC_Main.c: 131: conectado = 1;
  4627  0798  1683               	bsf	3,5	;RP0=1, select bank1
  4628  0799  1303               	bcf	3,6	;RP1=0, select bank1
  4629  079A  01B8               	clrf	_conectado^(0+128)
  4630  079B  0AB8               	incf	_conectado^(0+128),f
  4631  079C  2FA0               	goto	l230
  4632  079D                     l2658:	
  4633                           
  4634                           ;TCC_Main.c: 132: else
  4635                           ;TCC_Main.c: 133: conectado = 0;
  4636  079D  1683               	bsf	3,5	;RP0=1, select bank1
  4637  079E  1303               	bcf	3,6	;RP1=0, select bank1
  4638  079F  01B8               	clrf	_conectado^(0+128)
  4639  07A0                     l230:	
  4640                           
  4641                           ;TCC_Main.c: 134: Estado = 0;
  4642  07A0  01B6               	clrf	TrataComandoESP@Estado^(0+128)
  4643  07A1                     l2664:	
  4644                           ;TCC_Main.c: 136: }
  4645                           
  4646                           ;TCC_Main.c: 135: break;
  4647                           
  4648  07A1  120A  158A  227B   	fcall	_Serial_Available
      +       120A  118A         
  4649  07A6  3800               	iorlw	0
  4650  07A7  1903               	btfsc	3,2
  4651  07A8  2FB7               	goto	l2666
  4652  07A9  1683               	bsf	3,5	;RP0=1, select bank1
  4653  07AA  1303               	bcf	3,6	;RP1=0, select bank1
  4654  07AB  0836               	movf	TrataComandoESP@Estado^(0+128),w
  4655                           
  4656                           ; Switch size 1, requested type "space"
  4657                           ; Number of cases is 3, Range of values is 0 to 2
  4658                           ; switch strategies available:
  4659                           ; Name         Instructions Cycles
  4660                           ; simple_byte           10     6 (average)
  4661                           ; direct_byte           17     8 (fixed)
  4662                           ; jumptable            260     6 (fixed)
  4663                           ; rangetable             7     6 (fixed)
  4664                           ; spacedrange           12     9 (fixed)
  4665                           ; locatedrange           3     3 (fixed)
  4666                           ;	Chosen strategy is simple_byte
  4667  07AC  3A00               	xorlw	0	; case 0
  4668  07AD  1903               	skipnz
  4669  07AE  2F60               	goto	l2638
  4670  07AF  3A01               	xorlw	1	; case 1
  4671  07B0  1903               	skipnz
  4672  07B1  2F7F               	goto	l227
  4673  07B2  3A03               	xorlw	3	; case 2
  4674  07B3  1903               	skipnz
  4675  07B4  2F90               	goto	l2654
  4676  07B5  2FA1               	goto	l2664
  4677  07B6  2FA1               	goto	l2664
  4678  07B7                     l2666:	
  4679                           
  4680                           ;TCC_Main.c: 137: }
  4681                           ;TCC_Main.c: 138: }
  4682                           ;TCC_Main.c: 140: if(clearPORTB == 1 && TemporizadorPortb == 0)
  4683  07B7  1683               	bsf	3,5	;RP0=1, select bank1
  4684  07B8  1303               	bcf	3,6	;RP1=0, select bank1
  4685  07B9  0837               	movf	_clearPORTB^(0+128),w
  4686  07BA  3A01               	xorlw	1
  4687  07BB  1D03               	skipz
  4688  07BC  0008               	return
  4689  07BD  082E               	movf	(_TemporizadorPortb+1)^(0+128),w
  4690  07BE  042D               	iorwf	_TemporizadorPortb^(0+128),w
  4691  07BF  1D03               	skipz
  4692  07C0  0008               	return
  4693                           
  4694                           ;TCC_Main.c: 141: {
  4695                           ;TCC_Main.c: 142: clearPORTB = 0;
  4696  07C1  01B7               	clrf	_clearPORTB^(0+128)
  4697                           
  4698                           ;TCC_Main.c: 143: PORTB = 0;
  4699  07C2  1283               	bcf	3,5	;RP0=0, select bank0
  4700  07C3  1303               	bcf	3,6	;RP1=0, select bank0
  4701  07C4  0186               	clrf	6	;volatile
  4702  07C5  0008               	return
  4703  07C6                     __end_of_TrataComandoESP:	
  4704                           
  4705                           	psect	text22
  4706  0A7B                     __ptext22:	
  4707 ;; *************** function _Serial_Available *****************
  4708 ;; Defined at:
  4709 ;;		line 77 in file "Serial.c"
  4710 ;; Parameters:    Size  Location     Type
  4711 ;;		None
  4712 ;; Auto vars:     Size  Location     Type
  4713 ;;		None
  4714 ;; Return value:  Size  Location     Type
  4715 ;;                  1    wreg      unsigned char 
  4716 ;; Registers used:
  4717 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4718 ;; Tracked objects:
  4719 ;;		On entry : 0/0
  4720 ;;		On exit  : 0/0
  4721 ;;		Unchanged: 0/0
  4722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4723 ;;      Params:         0       0       0       0       0
  4724 ;;      Locals:         0       0       0       0       0
  4725 ;;      Temps:          0       0       0       0       0
  4726 ;;      Totals:         0       0       0       0       0
  4727 ;;Total ram usage:        0 bytes
  4728 ;; Hardware stack levels used:    1
  4729 ;; Hardware stack levels required when called:    4
  4730 ;; This function calls:
  4731 ;;		_estaVazia
  4732 ;; This function is called by:
  4733 ;;		_TrataComandoESP
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           
  4738                           ;psect for function _Serial_Available
  4739  0A7B                     _Serial_Available:	
  4740                           
  4741                           ;Serial.c: 78: return (!estaVazia(&BufferRead));
  4742                           
  4743                           ;incstack = 0
  4744                           ; Regs used in _Serial_Available: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4745  0A7B  30B9               	movlw	_BufferRead& (0+255)
  4746  0A7C  1283               	bcf	3,5	;RP0=0, select bank0
  4747  0A7D  1303               	bcf	3,6	;RP1=0, select bank0
  4748  0A7E  00A5               	movwf	?_estaVazia
  4749  0A7F  3000               	movlw	0
  4750  0A80  00A6               	movwf	?_estaVazia+1
  4751  0A81  120A  158A  22C9   	fcall	_estaVazia
  4752  0A84  3A00               	xorlw	0
  4753  0A85  3000               	movlw	0
  4754  0A86  1903               	skipnz
  4755  0A87  3001               	movlw	1
  4756  0A88  0008               	return
  4757  0A89                     __end_of_Serial_Available:	
  4758                           
  4759                           	psect	text23
  4760  0B1B                     __ptext23:	
  4761 ;; *************** function _Serial_Read *****************
  4762 ;; Defined at:
  4763 ;;		line 69 in file "Serial.c"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;		None
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;		None
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  1    wreg      unsigned char 
  4770 ;; Registers used:
  4771 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4772 ;; Tracked objects:
  4773 ;;		On entry : 0/0
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4777 ;;      Params:         0       0       0       0       0
  4778 ;;      Locals:         0       0       0       0       0
  4779 ;;      Temps:          0       0       0       0       0
  4780 ;;      Totals:         0       0       0       0       0
  4781 ;;Total ram usage:        0 bytes
  4782 ;; Hardware stack levels used:    1
  4783 ;; Hardware stack levels required when called:    4
  4784 ;; This function calls:
  4785 ;;		_estaVazia
  4786 ;;		_remover
  4787 ;; This function is called by:
  4788 ;;		_TrataComandoESP
  4789 ;; This function uses a non-reentrant model
  4790 ;;
  4791                           
  4792                           
  4793                           ;psect for function _Serial_Read
  4794  0B1B                     _Serial_Read:	
  4795                           
  4796                           ;Serial.c: 70: if(!estaVazia(&BufferRead))
  4797                           
  4798                           ;incstack = 0
  4799                           ; Regs used in _Serial_Read: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4800  0B1B  30B9               	movlw	_BufferRead& (0+255)
  4801  0B1C  1283               	bcf	3,5	;RP0=0, select bank0
  4802  0B1D  1303               	bcf	3,6	;RP1=0, select bank0
  4803  0B1E  00A5               	movwf	?_estaVazia
  4804  0B1F  3000               	movlw	0
  4805  0B20  00A6               	movwf	?_estaVazia+1
  4806  0B21  120A  158A  22C9   	fcall	_estaVazia
      +       120A  158A         
  4807  0B26  3800               	iorlw	0
  4808  0B27  1D03               	skipz
  4809  0B28  2B33               	goto	l2590
  4810                           
  4811                           ;Serial.c: 71: return remover(&BufferRead);
  4812  0B29  30B9               	movlw	_BufferRead& (0+255)
  4813  0B2A  1283               	bcf	3,5	;RP0=0, select bank0
  4814  0B2B  1303               	bcf	3,6	;RP1=0, select bank0
  4815  0B2C  00A5               	movwf	?_remover
  4816  0B2D  3000               	movlw	0
  4817  0B2E  00A6               	movwf	?_remover+1
  4818  0B2F  120A  158A  26D9   	fcall	_remover
  4819  0B32  0008               	return
  4820  0B33                     l2590:	
  4821                           
  4822                           ;Serial.c: 72: else
  4823                           ;Serial.c: 73: return 0;
  4824  0B33  3000               	movlw	0
  4825  0B34  0008               	return
  4826  0B35                     __end_of_Serial_Read:	
  4827                           
  4828                           	psect	text24
  4829  0ED9                     __ptext24:	
  4830 ;; *************** function _remover *****************
  4831 ;; Defined at:
  4832 ;;		line 101 in file "Serial.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;  buf             2    5[BANK0 ] PTR struct fila
  4835 ;;		 -> BufferRead(19), BufferWrite(19), 
  4836 ;; Auto vars:     Size  Location     Type
  4837 ;;  temp            2   13[BANK0 ] int 
  4838 ;; Return value:  Size  Location     Type
  4839 ;;                  1    wreg      unsigned char 
  4840 ;; Registers used:
  4841 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4842 ;; Tracked objects:
  4843 ;;		On entry : 0/0
  4844 ;;		On exit  : 0/0
  4845 ;;		Unchanged: 0/0
  4846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4847 ;;      Params:         0       2       0       0       0
  4848 ;;      Locals:         0       2       0       0       0
  4849 ;;      Temps:          0       6       0       0       0
  4850 ;;      Totals:         0      10       0       0       0
  4851 ;;Total ram usage:       10 bytes
  4852 ;; Hardware stack levels used:    1
  4853 ;; Hardware stack levels required when called:    3
  4854 ;; This function calls:
  4855 ;;		Nothing
  4856 ;; This function is called by:
  4857 ;;		_Serial_Read
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           
  4862                           ;psect for function _remover
  4863  0ED9                     _remover:	
  4864                           
  4865                           ;Serial.c: 102: int temp = buf->dados[buf->primeiro++];
  4866                           
  4867                           ;incstack = 0
  4868                           ; Regs used in _remover: [wreg-fsr0h+status,2+status,0]
  4869  0ED9  3010               	movlw	16
  4870  0EDA  1283               	bcf	3,5	;RP0=0, select bank0
  4871  0EDB  1303               	bcf	3,6	;RP1=0, select bank0
  4872  0EDC  0725               	addwf	remover@buf,w
  4873  0EDD  00A7               	movwf	??_remover
  4874  0EDE  0826               	movf	remover@buf+1,w
  4875  0EDF  1803               	skipnc
  4876  0EE0  3E01               	addlw	1
  4877  0EE1  00A8               	movwf	??_remover+1
  4878  0EE2  0827               	movf	??_remover,w
  4879  0EE3  0084               	movwf	4
  4880  0EE4  1783               	bsf	3,7
  4881  0EE5  1C28               	btfss	??_remover+1,0
  4882  0EE6  1383               	bcf	3,7
  4883  0EE7  0800               	movf	0,w
  4884  0EE8  0725               	addwf	remover@buf,w
  4885  0EE9  00A9               	movwf	??_remover+2
  4886  0EEA  0826               	movf	remover@buf+1,w
  4887  0EEB  1803               	skipnc
  4888  0EEC  3E01               	addlw	1
  4889  0EED  00AA               	movwf	??_remover+3
  4890  0EEE  0829               	movf	??_remover+2,w
  4891  0EEF  0084               	movwf	4
  4892  0EF0  1783               	bsf	3,7
  4893  0EF1  1C2A               	btfss	??_remover+3,0
  4894  0EF2  1383               	bcf	3,7
  4895  0EF3  0800               	movf	0,w
  4896  0EF4  00AB               	movwf	??_remover+4
  4897  0EF5  01AC               	clrf	??_remover+5
  4898  0EF6  082B               	movf	??_remover+4,w
  4899  0EF7  00AD               	movwf	remover@temp
  4900  0EF8  082C               	movf	??_remover+5,w
  4901  0EF9  00AE               	movwf	remover@temp+1
  4902  0EFA  3001               	movlw	1
  4903  0EFB  00A7               	movwf	??_remover
  4904  0EFC  3010               	movlw	16
  4905  0EFD  0725               	addwf	remover@buf,w
  4906  0EFE  00A8               	movwf	??_remover+1
  4907  0EFF  0826               	movf	remover@buf+1,w
  4908  0F00  1803               	skipnc
  4909  0F01  3E01               	addlw	1
  4910  0F02  00A9               	movwf	??_remover+2
  4911  0F03  0828               	movf	??_remover+1,w
  4912  0F04  0084               	movwf	4
  4913  0F05  1783               	bsf	3,7
  4914  0F06  1C29               	btfss	??_remover+2,0
  4915  0F07  1383               	bcf	3,7
  4916  0F08  0827               	movf	??_remover,w
  4917  0F09  0780               	addwf	0,f
  4918                           
  4919                           ;Serial.c: 104: if(buf->primeiro == 16)
  4920  0F0A  3010               	movlw	16
  4921  0F0B  0725               	addwf	remover@buf,w
  4922  0F0C  00A7               	movwf	??_remover
  4923  0F0D  0826               	movf	remover@buf+1,w
  4924  0F0E  1803               	skipnc
  4925  0F0F  3E01               	addlw	1
  4926  0F10  00A8               	movwf	??_remover+1
  4927  0F11  0827               	movf	??_remover,w
  4928  0F12  0084               	movwf	4
  4929  0F13  1783               	bsf	3,7
  4930  0F14  1C28               	btfss	??_remover+1,0
  4931  0F15  1383               	bcf	3,7
  4932  0F16  0800               	movf	0,w
  4933  0F17  3A10               	xorlw	16
  4934  0F18  1D03               	skipz
  4935  0F19  2F27               	goto	l68
  4936                           
  4937                           ;Serial.c: 105: buf->primeiro = 0;
  4938  0F1A  3010               	movlw	16
  4939  0F1B  0725               	addwf	remover@buf,w
  4940  0F1C  00A7               	movwf	??_remover
  4941  0F1D  0826               	movf	remover@buf+1,w
  4942  0F1E  1803               	skipnc
  4943  0F1F  3E01               	addlw	1
  4944  0F20  00A8               	movwf	??_remover+1
  4945  0F21  0827               	movf	??_remover,w
  4946  0F22  0084               	movwf	4
  4947  0F23  1783               	bsf	3,7
  4948  0F24  1C28               	btfss	??_remover+1,0
  4949  0F25  1383               	bcf	3,7
  4950  0F26  0180               	clrf	0
  4951  0F27                     l68:	
  4952                           
  4953                           ;Serial.c: 107: buf->nItens--;
  4954  0F27  3012               	movlw	18
  4955  0F28  0725               	addwf	remover@buf,w
  4956  0F29  00A7               	movwf	??_remover
  4957  0F2A  0826               	movf	remover@buf+1,w
  4958  0F2B  1803               	skipnc
  4959  0F2C  3E01               	addlw	1
  4960  0F2D  00A8               	movwf	??_remover+1
  4961  0F2E  0827               	movf	??_remover,w
  4962  0F2F  0084               	movwf	4
  4963  0F30  1783               	bsf	3,7
  4964  0F31  1C28               	btfss	??_remover+1,0
  4965  0F32  1383               	bcf	3,7
  4966  0F33  3001               	movlw	1
  4967  0F34  0280               	subwf	0,f
  4968                           
  4969                           ;Serial.c: 108: return temp;
  4970  0F35  082D               	movf	remover@temp,w
  4971  0F36  0008               	return
  4972  0F37                     __end_of_remover:	
  4973                           
  4974                           	psect	text25
  4975  0AC9                     __ptext25:	
  4976 ;; *************** function _estaVazia *****************
  4977 ;; Defined at:
  4978 ;;		line 112 in file "Serial.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;  buf             2    5[BANK0 ] PTR struct fila
  4981 ;;		 -> BufferRead(19), BufferWrite(19), 
  4982 ;; Auto vars:     Size  Location     Type
  4983 ;;		None
  4984 ;; Return value:  Size  Location     Type
  4985 ;;                  1    wreg      unsigned char 
  4986 ;; Registers used:
  4987 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4988 ;; Tracked objects:
  4989 ;;		On entry : 0/0
  4990 ;;		On exit  : 0/0
  4991 ;;		Unchanged: 0/0
  4992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4993 ;;      Params:         0       2       0       0       0
  4994 ;;      Locals:         0       0       0       0       0
  4995 ;;      Temps:          0       2       0       0       0
  4996 ;;      Totals:         0       4       0       0       0
  4997 ;;Total ram usage:        4 bytes
  4998 ;; Hardware stack levels used:    1
  4999 ;; Hardware stack levels required when called:    3
  5000 ;; This function calls:
  5001 ;;		Nothing
  5002 ;; This function is called by:
  5003 ;;		_Serial_Read
  5004 ;;		_Serial_Available
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008                           
  5009                           ;psect for function _estaVazia
  5010  0AC9                     _estaVazia:	
  5011                           
  5012                           ;Serial.c: 113: return (buf->nItens==0);
  5013                           
  5014                           ;incstack = 0
  5015                           ; Regs used in _estaVazia: [wreg-fsr0h+status,2+status,0]
  5016  0AC9  3012               	movlw	18
  5017  0ACA  1283               	bcf	3,5	;RP0=0, select bank0
  5018  0ACB  1303               	bcf	3,6	;RP1=0, select bank0
  5019  0ACC  0725               	addwf	estaVazia@buf,w
  5020  0ACD  00A7               	movwf	??_estaVazia
  5021  0ACE  0826               	movf	estaVazia@buf+1,w
  5022  0ACF  1803               	skipnc
  5023  0AD0  3E01               	addlw	1
  5024  0AD1  00A8               	movwf	??_estaVazia+1
  5025  0AD2  0827               	movf	??_estaVazia,w
  5026  0AD3  0084               	movwf	4
  5027  0AD4  1783               	bsf	3,7
  5028  0AD5  1C28               	btfss	??_estaVazia+1,0
  5029  0AD6  1383               	bcf	3,7
  5030  0AD7  0880               	movf	0,f
  5031  0AD8  3000               	movlw	0
  5032  0AD9  1903               	skipnz
  5033  0ADA  3001               	movlw	1
  5034  0ADB  0008               	return
  5035  0ADC                     __end_of_estaVazia:	
  5036                           
  5037                           	psect	text26
  5038  06C6                     __ptext26:	
  5039 ;; *************** function _EnvioDadosSerial *****************
  5040 ;; Defined at:
  5041 ;;		line 72 in file "TCC_Main.c"
  5042 ;; Parameters:    Size  Location     Type
  5043 ;;		None
  5044 ;; Auto vars:     Size  Location     Type
  5045 ;;  i               1    0        unsigned char 
  5046 ;; Return value:  Size  Location     Type
  5047 ;;		None               void
  5048 ;; Registers used:
  5049 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5050 ;; Tracked objects:
  5051 ;;		On entry : 0/0
  5052 ;;		On exit  : 0/0
  5053 ;;		Unchanged: 0/0
  5054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5055 ;;      Params:         0       0       0       0       0
  5056 ;;      Locals:         0       0       0       0       0
  5057 ;;      Temps:          0       1       0       0       0
  5058 ;;      Totals:         0       1       0       0       0
  5059 ;;Total ram usage:        1 bytes
  5060 ;; Hardware stack levels used:    1
  5061 ;; Hardware stack levels required when called:    5
  5062 ;; This function calls:
  5063 ;;		_Serial_Write
  5064 ;; This function is called by:
  5065 ;;		_main
  5066 ;; This function uses a non-reentrant model
  5067 ;;
  5068                           
  5069                           
  5070                           ;psect for function _EnvioDadosSerial
  5071  06C6                     _EnvioDadosSerial:	
  5072                           
  5073                           ;TCC_Main.c: 73: if(TemporizadorSerialW == 0)
  5074                           
  5075                           ;incstack = 0
  5076                           ; Regs used in _EnvioDadosSerial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5077  06C6  1683               	bsf	3,5	;RP0=1, select bank1
  5078  06C7  1303               	bcf	3,6	;RP1=0, select bank1
  5079  06C8  0861               	movf	(_TemporizadorSerialW+1)^(0+128),w
  5080  06C9  0460               	iorwf	_TemporizadorSerialW^(0+128),w
  5081  06CA  1D03               	skipz
  5082  06CB  0008               	return
  5083                           
  5084                           ;TCC_Main.c: 74: {
  5085                           ;TCC_Main.c: 75: char i;
  5086                           ;TCC_Main.c: 76: ModuloCM.status = 0xFF;
  5087  06CC  30FF               	movlw	255
  5088  06CD  1283               	bcf	3,5	;RP0=0, select bank0
  5089  06CE  1303               	bcf	3,6	;RP1=0, select bank0
  5090  06CF  00AF               	movwf	??_EnvioDadosSerial
  5091  06D0  082F               	movf	??_EnvioDadosSerial,w
  5092  06D1  1683               	bsf	3,5	;RP0=1, select bank1
  5093  06D2  1303               	bcf	3,6	;RP1=0, select bank1
  5094  06D3  00E2               	movwf	_ModuloCM^(0+128)
  5095                           
  5096                           ;TCC_Main.c: 83: Serial_Write(0xFF);
  5097  06D4  30FF               	movlw	255
  5098  06D5  120A  158A  236E   	fcall	_Serial_Write
      +       120A  118A         
  5099                           
  5100                           ;TCC_Main.c: 84: Serial_Write(0xFF);
  5101  06DA  30FF               	movlw	255
  5102  06DB  120A  158A  236E   	fcall	_Serial_Write
      +       120A  118A         
  5103                           
  5104                           ;TCC_Main.c: 85: Serial_Write(Tensao[0]);
  5105  06E0  1683               	bsf	3,5	;RP0=1, select bank1
  5106  06E1  1303               	bcf	3,6	;RP1=0, select bank1
  5107  06E2  0824               	movf	_Tensao^(0+128),w
  5108  06E3  120A  158A  236E   	fcall	_Serial_Write
      +       120A  118A         
  5109                           
  5110                           ;TCC_Main.c: 86: Serial_Write(Tensao[1]);
  5111  06E8  1683               	bsf	3,5	;RP0=1, select bank1
  5112  06E9  1303               	bcf	3,6	;RP1=0, select bank1
  5113  06EA  0825               	movf	(_Tensao^(0+128)+1),w
  5114  06EB  120A  158A  236E   	fcall	_Serial_Write
      +       120A  118A         
  5115                           
  5116                           ;TCC_Main.c: 87: Serial_Write(Tensao[2]);
  5117  06F0  1683               	bsf	3,5	;RP0=1, select bank1
  5118  06F1  1303               	bcf	3,6	;RP1=0, select bank1
  5119  06F2  0826               	movf	(_Tensao^(0+128)+2),w
  5120  06F3  120A  158A  236E   	fcall	_Serial_Write
      +       120A  118A         
  5121                           
  5122                           ;TCC_Main.c: 88: Serial_Write(ModuloCM.status);
  5123  06F8  1683               	bsf	3,5	;RP0=1, select bank1
  5124  06F9  1303               	bcf	3,6	;RP1=0, select bank1
  5125  06FA  0862               	movf	_ModuloCM^(0+128),w
  5126  06FB  120A  158A  236E   	fcall	_Serial_Write
      +       120A  118A         
  5127                           
  5128                           ;TCC_Main.c: 89: Serial_Write(ModuloCM.corrente[0]>>8);
  5129  0700  1683               	bsf	3,5	;RP0=1, select bank1
  5130  0701  1303               	bcf	3,6	;RP1=0, select bank1
  5131  0702  0864               	movf	((_ModuloCM+1)^(0+128)+1),w
  5132  0703  120A  158A  236E   	fcall	_Serial_Write
      +       120A  118A         
  5133                           
  5134                           ;TCC_Main.c: 90: Serial_Write(ModuloCM.corrente[0]&0x00FF);
  5135  0708  1683               	bsf	3,5	;RP0=1, select bank1
  5136  0709  1303               	bcf	3,6	;RP1=0, select bank1
  5137  070A  0863               	movf	(_ModuloCM^(0+128)+1),w
  5138  070B  120A  158A  236E   	fcall	_Serial_Write
      +       120A  118A         
  5139                           
  5140                           ;TCC_Main.c: 91: Serial_Write(ModuloCM.corrente[1]>>8);
  5141  0710  1683               	bsf	3,5	;RP0=1, select bank1
  5142  0711  1303               	bcf	3,6	;RP1=0, select bank1
  5143  0712  0866               	movf	((_ModuloCM+1)^(0+128)+3),w
  5144  0713  120A  158A  236E   	fcall	_Serial_Write
      +       120A  118A         
  5145                           
  5146                           ;TCC_Main.c: 92: Serial_Write(ModuloCM.corrente[1]&0x00FF);
  5147  0718  1683               	bsf	3,5	;RP0=1, select bank1
  5148  0719  1303               	bcf	3,6	;RP1=0, select bank1
  5149  071A  0865               	movf	(_ModuloCM^(0+128)+3),w
  5150  071B  120A  158A  236E   	fcall	_Serial_Write
      +       120A  118A         
  5151                           
  5152                           ;TCC_Main.c: 93: Serial_Write(ModuloCM.corrente[2]>>8);
  5153  0720  1683               	bsf	3,5	;RP0=1, select bank1
  5154  0721  1303               	bcf	3,6	;RP1=0, select bank1
  5155  0722  0868               	movf	((_ModuloCM+1)^(0+128)+5),w
  5156  0723  120A  158A  236E   	fcall	_Serial_Write
      +       120A  118A         
  5157                           
  5158                           ;TCC_Main.c: 94: Serial_Write(ModuloCM.corrente[2]&0x00FF);
  5159  0728  1683               	bsf	3,5	;RP0=1, select bank1
  5160  0729  1303               	bcf	3,6	;RP1=0, select bank1
  5161  072A  0867               	movf	(_ModuloCM^(0+128)+5),w
  5162  072B  120A  158A  236E   	fcall	_Serial_Write
      +       120A  118A         
  5163                           
  5164                           ;TCC_Main.c: 95: Serial_Write(ModuloCM.corrente[3]>>8);
  5165  0730  1683               	bsf	3,5	;RP0=1, select bank1
  5166  0731  1303               	bcf	3,6	;RP1=0, select bank1
  5167  0732  086A               	movf	((_ModuloCM+1)^(0+128)+7),w
  5168  0733  120A  158A  236E   	fcall	_Serial_Write
      +       120A  118A         
  5169                           
  5170                           ;TCC_Main.c: 96: Serial_Write(ModuloCM.corrente[3]&0x00FF);
  5171  0738  1683               	bsf	3,5	;RP0=1, select bank1
  5172  0739  1303               	bcf	3,6	;RP1=0, select bank1
  5173  073A  0869               	movf	(_ModuloCM^(0+128)+7),w
  5174  073B  120A  158A  236E   	fcall	_Serial_Write
      +       120A  118A         
  5175                           
  5176                           ;TCC_Main.c: 97: Serial_Write(RTC.hora);
  5177  0740  1683               	bsf	3,5	;RP0=1, select bank1
  5178  0741  1303               	bcf	3,6	;RP1=0, select bank1
  5179  0742  0829               	movf	_RTC^(0+128),w
  5180  0743  120A  158A  236E   	fcall	_Serial_Write
      +       120A  118A         
  5181                           
  5182                           ;TCC_Main.c: 98: Serial_Write(RTC.minuto);
  5183  0748  1683               	bsf	3,5	;RP0=1, select bank1
  5184  0749  1303               	bcf	3,6	;RP1=0, select bank1
  5185  074A  082A               	movf	(_RTC^(0+128)+1),w
  5186  074B  120A  158A  236E   	fcall	_Serial_Write
  5187                           
  5188                           ;TCC_Main.c: 99: TemporizadorSerialW = 30000;
  5189  074E  3030               	movlw	48
  5190  074F  1683               	bsf	3,5	;RP0=1, select bank1
  5191  0750  1303               	bcf	3,6	;RP1=0, select bank1
  5192  0751  00E0               	movwf	_TemporizadorSerialW^(0+128)
  5193  0752  3075               	movlw	117
  5194  0753  00E1               	movwf	(_TemporizadorSerialW^(0+128)+1)
  5195  0754  0008               	return
  5196  0755                     __end_of_EnvioDadosSerial:	
  5197                           
  5198                           	psect	text27
  5199  0B6E                     __ptext27:	
  5200 ;; *************** function _Serial_Write *****************
  5201 ;; Defined at:
  5202 ;;		line 63 in file "Serial.c"
  5203 ;; Parameters:    Size  Location     Type
  5204 ;;  Valor           1    wreg     unsigned char 
  5205 ;; Auto vars:     Size  Location     Type
  5206 ;;  Valor           1   14[BANK0 ] unsigned char 
  5207 ;; Return value:  Size  Location     Type
  5208 ;;		None               void
  5209 ;; Registers used:
  5210 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5211 ;; Tracked objects:
  5212 ;;		On entry : 0/0
  5213 ;;		On exit  : 0/0
  5214 ;;		Unchanged: 0/0
  5215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5216 ;;      Params:         0       0       0       0       0
  5217 ;;      Locals:         0       1       0       0       0
  5218 ;;      Temps:          0       1       0       0       0
  5219 ;;      Totals:         0       2       0       0       0
  5220 ;;Total ram usage:        2 bytes
  5221 ;; Hardware stack levels used:    1
  5222 ;; Hardware stack levels required when called:    4
  5223 ;; This function calls:
  5224 ;;		_estaCheia
  5225 ;;		_inserir
  5226 ;; This function is called by:
  5227 ;;		_EnvioDadosSerial
  5228 ;; This function uses a non-reentrant model
  5229 ;;
  5230                           
  5231                           
  5232                           ;psect for function _Serial_Write
  5233  0B6E                     _Serial_Write:	
  5234                           
  5235                           ;incstack = 0
  5236                           ; Regs used in _Serial_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5237                           ;Serial_Write@Valor stored from wreg
  5238  0B6E  1283               	bcf	3,5	;RP0=0, select bank0
  5239  0B6F  1303               	bcf	3,6	;RP1=0, select bank0
  5240  0B70  00AE               	movwf	Serial_Write@Valor
  5241                           
  5242                           ;Serial.c: 64: if(!estaCheia(&BufferWrite))
  5243  0B71  3090               	movlw	_BufferWrite& (0+255)
  5244  0B72  00A5               	movwf	?_estaCheia
  5245  0B73  3001               	movlw	1
  5246  0B74  00A6               	movwf	?_estaCheia+1
  5247  0B75  120A  158A  22DC   	fcall	_estaCheia
      +       120A  158A         
  5248  0B7A  3800               	iorlw	0
  5249  0B7B  1D03               	skipz
  5250  0B7C  0008               	return
  5251                           
  5252                           ;Serial.c: 65: inserir(&BufferWrite, Valor);
  5253  0B7D  3090               	movlw	_BufferWrite& (0+255)
  5254  0B7E  1283               	bcf	3,5	;RP0=0, select bank0
  5255  0B7F  1303               	bcf	3,6	;RP1=0, select bank0
  5256  0B80  00A5               	movwf	?_inserir
  5257  0B81  3001               	movlw	1
  5258  0B82  00A6               	movwf	?_inserir+1
  5259  0B83  082E               	movf	Serial_Write@Valor,w
  5260  0B84  00AD               	movwf	??_Serial_Write
  5261  0B85  082D               	movf	??_Serial_Write,w
  5262  0B86  00A7               	movwf	?_inserir+2
  5263  0B87  120A  158A  267D   	fcall	_inserir
  5264  0B8A  0008               	return
  5265  0B8B                     __end_of_Serial_Write:	
  5266                           
  5267                           	psect	text28
  5268  0E7D                     __ptext28:	
  5269 ;; *************** function _inserir *****************
  5270 ;; Defined at:
  5271 ;;		line 91 in file "Serial.c"
  5272 ;; Parameters:    Size  Location     Type
  5273 ;;  buf             2    5[BANK0 ] PTR struct fila
  5274 ;;		 -> BufferRead(19), BufferWrite(19), 
  5275 ;;  Valor           1    7[BANK0 ] unsigned char 
  5276 ;; Auto vars:     Size  Location     Type
  5277 ;;		None
  5278 ;; Return value:  Size  Location     Type
  5279 ;;		None               void
  5280 ;; Registers used:
  5281 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5282 ;; Tracked objects:
  5283 ;;		On entry : 0/0
  5284 ;;		On exit  : 0/0
  5285 ;;		Unchanged: 0/0
  5286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5287 ;;      Params:         0       3       0       0       0
  5288 ;;      Locals:         0       0       0       0       0
  5289 ;;      Temps:          0       5       0       0       0
  5290 ;;      Totals:         0       8       0       0       0
  5291 ;;Total ram usage:        8 bytes
  5292 ;; Hardware stack levels used:    1
  5293 ;; Hardware stack levels required when called:    3
  5294 ;; This function calls:
  5295 ;;		Nothing
  5296 ;; This function is called by:
  5297 ;;		_Serial_Write
  5298 ;; This function uses a non-reentrant model
  5299 ;;
  5300                           
  5301                           
  5302                           ;psect for function _inserir
  5303  0E7D                     _inserir:	
  5304                           
  5305                           ;Serial.c: 92: buf->dados[buf->ultimo] = Valor;
  5306                           
  5307                           ;incstack = 0
  5308                           ; Regs used in _inserir: [wreg-fsr0h+status,2+status,0]
  5309  0E7D  1283               	bcf	3,5	;RP0=0, select bank0
  5310  0E7E  1303               	bcf	3,6	;RP1=0, select bank0
  5311  0E7F  0827               	movf	inserir@Valor,w
  5312  0E80  00A8               	movwf	??_inserir
  5313  0E81  3011               	movlw	17
  5314  0E82  0725               	addwf	inserir@buf,w
  5315  0E83  00A9               	movwf	??_inserir+1
  5316  0E84  0826               	movf	inserir@buf+1,w
  5317  0E85  1803               	skipnc
  5318  0E86  3E01               	addlw	1
  5319  0E87  00AA               	movwf	??_inserir+2
  5320  0E88  0829               	movf	??_inserir+1,w
  5321  0E89  0084               	movwf	4
  5322  0E8A  1783               	bsf	3,7
  5323  0E8B  1C2A               	btfss	??_inserir+2,0
  5324  0E8C  1383               	bcf	3,7
  5325  0E8D  0800               	movf	0,w
  5326  0E8E  0725               	addwf	inserir@buf,w
  5327  0E8F  00AB               	movwf	??_inserir+3
  5328  0E90  0826               	movf	inserir@buf+1,w
  5329  0E91  1803               	skipnc
  5330  0E92  3E01               	addlw	1
  5331  0E93  00AC               	movwf	??_inserir+4
  5332  0E94  082B               	movf	??_inserir+3,w
  5333  0E95  0084               	movwf	4
  5334  0E96  1383               	bcf	3,7
  5335  0E97  182C               	btfsc	??_inserir+4,0
  5336  0E98  1783               	bsf	3,7
  5337  0E99  0828               	movf	??_inserir,w
  5338  0E9A  0080               	movwf	0
  5339                           
  5340                           ;Serial.c: 93: buf->ultimo++;
  5341  0E9B  3001               	movlw	1
  5342  0E9C  00A8               	movwf	??_inserir
  5343  0E9D  3011               	movlw	17
  5344  0E9E  0725               	addwf	inserir@buf,w
  5345  0E9F  00A9               	movwf	??_inserir+1
  5346  0EA0  0826               	movf	inserir@buf+1,w
  5347  0EA1  1803               	skipnc
  5348  0EA2  3E01               	addlw	1
  5349  0EA3  00AA               	movwf	??_inserir+2
  5350  0EA4  0829               	movf	??_inserir+1,w
  5351  0EA5  0084               	movwf	4
  5352  0EA6  1783               	bsf	3,7
  5353  0EA7  1C2A               	btfss	??_inserir+2,0
  5354  0EA8  1383               	bcf	3,7
  5355  0EA9  0828               	movf	??_inserir,w
  5356  0EAA  0780               	addwf	0,f
  5357                           
  5358                           ;Serial.c: 94: buf->nItens++;
  5359  0EAB  3001               	movlw	1
  5360  0EAC  00A8               	movwf	??_inserir
  5361  0EAD  3012               	movlw	18
  5362  0EAE  0725               	addwf	inserir@buf,w
  5363  0EAF  00A9               	movwf	??_inserir+1
  5364  0EB0  0826               	movf	inserir@buf+1,w
  5365  0EB1  1803               	skipnc
  5366  0EB2  3E01               	addlw	1
  5367  0EB3  00AA               	movwf	??_inserir+2
  5368  0EB4  0829               	movf	??_inserir+1,w
  5369  0EB5  0084               	movwf	4
  5370  0EB6  1783               	bsf	3,7
  5371  0EB7  1C2A               	btfss	??_inserir+2,0
  5372  0EB8  1383               	bcf	3,7
  5373  0EB9  0828               	movf	??_inserir,w
  5374  0EBA  0780               	addwf	0,f
  5375                           
  5376                           ;Serial.c: 96: if(buf->ultimo == 16)
  5377  0EBB  3011               	movlw	17
  5378  0EBC  0725               	addwf	inserir@buf,w
  5379  0EBD  00A8               	movwf	??_inserir
  5380  0EBE  0826               	movf	inserir@buf+1,w
  5381  0EBF  1803               	skipnc
  5382  0EC0  3E01               	addlw	1
  5383  0EC1  00A9               	movwf	??_inserir+1
  5384  0EC2  0828               	movf	??_inserir,w
  5385  0EC3  0084               	movwf	4
  5386  0EC4  1783               	bsf	3,7
  5387  0EC5  1C29               	btfss	??_inserir+1,0
  5388  0EC6  1383               	bcf	3,7
  5389  0EC7  0800               	movf	0,w
  5390  0EC8  3A10               	xorlw	16
  5391  0EC9  1D03               	skipz
  5392  0ECA  0008               	return
  5393                           
  5394                           ;Serial.c: 97: buf->ultimo = 0;
  5395  0ECB  3011               	movlw	17
  5396  0ECC  0725               	addwf	inserir@buf,w
  5397  0ECD  00A8               	movwf	??_inserir
  5398  0ECE  0826               	movf	inserir@buf+1,w
  5399  0ECF  1803               	skipnc
  5400  0ED0  3E01               	addlw	1
  5401  0ED1  00A9               	movwf	??_inserir+1
  5402  0ED2  0828               	movf	??_inserir,w
  5403  0ED3  0084               	movwf	4
  5404  0ED4  1783               	bsf	3,7
  5405  0ED5  1C29               	btfss	??_inserir+1,0
  5406  0ED6  1383               	bcf	3,7
  5407  0ED7  0180               	clrf	0
  5408  0ED8  0008               	return
  5409  0ED9                     __end_of_inserir:	
  5410                           
  5411                           	psect	text29
  5412  0ADC                     __ptext29:	
  5413 ;; *************** function _estaCheia *****************
  5414 ;; Defined at:
  5415 ;;		line 117 in file "Serial.c"
  5416 ;; Parameters:    Size  Location     Type
  5417 ;;  buf             2    5[BANK0 ] PTR struct fila
  5418 ;;		 -> BufferRead(19), BufferWrite(19), 
  5419 ;; Auto vars:     Size  Location     Type
  5420 ;;		None
  5421 ;; Return value:  Size  Location     Type
  5422 ;;                  1    wreg      unsigned char 
  5423 ;; Registers used:
  5424 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5425 ;; Tracked objects:
  5426 ;;		On entry : 0/0
  5427 ;;		On exit  : 0/0
  5428 ;;		Unchanged: 0/0
  5429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5430 ;;      Params:         0       2       0       0       0
  5431 ;;      Locals:         0       0       0       0       0
  5432 ;;      Temps:          0       2       0       0       0
  5433 ;;      Totals:         0       4       0       0       0
  5434 ;;Total ram usage:        4 bytes
  5435 ;; Hardware stack levels used:    1
  5436 ;; Hardware stack levels required when called:    3
  5437 ;; This function calls:
  5438 ;;		Nothing
  5439 ;; This function is called by:
  5440 ;;		_Serial_Write
  5441 ;; This function uses a non-reentrant model
  5442 ;;
  5443                           
  5444                           
  5445                           ;psect for function _estaCheia
  5446  0ADC                     _estaCheia:	
  5447                           
  5448                           ;Serial.c: 118: return (buf->nItens==16);
  5449                           
  5450                           ;incstack = 0
  5451                           ; Regs used in _estaCheia: [wreg-fsr0h+status,2+status,0]
  5452  0ADC  3012               	movlw	18
  5453  0ADD  1283               	bcf	3,5	;RP0=0, select bank0
  5454  0ADE  1303               	bcf	3,6	;RP1=0, select bank0
  5455  0ADF  0725               	addwf	estaCheia@buf,w
  5456  0AE0  00A7               	movwf	??_estaCheia
  5457  0AE1  0826               	movf	estaCheia@buf+1,w
  5458  0AE2  1803               	skipnc
  5459  0AE3  3E01               	addlw	1
  5460  0AE4  00A8               	movwf	??_estaCheia+1
  5461  0AE5  0827               	movf	??_estaCheia,w
  5462  0AE6  0084               	movwf	4
  5463  0AE7  1783               	bsf	3,7
  5464  0AE8  1C28               	btfss	??_estaCheia+1,0
  5465  0AE9  1383               	bcf	3,7
  5466  0AEA  0800               	movf	0,w
  5467  0AEB  3A10               	xorlw	16
  5468  0AEC  3000               	movlw	0
  5469  0AED  1903               	skipnz
  5470  0AEE  3001               	movlw	1
  5471  0AEF  0008               	return
  5472  0AF0                     __end_of_estaCheia:	
  5473                           
  5474                           	psect	text30
  5475  0B51                     __ptext30:	
  5476 ;; *************** function _ADC_Run *****************
  5477 ;; Defined at:
  5478 ;;		line 35 in file "ConversorAD.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;		None
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;		None
  5483 ;; Return value:  Size  Location     Type
  5484 ;;		None               void
  5485 ;; Registers used:
  5486 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5487 ;; Tracked objects:
  5488 ;;		On entry : 0/0
  5489 ;;		On exit  : 0/0
  5490 ;;		Unchanged: 0/0
  5491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5492 ;;      Params:         0       0       0       0       0
  5493 ;;      Locals:         0       0       0       0       0
  5494 ;;      Temps:          0       0       0       0       0
  5495 ;;      Totals:         0       0       0       0       0
  5496 ;;Total ram usage:        0 bytes
  5497 ;; Hardware stack levels used:    1
  5498 ;; Hardware stack levels required when called:    3
  5499 ;; This function calls:
  5500 ;;		Nothing
  5501 ;; This function is called by:
  5502 ;;		_main
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505                           
  5506                           
  5507                           ;psect for function _ADC_Run
  5508  0B51                     _ADC_Run:	
  5509                           
  5510                           ;ConversorAD.c: 36: static char Estado = 0;
  5511                           ;ConversorAD.c: 38: switch(Estado)
  5512                           
  5513                           ;incstack = 0
  5514                           ; Regs used in _ADC_Run: [wreg-fsr0h+status,2+status,0]
  5515  0B51  2B63               	goto	l1894
  5516  0B52                     l1886:	
  5517                           ;ConversorAD.c: 39: {
  5518                           ;ConversorAD.c: 40: case 0:
  5519                           
  5520                           
  5521                           ;ConversorAD.c: 41: if(ADC_Temporizador == 0)
  5522  0B52  08FC               	movf	_ADC_Temporizador,f
  5523  0B53  1D03               	skipz
  5524  0B54  0008               	return
  5525                           
  5526                           ;ConversorAD.c: 42: {
  5527                           ;ConversorAD.c: 43: ADC_Temporizador = 1;
  5528  0B55  01FC               	clrf	_ADC_Temporizador
  5529  0B56  0AFC               	incf	_ADC_Temporizador,f
  5530                           
  5531                           ;ConversorAD.c: 44: Estado = 1;
  5532  0B57  1683               	bsf	3,5	;RP0=1, select bank1
  5533  0B58  1303               	bcf	3,6	;RP1=0, select bank1
  5534  0B59  01B3               	clrf	ADC_Run@Estado^(0+128)
  5535  0B5A  0AB3               	incf	ADC_Run@Estado^(0+128),f
  5536                           
  5537                           ;ConversorAD.c: 45: }
  5538                           ;ConversorAD.c: 46: break;
  5539  0B5B  0008               	return
  5540  0B5C                     l117:	
  5541                           ;ConversorAD.c: 47: case 1:
  5542                           
  5543                           
  5544                           ;ConversorAD.c: 48: ADCON0bits.GO = 1;
  5545  0B5C  1283               	bcf	3,5	;RP0=0, select bank0
  5546  0B5D  1303               	bcf	3,6	;RP1=0, select bank0
  5547  0B5E  151F               	bsf	31,2	;volatile
  5548                           
  5549                           ;ConversorAD.c: 49: Estado = 0;
  5550  0B5F  1683               	bsf	3,5	;RP0=1, select bank1
  5551  0B60  1303               	bcf	3,6	;RP1=0, select bank1
  5552  0B61  01B3               	clrf	ADC_Run@Estado^(0+128)
  5553                           
  5554                           ;ConversorAD.c: 51: }
  5555                           
  5556                           ;ConversorAD.c: 50: break;
  5557  0B62  0008               	return
  5558  0B63                     l1894:	
  5559  0B63  1683               	bsf	3,5	;RP0=1, select bank1
  5560  0B64  1303               	bcf	3,6	;RP1=0, select bank1
  5561  0B65  0833               	movf	ADC_Run@Estado^(0+128),w
  5562                           
  5563                           ; Switch size 1, requested type "space"
  5564                           ; Number of cases is 2, Range of values is 0 to 1
  5565                           ; switch strategies available:
  5566                           ; Name         Instructions Cycles
  5567                           ; simple_byte            7     4 (average)
  5568                           ; direct_byte           14     8 (fixed)
  5569                           ; jumptable            260     6 (fixed)
  5570                           ; rangetable             6     6 (fixed)
  5571                           ; spacedrange           10     9 (fixed)
  5572                           ; locatedrange           2     3 (fixed)
  5573                           ;	Chosen strategy is simple_byte
  5574  0B66  3A00               	xorlw	0	; case 0
  5575  0B67  1903               	skipnz
  5576  0B68  2B52               	goto	l1886
  5577  0B69  3A01               	xorlw	1	; case 1
  5578  0B6A  1903               	skipnz
  5579  0B6B  2B5C               	goto	l117
  5580  0B6C  2B6D               	goto	l118
  5581  0B6D                     l118:	
  5582  0B6D  0008               	return
  5583  0B6E                     __end_of_ADC_Run:	
  5584                           
  5585                           	psect	text31
  5586  0C8A                     __ptext31:	
  5587 ;; *************** function _Interrupcao *****************
  5588 ;; Defined at:
  5589 ;;		line 52 in file "TCC_Main.c"
  5590 ;; Parameters:    Size  Location     Type
  5591 ;;		None
  5592 ;; Auto vars:     Size  Location     Type
  5593 ;;		None
  5594 ;; Return value:  Size  Location     Type
  5595 ;;		None               void
  5596 ;; Registers used:
  5597 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5598 ;; Tracked objects:
  5599 ;;		On entry : 0/0
  5600 ;;		On exit  : 0/0
  5601 ;;		Unchanged: 0/0
  5602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5603 ;;      Params:         0       0       0       0       0
  5604 ;;      Locals:         0       0       0       0       0
  5605 ;;      Temps:          0       5       0       0       0
  5606 ;;      Totals:         0       5       0       0       0
  5607 ;;Total ram usage:        5 bytes
  5608 ;; Hardware stack levels used:    1
  5609 ;; Hardware stack levels required when called:    2
  5610 ;; This function calls:
  5611 ;;		_Serial_Interrupt
  5612 ;;		_ADC_Interrupt
  5613 ;; This function is called by:
  5614 ;;		Interrupt level 1
  5615 ;; This function uses a non-reentrant model
  5616 ;;
  5617                           
  5618                           
  5619                           ;psect for function _Interrupcao
  5620  0C8A                     _Interrupcao:	
  5621                           
  5622                           ;TCC_Main.c: 53: Serial_Interrupt();
  5623  0C8A  120A  158A  24D4   	fcall	_Serial_Interrupt
      +       120A  158A         
  5624                           
  5625                           ;TCC_Main.c: 54: ADC_Interrupt();
  5626  0C8F  120A  158A  2297   	fcall	_ADC_Interrupt
      +       120A  158A         
  5627                           
  5628                           ;TCC_Main.c: 56: if (INTCONbits.T0IF == 1)
  5629  0C94  1D0B               	btfss	11,2	;volatile
  5630  0C95  2CC7               	goto	i1l209
  5631                           
  5632                           ;TCC_Main.c: 57: {
  5633                           ;TCC_Main.c: 58: INTCONbits.T0IF = 0;
  5634  0C96  110B               	bcf	11,2	;volatile
  5635                           
  5636                           ;TCC_Main.c: 59: TMR0 += 130;
  5637  0C97  3082               	movlw	130
  5638  0C98  1283               	bcf	3,5	;RP0=0, select bank0
  5639  0C99  1303               	bcf	3,6	;RP1=0, select bank0
  5640  0C9A  00A0               	movwf	??_Interrupcao
  5641  0C9B  0820               	movf	??_Interrupcao,w
  5642  0C9C  0781               	addwf	1,f	;volatile
  5643                           
  5644                           ;TCC_Main.c: 60: if (TemporizadorLed > 0)
  5645  0C9D  1683               	bsf	3,5	;RP0=1, select bank1
  5646  0C9E  1303               	bcf	3,6	;RP1=0, select bank1
  5647  0C9F  082C               	movf	(_TemporizadorLed+1)^(0+128),w
  5648  0CA0  042B               	iorwf	_TemporizadorLed^(0+128),w
  5649  0CA1  1903               	skipnz
  5650  0CA2  2CA9               	goto	i1l205
  5651                           
  5652                           ;TCC_Main.c: 61: TemporizadorLed --;
  5653  0CA3  3001               	movlw	1
  5654  0CA4  02AB               	subwf	_TemporizadorLed^(0+128),f
  5655  0CA5  3000               	movlw	0
  5656  0CA6  1C03               	skipc
  5657  0CA7  03AC               	decf	(_TemporizadorLed+1)^(0+128),f
  5658  0CA8  02AC               	subwf	(_TemporizadorLed+1)^(0+128),f
  5659  0CA9                     i1l205:	
  5660                           
  5661                           ;TCC_Main.c: 62: if (TemporizadorSerialW > 0)
  5662  0CA9  0861               	movf	(_TemporizadorSerialW+1)^(0+128),w
  5663  0CAA  0460               	iorwf	_TemporizadorSerialW^(0+128),w
  5664  0CAB  1903               	skipnz
  5665  0CAC  2CB3               	goto	i1l206
  5666                           
  5667                           ;TCC_Main.c: 63: TemporizadorSerialW--;
  5668  0CAD  3001               	movlw	1
  5669  0CAE  02E0               	subwf	_TemporizadorSerialW^(0+128),f
  5670  0CAF  3000               	movlw	0
  5671  0CB0  1C03               	skipc
  5672  0CB1  03E1               	decf	(_TemporizadorSerialW+1)^(0+128),f
  5673  0CB2  02E1               	subwf	(_TemporizadorSerialW+1)^(0+128),f
  5674  0CB3                     i1l206:	
  5675                           
  5676                           ;TCC_Main.c: 64: if (TemporizadorSerialR > 0)
  5677  0CB3  0830               	movf	(_TemporizadorSerialR+1)^(0+128),w
  5678  0CB4  042F               	iorwf	_TemporizadorSerialR^(0+128),w
  5679  0CB5  1903               	skipnz
  5680  0CB6  2CBD               	goto	i1l207
  5681                           
  5682                           ;TCC_Main.c: 65: TemporizadorSerialR--;
  5683  0CB7  3001               	movlw	1
  5684  0CB8  02AF               	subwf	_TemporizadorSerialR^(0+128),f
  5685  0CB9  3000               	movlw	0
  5686  0CBA  1C03               	skipc
  5687  0CBB  03B0               	decf	(_TemporizadorSerialR+1)^(0+128),f
  5688  0CBC  02B0               	subwf	(_TemporizadorSerialR+1)^(0+128),f
  5689  0CBD                     i1l207:	
  5690                           
  5691                           ;TCC_Main.c: 66: if (TemporizadorPortb > 0)
  5692  0CBD  082E               	movf	(_TemporizadorPortb+1)^(0+128),w
  5693  0CBE  042D               	iorwf	_TemporizadorPortb^(0+128),w
  5694  0CBF  1903               	skipnz
  5695  0CC0  2CC7               	goto	i1l209
  5696                           
  5697                           ;TCC_Main.c: 67: TemporizadorPortb--;
  5698  0CC1  3001               	movlw	1
  5699  0CC2  02AD               	subwf	_TemporizadorPortb^(0+128),f
  5700  0CC3  3000               	movlw	0
  5701  0CC4  1C03               	skipc
  5702  0CC5  03AE               	decf	(_TemporizadorPortb+1)^(0+128),f
  5703  0CC6  02AE               	subwf	(_TemporizadorPortb+1)^(0+128),f
  5704  0CC7                     i1l209:	
  5705  0CC7  1283               	bcf	3,5	;RP0=0, select bank0
  5706  0CC8  1303               	bcf	3,6	;RP1=0, select bank0
  5707  0CC9  0824               	movf	??_Interrupcao+4,w
  5708  0CCA  00FF               	movwf	127
  5709  0CCB  0823               	movf	??_Interrupcao+3,w
  5710  0CCC  008A               	movwf	10
  5711  0CCD  0822               	movf	??_Interrupcao+2,w
  5712  0CCE  0084               	movwf	4
  5713  0CCF  0E21               	swapf	(??_Interrupcao+1)^0,w
  5714  0CD0  0083               	movwf	3
  5715  0CD1  0EFE               	swapf	126,f
  5716  0CD2  0E7E               	swapf	126,w
  5717  0CD3  0009               	retfie
  5718  0CD4                     __end_of_Interrupcao:	
  5719                           
  5720                           	psect	intentry
  5721  0004                     __pintentry:	
  5722                           ;incstack = 0
  5723                           ; Regs used in _Interrupcao: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5724                           
  5725  0004                     interrupt_function:	
  5726  007E                     saved_w	set	btemp
  5727  0004  00FE               	movwf	btemp
  5728  0005  0E03               	swapf	3,w
  5729  0006  1283               	bcf	3,5	;RP0=0, select bank0
  5730  0007  1303               	bcf	3,6	;RP1=0, select bank0
  5731  0008  00A1               	movwf	??_Interrupcao+1
  5732  0009  0804               	movf	4,w
  5733  000A  00A2               	movwf	??_Interrupcao+2
  5734  000B  080A               	movf	10,w
  5735  000C  00A3               	movwf	??_Interrupcao+3
  5736  000D  087F               	movf	btemp+1,w
  5737  000E  00A4               	movwf	??_Interrupcao+4
  5738  000F  120A  158A  2C8A   	ljmp	_Interrupcao
  5739                           
  5740                           	psect	text32
  5741  0A97                     __ptext32:	
  5742 ;; *************** function _ADC_Interrupt *****************
  5743 ;; Defined at:
  5744 ;;		line 8 in file "ConversorAD.c"
  5745 ;; Parameters:    Size  Location     Type
  5746 ;;		None
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;		None
  5749 ;; Return value:  Size  Location     Type
  5750 ;;		None               void
  5751 ;; Registers used:
  5752 ;;		wreg, status,2, status,0
  5753 ;; Tracked objects:
  5754 ;;		On entry : 0/0
  5755 ;;		On exit  : 0/0
  5756 ;;		Unchanged: 0/0
  5757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5758 ;;      Params:         0       0       0       0       0
  5759 ;;      Locals:         0       0       0       0       0
  5760 ;;      Temps:          0       0       0       0       0
  5761 ;;      Totals:         0       0       0       0       0
  5762 ;;Total ram usage:        0 bytes
  5763 ;; Hardware stack levels used:    1
  5764 ;; This function calls:
  5765 ;;		Nothing
  5766 ;; This function is called by:
  5767 ;;		_Interrupcao
  5768 ;; This function uses a non-reentrant model
  5769 ;;
  5770                           
  5771                           
  5772                           ;psect for function _ADC_Interrupt
  5773  0A97                     _ADC_Interrupt:	
  5774                           
  5775                           ;ConversorAD.c: 9: if (INTCONbits.T0IF == 1)
  5776                           
  5777                           ;incstack = 0
  5778                           ; Regs used in _ADC_Interrupt: [wreg+status,2+status,0]
  5779  0A97  1D0B               	btfss	11,2	;volatile
  5780  0A98  2A9E               	goto	i1l1872
  5781                           
  5782                           ;ConversorAD.c: 10: {
  5783                           ;ConversorAD.c: 11: if(ADC_Temporizador > 0)
  5784  0A99  087C               	movf	_ADC_Temporizador,w
  5785  0A9A  1903               	btfsc	3,2
  5786  0A9B  2A9E               	goto	i1l1872
  5787                           
  5788                           ;ConversorAD.c: 12: ADC_Temporizador--;
  5789  0A9C  3001               	movlw	1
  5790  0A9D  02FC               	subwf	_ADC_Temporizador,f
  5791  0A9E                     i1l1872:	
  5792                           
  5793                           ;ConversorAD.c: 13: }
  5794                           ;ConversorAD.c: 15: if( PIR1bits.ADIF == 1 )
  5795  0A9E  1283               	bcf	3,5	;RP0=0, select bank0
  5796  0A9F  1303               	bcf	3,6	;RP1=0, select bank0
  5797  0AA0  1F0C               	btfss	12,6	;volatile
  5798  0AA1  0008               	return
  5799                           
  5800                           ;ConversorAD.c: 16: {
  5801                           ;ConversorAD.c: 17: dadoDisponivel = 1;
  5802  0AA2  01EA               	clrf	_dadoDisponivel
  5803  0AA3  0AEA               	incf	_dadoDisponivel,f
  5804                           
  5805                           ;ConversorAD.c: 18: PIR1bits.ADIF = 0;
  5806  0AA4  130C               	bcf	12,6	;volatile
  5807  0AA5  0008               	return
  5808  0AA6                     __end_of_ADC_Interrupt:	
  5809                           
  5810                           	psect	text33
  5811  0CD4                     __ptext33:	
  5812 ;; *************** function _Serial_Interrupt *****************
  5813 ;; Defined at:
  5814 ;;		line 36 in file "Serial.c"
  5815 ;; Parameters:    Size  Location     Type
  5816 ;;		None
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;  tmp             1   11[COMMON] unsigned char 
  5819 ;; Return value:  Size  Location     Type
  5820 ;;		None               void
  5821 ;; Registers used:
  5822 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5828 ;;      Params:         0       0       0       0       0
  5829 ;;      Locals:         1       0       0       0       0
  5830 ;;      Temps:          1       0       0       0       0
  5831 ;;      Totals:         2       0       0       0       0
  5832 ;;Total ram usage:        2 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    1
  5835 ;; This function calls:
  5836 ;;		i1_inserir
  5837 ;;		i1_remover
  5838 ;;		i1_estaVazia
  5839 ;;		i1_estaCheia
  5840 ;; This function is called by:
  5841 ;;		_Interrupcao
  5842 ;; This function uses a non-reentrant model
  5843 ;;
  5844                           
  5845                           
  5846                           ;psect for function _Serial_Interrupt
  5847  0CD4                     _Serial_Interrupt:	
  5848                           
  5849                           ;Serial.c: 37: if (PIR1bits.TXIF == 1 && TXSTAbits.TRMT == 1)
  5850                           
  5851                           ;incstack = 0
  5852                           ; Regs used in _Serial_Interrupt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5853  0CD4  1283               	bcf	3,5	;RP0=0, select bank0
  5854  0CD5  1303               	bcf	3,6	;RP1=0, select bank0
  5855  0CD6  1E0C               	btfss	12,4	;volatile
  5856  0CD7  2CF7               	goto	i1l2516
  5857  0CD8  1683               	bsf	3,5	;RP0=1, select bank1
  5858  0CD9  1303               	bcf	3,6	;RP1=0, select bank1
  5859  0CDA  1C98               	btfss	24,1	;volatile
  5860  0CDB  2CF7               	goto	i1l2516
  5861                           
  5862                           ;Serial.c: 38: {
  5863                           ;Serial.c: 39: PIR1bits.TXIF = 0;
  5864  0CDC  1283               	bcf	3,5	;RP0=0, select bank0
  5865  0CDD  1303               	bcf	3,6	;RP1=0, select bank0
  5866  0CDE  120C               	bcf	12,4	;volatile
  5867                           
  5868                           ;Serial.c: 40: if(!estaVazia(&BufferWrite))
  5869  0CDF  3090               	movlw	_BufferWrite& (0+255)
  5870  0CE0  00F0               	movwf	?i1_estaVazia
  5871  0CE1  3001               	movlw	1
  5872  0CE2  00F1               	movwf	?i1_estaVazia+1
  5873  0CE3  120A  158A  22A6   	fcall	i1_estaVazia
      +       120A  158A         
  5874  0CE8  3800               	iorlw	0
  5875  0CE9  1D03               	skipz
  5876  0CEA  2CF7               	goto	i1l2516
  5877                           
  5878                           ;Serial.c: 41: {
  5879                           ;Serial.c: 42: TXREG = remover(&BufferWrite);
  5880  0CEB  3090               	movlw	_BufferWrite& (0+255)
  5881  0CEC  00F0               	movwf	?i1_remover
  5882  0CED  3001               	movlw	1
  5883  0CEE  00F1               	movwf	?i1_remover+1
  5884  0CEF  120A  158A  2621   	fcall	i1_remover
      +       120A  158A         
  5885  0CF4  1283               	bcf	3,5	;RP0=0, select bank0
  5886  0CF5  1303               	bcf	3,6	;RP1=0, select bank0
  5887  0CF6  0099               	movwf	25	;volatile
  5888  0CF7                     i1l2516:	
  5889                           
  5890                           ;Serial.c: 43: }
  5891                           ;Serial.c: 44: }
  5892                           ;Serial.c: 46: if(RCSTAbits.OERR == 1)
  5893  0CF7  1283               	bcf	3,5	;RP0=0, select bank0
  5894  0CF8  1303               	bcf	3,6	;RP1=0, select bank0
  5895  0CF9  1C98               	btfss	24,1	;volatile
  5896  0CFA  2D05               	goto	i1l2524
  5897                           
  5898                           ;Serial.c: 47: {
  5899                           ;Serial.c: 48: char tmp = RCREG;
  5900  0CFB  081A               	movf	26,w	;volatile
  5901  0CFC  00FA               	movwf	??_Serial_Interrupt
  5902  0CFD  087A               	movf	??_Serial_Interrupt,w
  5903  0CFE  00FB               	movwf	Serial_Interrupt@tmp
  5904                           
  5905                           ;Serial.c: 49: tmp = RCREG;
  5906  0CFF  081A               	movf	26,w	;volatile
  5907  0D00  00FA               	movwf	??_Serial_Interrupt
  5908  0D01  087A               	movf	??_Serial_Interrupt,w
  5909  0D02  00FB               	movwf	Serial_Interrupt@tmp
  5910                           
  5911                           ;Serial.c: 50: RCSTAbits.CREN = 0;
  5912  0D03  1218               	bcf	24,4	;volatile
  5913                           
  5914                           ;Serial.c: 51: RCSTAbits.CREN = 1;
  5915  0D04  1618               	bsf	24,4	;volatile
  5916  0D05                     i1l2524:	
  5917                           
  5918                           ;Serial.c: 52: }
  5919                           ;Serial.c: 54: if (PIR1bits.RCIF == 1)
  5920  0D05  1E8C               	btfss	12,5	;volatile
  5921  0D06  0008               	return
  5922                           
  5923                           ;Serial.c: 55: {
  5924                           ;Serial.c: 57: if(!estaCheia(&BufferRead))
  5925  0D07  30B9               	movlw	_BufferRead& (0+255)
  5926  0D08  00F0               	movwf	?i1_estaCheia
  5927  0D09  3000               	movlw	0
  5928  0D0A  00F1               	movwf	?i1_estaCheia+1
  5929  0D0B  120A  158A  22B7   	fcall	i1_estaCheia
      +       120A  158A         
  5930  0D10  3800               	iorlw	0
  5931  0D11  1D03               	skipz
  5932  0D12  0008               	return
  5933                           
  5934                           ;Serial.c: 58: inserir(&BufferRead, RCREG);
  5935  0D13  30B9               	movlw	_BufferRead& (0+255)
  5936  0D14  00F0               	movwf	?i1_inserir
  5937  0D15  3000               	movlw	0
  5938  0D16  00F1               	movwf	?i1_inserir+1
  5939  0D17  1283               	bcf	3,5	;RP0=0, select bank0
  5940  0D18  1303               	bcf	3,6	;RP1=0, select bank0
  5941  0D19  081A               	movf	26,w	;volatile
  5942  0D1A  00FA               	movwf	??_Serial_Interrupt
  5943  0D1B  087A               	movf	??_Serial_Interrupt,w
  5944  0D1C  00F2               	movwf	?i1_inserir+2
  5945  0D1D  120A  158A  25C7   	fcall	i1_inserir
  5946  0D20  0008               	return
  5947  0D21                     __end_of_Serial_Interrupt:	
  5948                           
  5949                           	psect	text34
  5950  0AB7                     __ptext34:	
  5951 ;; *************** function i1_estaCheia *****************
  5952 ;; Defined at:
  5953 ;;		line 117 in file "Serial.c"
  5954 ;; Parameters:    Size  Location     Type
  5955 ;;  estaCheia       2    0[COMMON] PTR struct fila
  5956 ;;		 -> BufferRead(19), BufferWrite(19), 
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;		None
  5959 ;; Return value:  Size  Location     Type
  5960 ;;                  1    wreg      unsigned char 
  5961 ;; Registers used:
  5962 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5963 ;; Tracked objects:
  5964 ;;		On entry : 0/0
  5965 ;;		On exit  : 0/0
  5966 ;;		Unchanged: 0/0
  5967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5968 ;;      Params:         2       0       0       0       0
  5969 ;;      Locals:         0       0       0       0       0
  5970 ;;      Temps:          2       0       0       0       0
  5971 ;;      Totals:         4       0       0       0       0
  5972 ;;Total ram usage:        4 bytes
  5973 ;; Hardware stack levels used:    1
  5974 ;; This function calls:
  5975 ;;		Nothing
  5976 ;; This function is called by:
  5977 ;;		_Serial_Interrupt
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           
  5982                           ;psect for function i1_estaCheia
  5983  0AB7                     i1_estaCheia:	
  5984                           
  5985                           ;Serial.c: 118: return (buf->nItens==16);
  5986                           
  5987                           ;incstack = 0
  5988                           ; Regs used in i1_estaCheia: [wreg-fsr0h+status,2+status,0]
  5989  0AB7  3012               	movlw	18
  5990  0AB8  0770               	addwf	i1estaCheia@buf,w
  5991  0AB9  00F2               	movwf	??i1_estaCheia
  5992  0ABA  0871               	movf	i1estaCheia@buf+1,w
  5993  0ABB  1803               	skipnc
  5994  0ABC  3E01               	addlw	1
  5995  0ABD  00F3               	movwf	??i1_estaCheia+1
  5996  0ABE  0872               	movf	??i1_estaCheia,w
  5997  0ABF  0084               	movwf	4
  5998  0AC0  1783               	bsf	3,7
  5999  0AC1  1C73               	btfss	??i1_estaCheia+1,0
  6000  0AC2  1383               	bcf	3,7
  6001  0AC3  0800               	movf	0,w
  6002  0AC4  3A10               	xorlw	16
  6003  0AC5  3000               	movlw	0
  6004  0AC6  1903               	skipnz
  6005  0AC7  3001               	movlw	1
  6006  0AC8  0008               	return
  6007  0AC9                     __end_ofi1_estaCheia:	
  6008                           
  6009                           	psect	text35
  6010  0AA6                     __ptext35:	
  6011 ;; *************** function i1_estaVazia *****************
  6012 ;; Defined at:
  6013 ;;		line 112 in file "Serial.c"
  6014 ;; Parameters:    Size  Location     Type
  6015 ;;  estaVazia       2    0[COMMON] PTR struct fila
  6016 ;;		 -> BufferRead(19), BufferWrite(19), 
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;		None
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  1    wreg      unsigned char 
  6021 ;; Registers used:
  6022 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6028 ;;      Params:         2       0       0       0       0
  6029 ;;      Locals:         0       0       0       0       0
  6030 ;;      Temps:          2       0       0       0       0
  6031 ;;      Totals:         4       0       0       0       0
  6032 ;;Total ram usage:        4 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; This function calls:
  6035 ;;		Nothing
  6036 ;; This function is called by:
  6037 ;;		_Serial_Interrupt
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           
  6042                           ;psect for function i1_estaVazia
  6043  0AA6                     i1_estaVazia:	
  6044                           
  6045                           ;Serial.c: 113: return (buf->nItens==0);
  6046                           
  6047                           ;incstack = 0
  6048                           ; Regs used in i1_estaVazia: [wreg-fsr0h+status,2+status,0]
  6049  0AA6  3012               	movlw	18
  6050  0AA7  0770               	addwf	i1estaVazia@buf,w
  6051  0AA8  00F2               	movwf	??i1_estaVazia
  6052  0AA9  0871               	movf	i1estaVazia@buf+1,w
  6053  0AAA  1803               	skipnc
  6054  0AAB  3E01               	addlw	1
  6055  0AAC  00F3               	movwf	??i1_estaVazia+1
  6056  0AAD  0872               	movf	??i1_estaVazia,w
  6057  0AAE  0084               	movwf	4
  6058  0AAF  1783               	bsf	3,7
  6059  0AB0  1C73               	btfss	??i1_estaVazia+1,0
  6060  0AB1  1383               	bcf	3,7
  6061  0AB2  0880               	movf	0,f
  6062  0AB3  3000               	movlw	0
  6063  0AB4  1903               	skipnz
  6064  0AB5  3001               	movlw	1
  6065  0AB6  0008               	return
  6066  0AB7                     __end_ofi1_estaVazia:	
  6067                           
  6068                           	psect	text36
  6069  0E21                     __ptext36:	
  6070 ;; *************** function i1_remover *****************
  6071 ;; Defined at:
  6072 ;;		line 101 in file "Serial.c"
  6073 ;; Parameters:    Size  Location     Type
  6074 ;;  remover         2    0[COMMON] PTR struct fila
  6075 ;;		 -> BufferRead(19), BufferWrite(19), 
  6076 ;; Auto vars:     Size  Location     Type
  6077 ;;  remover         2    8[COMMON] int 
  6078 ;; Return value:  Size  Location     Type
  6079 ;;                  1    wreg      unsigned char 
  6080 ;; Registers used:
  6081 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6082 ;; Tracked objects:
  6083 ;;		On entry : 0/0
  6084 ;;		On exit  : 0/0
  6085 ;;		Unchanged: 0/0
  6086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6087 ;;      Params:         2       0       0       0       0
  6088 ;;      Locals:         2       0       0       0       0
  6089 ;;      Temps:          6       0       0       0       0
  6090 ;;      Totals:        10       0       0       0       0
  6091 ;;Total ram usage:       10 bytes
  6092 ;; Hardware stack levels used:    1
  6093 ;; This function calls:
  6094 ;;		Nothing
  6095 ;; This function is called by:
  6096 ;;		_Serial_Interrupt
  6097 ;; This function uses a non-reentrant model
  6098 ;;
  6099                           
  6100                           
  6101                           ;psect for function i1_remover
  6102  0E21                     i1_remover:	
  6103                           
  6104                           ;Serial.c: 102: int temp = buf->dados[buf->primeiro++];
  6105                           
  6106                           ;incstack = 0
  6107                           ; Regs used in i1_remover: [wreg-fsr0h+status,2+status,0]
  6108  0E21  3010               	movlw	16
  6109  0E22  0770               	addwf	i1remover@buf,w
  6110  0E23  00F2               	movwf	??i1_remover
  6111  0E24  0871               	movf	i1remover@buf+1,w
  6112  0E25  1803               	skipnc
  6113  0E26  3E01               	addlw	1
  6114  0E27  00F3               	movwf	??i1_remover+1
  6115  0E28  0872               	movf	??i1_remover,w
  6116  0E29  0084               	movwf	4
  6117  0E2A  1783               	bsf	3,7
  6118  0E2B  1C73               	btfss	??i1_remover+1,0
  6119  0E2C  1383               	bcf	3,7
  6120  0E2D  0800               	movf	0,w
  6121  0E2E  0770               	addwf	i1remover@buf,w
  6122  0E2F  00F4               	movwf	??i1_remover+2
  6123  0E30  0871               	movf	i1remover@buf+1,w
  6124  0E31  1803               	skipnc
  6125  0E32  3E01               	addlw	1
  6126  0E33  00F5               	movwf	??i1_remover+3
  6127  0E34  0874               	movf	??i1_remover+2,w
  6128  0E35  0084               	movwf	4
  6129  0E36  1783               	bsf	3,7
  6130  0E37  1C75               	btfss	??i1_remover+3,0
  6131  0E38  1383               	bcf	3,7
  6132  0E39  0800               	movf	0,w
  6133  0E3A  00F6               	movwf	??i1_remover+4
  6134  0E3B  01F7               	clrf	??i1_remover+5
  6135  0E3C  0876               	movf	??i1_remover+4,w
  6136  0E3D  00F8               	movwf	i1remover@temp
  6137  0E3E  0877               	movf	??i1_remover+5,w
  6138  0E3F  00F9               	movwf	i1remover@temp+1
  6139  0E40  3001               	movlw	1
  6140  0E41  00F2               	movwf	??i1_remover
  6141  0E42  3010               	movlw	16
  6142  0E43  0770               	addwf	i1remover@buf,w
  6143  0E44  00F3               	movwf	??i1_remover+1
  6144  0E45  0871               	movf	i1remover@buf+1,w
  6145  0E46  1803               	skipnc
  6146  0E47  3E01               	addlw	1
  6147  0E48  00F4               	movwf	??i1_remover+2
  6148  0E49  0873               	movf	??i1_remover+1,w
  6149  0E4A  0084               	movwf	4
  6150  0E4B  1783               	bsf	3,7
  6151  0E4C  1C74               	btfss	??i1_remover+2,0
  6152  0E4D  1383               	bcf	3,7
  6153  0E4E  0872               	movf	??i1_remover,w
  6154  0E4F  0780               	addwf	0,f
  6155                           
  6156                           ;Serial.c: 104: if(buf->primeiro == 16)
  6157  0E50  3010               	movlw	16
  6158  0E51  0770               	addwf	i1remover@buf,w
  6159  0E52  00F2               	movwf	??i1_remover
  6160  0E53  0871               	movf	i1remover@buf+1,w
  6161  0E54  1803               	skipnc
  6162  0E55  3E01               	addlw	1
  6163  0E56  00F3               	movwf	??i1_remover+1
  6164  0E57  0872               	movf	??i1_remover,w
  6165  0E58  0084               	movwf	4
  6166  0E59  1783               	bsf	3,7
  6167  0E5A  1C73               	btfss	??i1_remover+1,0
  6168  0E5B  1383               	bcf	3,7
  6169  0E5C  0800               	movf	0,w
  6170  0E5D  3A10               	xorlw	16
  6171  0E5E  1D03               	skipz
  6172  0E5F  2E6D               	goto	i1l68
  6173                           
  6174                           ;Serial.c: 105: buf->primeiro = 0;
  6175  0E60  3010               	movlw	16
  6176  0E61  0770               	addwf	i1remover@buf,w
  6177  0E62  00F2               	movwf	??i1_remover
  6178  0E63  0871               	movf	i1remover@buf+1,w
  6179  0E64  1803               	skipnc
  6180  0E65  3E01               	addlw	1
  6181  0E66  00F3               	movwf	??i1_remover+1
  6182  0E67  0872               	movf	??i1_remover,w
  6183  0E68  0084               	movwf	4
  6184  0E69  1783               	bsf	3,7
  6185  0E6A  1C73               	btfss	??i1_remover+1,0
  6186  0E6B  1383               	bcf	3,7
  6187  0E6C  0180               	clrf	0
  6188  0E6D                     i1l68:	
  6189                           
  6190                           ;Serial.c: 107: buf->nItens--;
  6191  0E6D  3012               	movlw	18
  6192  0E6E  0770               	addwf	i1remover@buf,w
  6193  0E6F  00F2               	movwf	??i1_remover
  6194  0E70  0871               	movf	i1remover@buf+1,w
  6195  0E71  1803               	skipnc
  6196  0E72  3E01               	addlw	1
  6197  0E73  00F3               	movwf	??i1_remover+1
  6198  0E74  0872               	movf	??i1_remover,w
  6199  0E75  0084               	movwf	4
  6200  0E76  1783               	bsf	3,7
  6201  0E77  1C73               	btfss	??i1_remover+1,0
  6202  0E78  1383               	bcf	3,7
  6203  0E79  3001               	movlw	1
  6204  0E7A  0280               	subwf	0,f
  6205                           
  6206                           ;Serial.c: 108: return temp;
  6207  0E7B  0878               	movf	i1remover@temp,w
  6208  0E7C  0008               	return
  6209  0E7D                     __end_ofi1_remover:	
  6210                           
  6211                           	psect	text37
  6212  0DC7                     __ptext37:	
  6213 ;; *************** function i1_inserir *****************
  6214 ;; Defined at:
  6215 ;;		line 91 in file "Serial.c"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;  inserir         2    0[COMMON] PTR struct fila
  6218 ;;		 -> BufferRead(19), BufferWrite(19), 
  6219 ;;  inserir         1    2[COMMON] unsigned char 
  6220 ;; Auto vars:     Size  Location     Type
  6221 ;;		None
  6222 ;; Return value:  Size  Location     Type
  6223 ;;		None               void
  6224 ;; Registers used:
  6225 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6226 ;; Tracked objects:
  6227 ;;		On entry : 0/0
  6228 ;;		On exit  : 0/0
  6229 ;;		Unchanged: 0/0
  6230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6231 ;;      Params:         3       0       0       0       0
  6232 ;;      Locals:         0       0       0       0       0
  6233 ;;      Temps:          5       0       0       0       0
  6234 ;;      Totals:         8       0       0       0       0
  6235 ;;Total ram usage:        8 bytes
  6236 ;; Hardware stack levels used:    1
  6237 ;; This function calls:
  6238 ;;		Nothing
  6239 ;; This function is called by:
  6240 ;;		_Serial_Interrupt
  6241 ;; This function uses a non-reentrant model
  6242 ;;
  6243                           
  6244                           
  6245                           ;psect for function i1_inserir
  6246  0DC7                     i1_inserir:	
  6247                           
  6248                           ;Serial.c: 92: buf->dados[buf->ultimo] = Valor;
  6249                           
  6250                           ;incstack = 0
  6251                           ; Regs used in i1_inserir: [wreg-fsr0h+status,2+status,0]
  6252  0DC7  0872               	movf	i1inserir@Valor,w
  6253  0DC8  00F3               	movwf	??i1_inserir
  6254  0DC9  3011               	movlw	17
  6255  0DCA  0770               	addwf	i1inserir@buf,w
  6256  0DCB  00F4               	movwf	??i1_inserir+1
  6257  0DCC  0871               	movf	i1inserir@buf+1,w
  6258  0DCD  1803               	skipnc
  6259  0DCE  3E01               	addlw	1
  6260  0DCF  00F5               	movwf	??i1_inserir+2
  6261  0DD0  0874               	movf	??i1_inserir+1,w
  6262  0DD1  0084               	movwf	4
  6263  0DD2  1783               	bsf	3,7
  6264  0DD3  1C75               	btfss	??i1_inserir+2,0
  6265  0DD4  1383               	bcf	3,7
  6266  0DD5  0800               	movf	0,w
  6267  0DD6  0770               	addwf	i1inserir@buf,w
  6268  0DD7  00F6               	movwf	??i1_inserir+3
  6269  0DD8  0871               	movf	i1inserir@buf+1,w
  6270  0DD9  1803               	skipnc
  6271  0DDA  3E01               	addlw	1
  6272  0DDB  00F7               	movwf	??i1_inserir+4
  6273  0DDC  0876               	movf	??i1_inserir+3,w
  6274  0DDD  0084               	movwf	4
  6275  0DDE  1383               	bcf	3,7
  6276  0DDF  1877               	btfsc	??i1_inserir+4,0
  6277  0DE0  1783               	bsf	3,7
  6278  0DE1  0873               	movf	??i1_inserir,w
  6279  0DE2  0080               	movwf	0
  6280                           
  6281                           ;Serial.c: 93: buf->ultimo++;
  6282  0DE3  3001               	movlw	1
  6283  0DE4  00F3               	movwf	??i1_inserir
  6284  0DE5  3011               	movlw	17
  6285  0DE6  0770               	addwf	i1inserir@buf,w
  6286  0DE7  00F4               	movwf	??i1_inserir+1
  6287  0DE8  0871               	movf	i1inserir@buf+1,w
  6288  0DE9  1803               	skipnc
  6289  0DEA  3E01               	addlw	1
  6290  0DEB  00F5               	movwf	??i1_inserir+2
  6291  0DEC  0874               	movf	??i1_inserir+1,w
  6292  0DED  0084               	movwf	4
  6293  0DEE  1783               	bsf	3,7
  6294  0DEF  1C75               	btfss	??i1_inserir+2,0
  6295  0DF0  1383               	bcf	3,7
  6296  0DF1  0873               	movf	??i1_inserir,w
  6297  0DF2  0780               	addwf	0,f
  6298                           
  6299                           ;Serial.c: 94: buf->nItens++;
  6300  0DF3  3001               	movlw	1
  6301  0DF4  00F3               	movwf	??i1_inserir
  6302  0DF5  3012               	movlw	18
  6303  0DF6  0770               	addwf	i1inserir@buf,w
  6304  0DF7  00F4               	movwf	??i1_inserir+1
  6305  0DF8  0871               	movf	i1inserir@buf+1,w
  6306  0DF9  1803               	skipnc
  6307  0DFA  3E01               	addlw	1
  6308  0DFB  00F5               	movwf	??i1_inserir+2
  6309  0DFC  0874               	movf	??i1_inserir+1,w
  6310  0DFD  0084               	movwf	4
  6311  0DFE  1783               	bsf	3,7
  6312  0DFF  1C75               	btfss	??i1_inserir+2,0
  6313  0E00  1383               	bcf	3,7
  6314  0E01  0873               	movf	??i1_inserir,w
  6315  0E02  0780               	addwf	0,f
  6316                           
  6317                           ;Serial.c: 96: if(buf->ultimo == 16)
  6318  0E03  3011               	movlw	17
  6319  0E04  0770               	addwf	i1inserir@buf,w
  6320  0E05  00F3               	movwf	??i1_inserir
  6321  0E06  0871               	movf	i1inserir@buf+1,w
  6322  0E07  1803               	skipnc
  6323  0E08  3E01               	addlw	1
  6324  0E09  00F4               	movwf	??i1_inserir+1
  6325  0E0A  0873               	movf	??i1_inserir,w
  6326  0E0B  0084               	movwf	4
  6327  0E0C  1783               	bsf	3,7
  6328  0E0D  1C74               	btfss	??i1_inserir+1,0
  6329  0E0E  1383               	bcf	3,7
  6330  0E0F  0800               	movf	0,w
  6331  0E10  3A10               	xorlw	16
  6332  0E11  1D03               	skipz
  6333  0E12  0008               	return
  6334                           
  6335                           ;Serial.c: 97: buf->ultimo = 0;
  6336  0E13  3011               	movlw	17
  6337  0E14  0770               	addwf	i1inserir@buf,w
  6338  0E15  00F3               	movwf	??i1_inserir
  6339  0E16  0871               	movf	i1inserir@buf+1,w
  6340  0E17  1803               	skipnc
  6341  0E18  3E01               	addlw	1
  6342  0E19  00F4               	movwf	??i1_inserir+1
  6343  0E1A  0873               	movf	??i1_inserir,w
  6344  0E1B  0084               	movwf	4
  6345  0E1C  1783               	bsf	3,7
  6346  0E1D  1C74               	btfss	??i1_inserir+1,0
  6347  0E1E  1383               	bcf	3,7
  6348  0E1F  0180               	clrf	0
  6349  0E20  0008               	return
  6350  0E21                     __end_ofi1_inserir:	
  6351  007E                     btemp	set	126	;btemp
  6352  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         65
    Persistent  11
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     74      75
    BANK1            80     20      75
    BANK3            96      0      19
    BANK2            96      0       0

Pointer List with Targets:

    ?___ftsub	float  size(1) Largest target is 0

    ?___ftmul	float  size(1) Largest target is 0

    ?___ftadd	float  size(1) Largest target is 0

    ?___ftpack	float  size(1) Largest target is 0

    ?___fttol	long  size(1) Largest target is 0

    ?___awmod	int  size(1) Largest target is 0

    ?___aldiv	long  size(1) Largest target is 0

    ?___altoft	float  size(1) Largest target is 0

    ?___ftdiv	float  size(1) Largest target is 0

    ?_sqrt	float  size(1) Largest target is 0

    ?___lmul	unsigned long  size(1) Largest target is 0

    ?_ADC_Read	int  size(1) Largest target is 0

    estaCheia@buf	PTR struct fila size(2) Largest target is 19
		 -> BufferRead(BANK1[19]), BufferWrite(BANK3[19]), 

    estaVazia@buf	PTR struct fila size(2) Largest target is 19
		 -> BufferRead(BANK1[19]), BufferWrite(BANK3[19]), 

    remover@buf	PTR struct fila size(2) Largest target is 19
		 -> BufferRead(BANK1[19]), BufferWrite(BANK3[19]), 

    inserir@buf	PTR struct fila size(2) Largest target is 19
		 -> BufferRead(BANK1[19]), BufferWrite(BANK3[19]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _Interrupcao in COMMON

    _Interrupcao->_Serial_Interrupt
    _Serial_Interrupt->i1_remover

Critical Paths under _main in BANK0

    _Setup->_ADC_Init
    _Setup->_ADC_Select_Channel
    _SensoresAnalogicos->___fttol
    ___fttol->___ftdiv
    ___ftdiv->_sqrt
    ___altoft->___aldiv
    _sqrt->___ftsub
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftmul->___ftpack
    _Serial_Available->_estaVazia
    _Serial_Read->_remover
    _EnvioDadosSerial->_Serial_Write
    _Serial_Write->_inserir

Critical Paths under _Interrupcao in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_SensoresAnalogicos
    _SensoresAnalogicos->___fttol

Critical Paths under _Interrupcao in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupcao in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interrupcao in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4851
                            _ADC_Run
                   _EnvioDadosSerial
                    _TrataComandoESP
                        _ControleLed
                 _SensoresAnalogicos
                              _Setup
 ---------------------------------------------------------------------------------
 (1) _Setup                                                1     1      0      88
                                              8 BANK0      1     1      0
                   _Serial_9600_Init
                           _ADC_Init
                 _ADC_Select_Channel
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     2      1      44
                                              5 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _Serial_9600_Init                                     1     1      0      22
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SensoresAnalogicos                                  10    10      0    4200
                                             10 BANK1     10    10      0
                           _ADC_Read
                 _ADC_Select_Channel
                      _ADC_Available
                               _sqrt
                            ___aldiv
                           ___altoft
                            ___awmod
                            ___ftdiv
                            ___fttol
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8      92
                                              5 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     371
                                             70 BANK0      4     0      4
                                              0 BANK1     10    10      0
                               _sqrt (ARG)
                            ___aldiv (ARG)
                           ___altoft (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6     489
                                             54 BANK0     16    10      6
                               _sqrt (ARG)
                           ___ftpack
                            ___aldiv (ARG)
                           ___altoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     296
                                              5 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___altoft                                             8     4      4     347
                                             20 BANK0      8     4      4
                           ___ftpack
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     300
                                              5 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (2) _sqrt                                                22    19      3    2150
                                             32 BANK0     22    19      3
                            ___aldiv (ARG)
                           ___altoft (ARG)
                             ___ftge
                            ___ftmul
                            ___ftsub
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    1094
                                             26 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    1049
                                             13 BANK0     13     7      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6     535
                                             13 BANK0     16    10      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5     209
                                              5 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftge                                              12     6      6     136
                                              5 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Available                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Select_Channel                                   3     3      0      22
                                              5 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Read                                             2     0      2       0
                                              5 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ControleLed                                          1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TrataComandoESP                                      2     2      0     347
                                             15 BANK0      2     2      0
                        _Serial_Read
                   _Serial_Available
 ---------------------------------------------------------------------------------
 (2) _Serial_Available                                     0     0      0      31
                          _estaVazia
 ---------------------------------------------------------------------------------
 (2) _Serial_Read                                          0     0      0     251
                          _estaVazia
                            _remover
 ---------------------------------------------------------------------------------
 (3) _remover                                             10     8      2     220
                                              5 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (3) _estaVazia                                            4     2      2      31
                                              5 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _EnvioDadosSerial                                     2     2      0     216
                                             15 BANK0      1     1      0
                       _Serial_Write
 ---------------------------------------------------------------------------------
 (2) _Serial_Write                                         2     2      0     216
                                             13 BANK0      2     2      0
                          _estaCheia
                            _inserir
 ---------------------------------------------------------------------------------
 (3) _inserir                                              8     5      3     154
                                              5 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (3) _estaCheia                                            4     2      2      31
                                              5 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Run                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Interrupcao                                          5     5      0    1172
                                              0 BANK0      5     5      0
                   _Serial_Interrupt
                      _ADC_Interrupt
 ---------------------------------------------------------------------------------
 (7) _ADC_Interrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Serial_Interrupt                                     2     2      0    1172
                                             10 COMMON     2     2      0
                          i1_inserir
                          i1_remover
                        i1_estaVazia
                        i1_estaCheia
 ---------------------------------------------------------------------------------
 (8) i1_estaCheia                                          4     2      2      73
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) i1_estaVazia                                          4     2      2      73
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) i1_remover                                           10     8      2     513
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (8) i1_inserir                                            8     5      3     511
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Run
   _EnvioDadosSerial
     _Serial_Write
       _estaCheia
       _inserir
   _TrataComandoESP
     _Serial_Read
       _estaVazia
       _remover
     _Serial_Available
       _estaVazia
   _ControleLed
   _SensoresAnalogicos
     _ADC_Read
     _ADC_Select_Channel
     _ADC_Available
     _sqrt
       ___aldiv (ARG)
       ___altoft (ARG)
         ___ftpack
         ___aldiv (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___ftpack
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
     ___aldiv
     ___altoft
       ___ftpack
       ___aldiv (ARG)
     ___awmod
     ___ftdiv
       _sqrt (ARG)
         ___aldiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___aldiv (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___ftpack
         ___ftsub (ARG)
           ___ftadd
             ___ftpack
       ___ftpack (ARG)
       ___aldiv (ARG)
       ___altoft (ARG)
         ___ftpack
         ___aldiv (ARG)
     ___fttol
       _sqrt (ARG)
         ___aldiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___aldiv (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___ftpack
         ___ftsub (ARG)
           ___ftadd
             ___ftpack
       ___aldiv (ARG)
       ___altoft (ARG)
         ___ftpack
         ___aldiv (ARG)
       ___ftdiv (ARG)
         _sqrt (ARG)
           ___aldiv (ARG)
           ___altoft (ARG)
             ___ftpack
             ___aldiv (ARG)
           ___ftge (ARG)
           ___ftmul (ARG)
             ___ftpack
           ___ftsub (ARG)
             ___ftadd
               ___ftpack
         ___ftpack (ARG)
         ___aldiv (ARG)
         ___altoft (ARG)
           ___ftpack
           ___aldiv (ARG)
     ___lmul
   _Setup
     _Serial_9600_Init
     _ADC_Init
     _ADC_Select_Channel

 _Interrupcao (ROOT)
   _Serial_Interrupt
     i1_inserir
     i1_remover
     i1_estaVazia
     i1_estaCheia
   _ADC_Interrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       B       2        0.0%
ABS                  0      0      B6       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4A      4B       5       93.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     14      4B       7       93.8%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0      13       9       19.8%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      C1      12        0.0%


Microchip Technology PIC Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Fri Oct 28 16:27:33 2016

                ___altoft@exp 003A                   __CFG_CP$OFF 0000                 ___altoft@sign 003B  
                          l35 07E7                            l68 0F27                            fsr 0004  
                ___ftadd@exp1 0039                  ___ftadd@exp2 0038      __end_of_EnvioDadosSerial 0755  
                ___ftadd@sign 0037             ??_TrataComandoESP 002F                           l117 0B5C  
                         l118 0B6D                           l230 07A0                           l227 077F  
                         l253 0DC6                           l248 0D83                           l515 0FE7  
                         l509 0FCE                           l711 01E7                           l279 0B90  
                         l713 023B                           l538 0382                           l397 0649  
                __CFG_CPD$OFF 0000                           _RTC 00A9                           fsr0 0004  
                         indf 0000                  ___awmod@sign 002B               __end_of_ADC_Run 0B6E  
               ??_ControleLed 0025                  __CFG_FOSC$HS 0000         TrataComandoESP@Estado 00B6  
                __CFG_LVP$OFF 0000                  ___ftdiv@cntr 0060                  ___ftdiv@sign 0065  
                        l2000 0D9E                          l2004 0DAC                          l2012 0DB7  
                        l2122 0FA7                          l2132 0FD3                          l2124 0FB3  
                        l2220 0D3A                          l2212 0D34                          l2134 0FDD  
                        l2126 0FB8                          l2118 0FA0                          l2222 0D48  
                        l2230 0D61                          l2400 0460                          l2064 01F0  
                        l2208 0D2D                          l2306 03C9                          l2250 030A  
                        l2162 066A                          l2154 065A                          l2234 0D69  
                        l2226 0D56                          l2322 05AD                          l2412 0488  
                        l2180 06BD                          l2172 06A2                          l2164 067A  
                        l2316 0597                          l2246 0303                          l2360 0F87  
                        l2408 0478                          l2280 035D                          l2256 0319  
                        l2176 06AF                          l2344 0611                          l2336 05F2  
                        l2274 0348                          l2194 0C5E                          l2356 0F60  
                        l2292 0394                          l2276 0354                          l2268 0333  
                        l2196 0C70                          l2700 0178                          l1812 07D2  
                        l1820 07DB                          l2286 0372                          l2278 0359  
                        l2710 01AC                          l1814 07D4                          l2384 0411  
                        l2296 03A6                          l2288 037E                          l1816 07D6  
                        l2378 03FB                          l2474 0C11                          l2644 0773  
                        l2396 0450                          l2724 04DC                          l2590 0B33  
                        l2654 0790                          l2638 0760                          l2750 0548  
                        l2742 0527                          l2478 0C27                          l2664 07A1  
                        l2752 0555                          l2744 0539                          l2658 079D  
                        l2666 07B7                          l2754 055A                          l2690 00ED  
                        l1886 0B52                          l1894 0B63                          l2758 0568  
                        l2694 00FF                          l2686 0072                          l2688 00E6  
                        l1986 0D77                          l1996 0D98                          u2105 0D4E  
                        u2035 0C63                          u2115 0D57                          u2235 0334  
                        u2325 0373                          u2085 0D3D                          u2405 05BF  
                        u3045 0028                          u2415 05D1                          u3135 04EE  
                        u2265 0349                          u2425 05F3                          u3081 00CC  
                        u3073 0066                          u3082 00D7                          u2435 0604  
                        u3083 00E2                          u1565 0AFA                          u2445 0612  
                        u3165 0528                          u2471 0F53                          u2535 041D  
                        u2295 035E                          u2472 0F54                          u2473 0F59  
                        u1905 0FEE                          u2625 0489                          u2545 042F  
                        u2474 0F5A                          u2491 0F7A                          u1835 0FAC  
                        u2635 0491                          u1771 0210                          u3195 054C  
                        u2492 0F7B                          u1772 0211                          u2493 0F80  
                        u1773 0216                          u2494 0F81                          u1774 0217  
                        u1855 0FC7                          u2575 0461                          u2585 0469  
                        u1785 021E                          u1875 0FD6                          u1795 0232  
                        u1955 066E                          u1796 0233                          u1975 067C  
                        u2775 0C29                          u1985 0691                          u2785 0C31  
                        u1995 06A3                          i1l68 0E6D                          _TMR0 0001  
                __CFG_WRT$OFF 0000                          _main 0B8B                  ___ftpack@arg 0025  
                ___ftpack@exp 0028                          btemp 007E                          _sqrt 01B7  
            __end_of_ADC_Init 0BCA              __end_of_ADC_Read 0A97                 __CFG_BOREN$ON 0000  
                        start 0012                  ___ftmul@cntr 003B                  ___ftmul@sign 003C  
  __end_of_ADC_Select_Channel 0B05                  ___fttol@exp1 00D5                  ___fttol@lval 00D1  
                 i1_estaCheia 0AB7                   i1_estaVazia 0AA6               __end_of___aldiv 06C6  
                       ?_main 0070               __end_of___ftadd 03E3                 __CFG_WDTE$OFF 0000  
             __end_of___awmod 0D70               __end_of___ftdiv 0637                         ?_sqrt 0040  
             __end_of___ftmul 04B6               __end_of___ftsub 0B51               __end_of___fttol 057F  
                       i1l205 0CA9                         i1l206 0CB3                         i1l207 0CBD  
                       i1l209 0CC7                         _RCREG 001A                         _RCSTA 0018  
                       _SPBRG 0099                         _PORTB 0006                         _PORTD 0008  
                  _BufferRead 00B9                         _TRISA 0085                         _TRISB 0086  
                       _TRISD 0088                         _TRISE 0089                         _TXREG 0019  
                       _TXSTA 0098           ___lmul@multiplicand 0029                         _Setup 0BCA  
         _TemporizadorSerialR 00AF           _TemporizadorSerialW 00E0                         _errno 00B1  
               ___ftpack@sign 0029               __end_of_inserir 0ED9                         pclath 000A  
             __end_of_remover 0F37           __end_of_ControleLed 0DC7                         sqrt@i 004F  
                       sqrt@q 0050                         sqrt@x 0053                         sqrt@y 0040  
                       sqrt@z 004C                         status 0003                         wtemp0 007E  
               ??_Interrupcao 0020               __initialization 0B05                  __end_of_main 0BAA  
                __end_of_sqrt 02DA            __size_ofi1_inserir 005A        __size_of_ADC_Available 0004  
          __size_ofi1_remover 005C                     ??_ADC_Run 0025                        ??_main 006A  
               ___fttol@sign1 00D0                        ??_sqrt 0043                        ?_Setup 0070  
                      _ADCON0 001F                        _ADCON1 009F              __end_of___altoft 0C8A  
                      _ADRESH 001E                        _ADRESL 009E              __end_of___ftpack 1000  
            _Serial_9600_Init 07C6                        i1l2524 0D05                        i1l2516 0CF7  
                      i1l1872 0A9E                        _INTCON 000B        __size_of_ADC_Interrupt 000F  
                      _SSPADD 0093                        _TRISC3 043B                        _TRISC4 043C  
               ??_Serial_Read 002F                        _SSPCON 0014                   _BufferWrite 0190  
           ControleLed@Estado 00B4                __CFG_PWRTE$OFF 0000                        _Tensao 00A4  
                      ___ftge 0F37                        ___lmul 0C07                     ??___aldiv 002D  
                   ??___ftadd 0033                     ??___awmod 0029                     ??___ftdiv 005C  
                   ??___ftmul 0033                     ??___ftsub 0040                     ??___fttol 00CC  
         __end_of_Interrupcao 0CD4               ___awmod@divisor 0025               ___awmod@counter 002A  
         SensoresAnalogicos@n 00A7         ___ftmul@f3_as_product 0038                     ??_inserir 0028  
                   ?_ADC_Init 0025                     ?_ADC_Read 0025                  estaCheia@buf 0025  
                      saved_w 007E                     ??_remover 0027                   _ControleLed 0D70  
          _SensoresAnalogicos 0015     __size_of_Serial_Available 000E                        sqrt@og 0049  
               _ADC_Available 0A77             __end_ofi1_inserir 0E21             __end_ofi1_remover 0E7D  
         ?_SensoresAnalogicos 0070       __end_of__initialization 0B17                    ___altoft@c 0034  
                  ___ftadd@f1 002D                    ___ftadd@f2 0030                    ___ftge@ff1 0025  
                  ___ftge@ff2 0028                    ___ftdiv@f1 0059                    ___ftdiv@f2 0056  
                  ___ftdiv@f3 0061  SensoresAnalogicos@valorAtual 00DA               _TrataComandoESP 0755  
                  ___ftmul@f1 002D                    ___ftmul@f2 0030                    ___ftsub@f1 003D  
                  ___ftsub@f2 003A                    ___fttol@f1 0066                __pcstackCOMMON 0070  
               __end_of_Setup 0C07           __end_of_Serial_Read 0B35             _TemporizadorPortb 00AD  
   __size_of_Serial_Interrupt 004D          ??_SensoresAnalogicos 00D6                 _ADC_Interrupt 0A97  
           ?_EnvioDadosSerial 0070                    ??_ADC_Init 0026                    ??_ADC_Read 0027  
          ??_EnvioDadosSerial 002F                       ??_Setup 0028                i1estaCheia@buf 0070  
              ?_ADC_Available 0070                    __pbssBANK0 006A                    __pbssBANK1 00A0  
                  __pbssBANK3 0190            __size_of_estaCheia 0014                 ?_Serial_Write 0070  
          __size_of_estaVazia 0013                  estaVazia@buf 0025                    _clearPORTB 00B7  
                 _Interrupcao 0C8A                    __pmaintext 0B8B                       ?___ftge 0025  
                     ?___lmul 0025                    __pintentry 0004                  ?i1_estaCheia 0070  
                   ?___altoft 0034                ___lmul@product 002E                ?_ADC_Interrupt 0070  
                     _ADC_Run 0B51                  ?i1_estaVazia 0070                     ?___ftpack 0025  
          _ADC_Select_Channel 0AF0                       _SSPCON2 0091                       _SSPSTAT 0094  
              ??_Serial_Write 002D           ?_ADC_Select_Channel 0070       __end_of_TrataComandoESP 07C6  
                 _Serial_Read 0B1B                i1estaVazia@buf 0070                       ___aldiv 0637  
                i1inserir@buf 0070               __size_of___ftge 005F               __size_of___lmul 0041  
                     ___ftadd 02DA                       ___awmod 0D21                       ___ftdiv 057F  
                     ___ftmul 03E3                       ___ftsub 0B35                       ___fttol 04B6  
        ??_ADC_Select_Channel 0025                    ??___altoft 0038      __end_of_Serial_9600_Init 07F8  
           __end_of_estaCheia 0AF0                    ??___ftpack 002A                       __ptext1 0BCA  
                     __ptext2 0BAA                       __ptext3 07C6                       __ptext4 0015  
                     __ptext5 0C07                       __ptext6 04B6                       __ptext7 057F  
                     __ptext8 0D21                       __ptext9 0C48             __end_of_estaVazia 0ADC  
                 remover@temp 002D                       _inserir 0E7D              ___awmod@dividend 0027  
            ___aldiv@dividend 0029             Serial_Write@Valor 002E               ??_ADC_Available 0025  
                     _remover 0ED9              _Serial_Available 0A7B                       clrloop0 07F9  
        end_of_initialization 0B17          ADC_Select_Channel@ch 0027                     _RCSTAbits 0018  
            ___aldiv@quotient 0030              _ADC_Temporizador 007C               ??_ADC_Interrupt 0070  
            _Serial_Interrupt 0CD4                  i1remover@buf 0070                     _PORTDbits 0008  
                ?_ControleLed 0070             __size_of_ADC_Init 0020             __size_of_ADC_Read 000E  
            ?_TrataComandoESP 0070                   ___ftdiv@exp 0064                     _TXSTAbits 0098  
                   i1_inserir 0DC7                     i1_remover 0E21                   ___ftmul@exp 0037  
    Serial_9600_Init@osc_freq 0025                __end_of___ftge 0F96                  inserir@Valor 0027  
              __end_of___lmul 0C48          __end_of_Serial_Write 0B8B       SensoresAnalogicos@index 00B5  
        __size_ofi1_estaCheia 0012          __size_ofi1_estaVazia 0011           start_initialization 0B05  
   __size_of_EnvioDadosSerial 008F                    ?i1_inserir 0070                  ?_Interrupcao 0070  
                  ?i1_remover 0070                ADC_Init@config 0025                _dadoDisponivel 006A  
                    ??___ftge 002B                      ??___lmul 002D                      ?_ADC_Run 0070  
 __size_of_SensoresAnalogicos 01A2                i1inserir@Valor 0072             __size_of___altoft 0042  
  SensoresAnalogicos@valorAux 00DC             __size_of___ftpack 006A                   __pbssCOMMON 007C  
               __pcstackBANK0 0020                 __pcstackBANK1 00CC                    inserir@buf 0025  
                ?_Serial_Read 0070                     __pnvBANK1 00E0      __end_of_Serial_Available 0A89  
                    ?___aldiv 0025                      ?___ftadd 002D                      ?___awmod 0025  
                    ?___ftdiv 0056                      ?___ftmul 002D                      ?___ftsub 003A  
                    ?___fttol 0066                     _conectado 00B8             ?_Serial_9600_Init 0070  
          ??_Serial_9600_Init 0025                     _estaCheia 0ADC                      ?_inserir 0025  
                    _ADC_Init 0BAA                      _ADC_Read 0A89                     _estaVazia 0AC9  
                    ?_remover 0025                __size_of_Setup 003D          __size_of_ControleLed 0057  
    __end_of_Serial_Interrupt 0D21                    remover@buf 0025               ___aldiv@divisor 0025  
           interrupt_function 0004               ___aldiv@counter 002E                   ??i1_inserir 0073  
                   clear_ram0 07F8                      _PIE1bits 008C                   ??i1_remover 0072  
                    _PIR1bits 000C         __size_of_Serial_Write 001D   __size_of_ADC_Select_Channel 0015  
                  _ADCON0bits 001F              __size_of_ADC_Run 001D                    ?_estaCheia 0025  
                  ?_estaVazia 0025         __end_of_ADC_Available 0A7B             ___lmul@multiplier 0025  
                _Serial_Write 0B6E              _EnvioDadosSerial 06C6                      _ModuloCM 00E2  
        __size_of_Interrupcao 004A                 ADC_Init@trisa 0027              __size_of___aldiv 008F  
            __size_of___ftadd 0109              __size_of___awmod 004F              __size_of___ftdiv 00B8  
                    ___altoft 0C48              __size_of___ftmul 00D3              __size_of___ftsub 001C  
            __size_of___fttol 00C9         __end_of_ADC_Interrupt 0AA6                      ___ftpack 0F96  
             _TemporizadorLed 00AB              __size_of_inserir 005C                      __ptext10 0637  
                    __ptext11 01B7                      __ptext20 0D70                      __ptext12 0B35  
                    __ptext21 0755                      __ptext13 02DA                      __ptext30 0B51  
                    __ptext22 0A7B                      __ptext14 03E3                      __ptext31 0C8A  
                    __ptext23 0B1B                      __ptext15 0F96                      __ptext32 0A97  
                    __ptext24 0ED9                      __ptext16 0F37                      __ptext33 0CD4  
                    __ptext25 0AC9                      __ptext17 0A77                      __ptext34 0AB7  
                    __ptext26 06C6                      __ptext18 0AF0                      __ptext35 0AA6  
                    __ptext27 0B6E                      __ptext19 0A89                      __ptext36 0E21  
                    __ptext28 0E7D                      __ptext37 0DC7                      __ptext29 0ADC  
            __size_of_remover 005E   SensoresAnalogicos@somatorio 00A0                 __size_of_main 001F  
               __size_of_sqrt 0123          __size_of_Serial_Read 001A                 ADC_Run@Estado 00B3  
    __size_of_TrataComandoESP 0071                 ??i1_estaCheia 0072                 ??i1_estaVazia 0072  
          TrataComandoESP@cmd 0030                   ??_estaCheia 0027                    _INTCONbits 000B  
                 ??_estaVazia 0027           Serial_Interrupt@tmp 007B                      intlevel1 0000  
           ?_Serial_Available 0070    __end_of_SensoresAnalogicos 01B7            ??_Serial_Available 0029  
                  _OPTION_REG 0081           __end_ofi1_estaCheia 0AC9                 i1remover@temp 0078  
         __end_ofi1_estaVazia 0AB7                  ___aldiv@sign 002F                   _SSPCON2bits 0091  
   __size_of_Serial_9600_Init 0032             ?_Serial_Interrupt 0070            ??_Serial_Interrupt 007A  
