

Microchip Technology PIC LITE Macro Assembler V1.20 build 52243 
                                                                                               Thu Oct 13 09:53:23 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	dabs	1,0x7E,2
    42  0000                     	;# 
    43  0001                     	;# 
    44  0002                     	;# 
    45  0003                     	;# 
    46  0004                     	;# 
    47  0005                     	;# 
    48  0006                     	;# 
    49  0007                     	;# 
    50  0008                     	;# 
    51  0009                     	;# 
    52  000A                     	;# 
    53  000B                     	;# 
    54  000C                     	;# 
    55  000D                     	;# 
    56  000E                     	;# 
    57  000E                     	;# 
    58  000F                     	;# 
    59  0010                     	;# 
    60  0011                     	;# 
    61  0012                     	;# 
    62  0013                     	;# 
    63  0014                     	;# 
    64  0015                     	;# 
    65  0015                     	;# 
    66  0016                     	;# 
    67  0017                     	;# 
    68  0018                     	;# 
    69  0019                     	;# 
    70  001A                     	;# 
    71  001B                     	;# 
    72  001B                     	;# 
    73  001C                     	;# 
    74  001D                     	;# 
    75  001E                     	;# 
    76  001F                     	;# 
    77  0081                     	;# 
    78  0085                     	;# 
    79  0086                     	;# 
    80  0087                     	;# 
    81  0088                     	;# 
    82  0089                     	;# 
    83  008C                     	;# 
    84  008D                     	;# 
    85  008E                     	;# 
    86  0091                     	;# 
    87  0092                     	;# 
    88  0093                     	;# 
    89  0094                     	;# 
    90  0098                     	;# 
    91  0099                     	;# 
    92  009C                     	;# 
    93  009D                     	;# 
    94  009E                     	;# 
    95  009F                     	;# 
    96  010C                     	;# 
    97  010D                     	;# 
    98  010E                     	;# 
    99  010F                     	;# 
   100  018C                     	;# 
   101  018D                     	;# 
   102  0000                     	;# 
   103  0001                     	;# 
   104  0002                     	;# 
   105  0003                     	;# 
   106  0004                     	;# 
   107  0005                     	;# 
   108  0006                     	;# 
   109  0007                     	;# 
   110  0008                     	;# 
   111  0009                     	;# 
   112  000A                     	;# 
   113  000B                     	;# 
   114  000C                     	;# 
   115  000D                     	;# 
   116  000E                     	;# 
   117  000E                     	;# 
   118  000F                     	;# 
   119  0010                     	;# 
   120  0011                     	;# 
   121  0012                     	;# 
   122  0013                     	;# 
   123  0014                     	;# 
   124  0015                     	;# 
   125  0015                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  001A                     	;# 
   131  001B                     	;# 
   132  001B                     	;# 
   133  001C                     	;# 
   134  001D                     	;# 
   135  001E                     	;# 
   136  001F                     	;# 
   137  0081                     	;# 
   138  0085                     	;# 
   139  0086                     	;# 
   140  0087                     	;# 
   141  0088                     	;# 
   142  0089                     	;# 
   143  008C                     	;# 
   144  008D                     	;# 
   145  008E                     	;# 
   146  0091                     	;# 
   147  0092                     	;# 
   148  0093                     	;# 
   149  0094                     	;# 
   150  0098                     	;# 
   151  0099                     	;# 
   152  009C                     	;# 
   153  009D                     	;# 
   154  009E                     	;# 
   155  009F                     	;# 
   156  010C                     	;# 
   157  010D                     	;# 
   158  010E                     	;# 
   159  010F                     	;# 
   160  018C                     	;# 
   161  018D                     	;# 
   162  0000                     	;# 
   163  0001                     	;# 
   164  0002                     	;# 
   165  0003                     	;# 
   166  0004                     	;# 
   167  0005                     	;# 
   168  0006                     	;# 
   169  0007                     	;# 
   170  0008                     	;# 
   171  0009                     	;# 
   172  000A                     	;# 
   173  000B                     	;# 
   174  000C                     	;# 
   175  000D                     	;# 
   176  000E                     	;# 
   177  000E                     	;# 
   178  000F                     	;# 
   179  0010                     	;# 
   180  0011                     	;# 
   181  0012                     	;# 
   182  0013                     	;# 
   183  0014                     	;# 
   184  0015                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0017                     	;# 
   188  0018                     	;# 
   189  0019                     	;# 
   190  001A                     	;# 
   191  001B                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  001D                     	;# 
   195  001E                     	;# 
   196  001F                     	;# 
   197  0081                     	;# 
   198  0085                     	;# 
   199  0086                     	;# 
   200  0087                     	;# 
   201  0088                     	;# 
   202  0089                     	;# 
   203  008C                     	;# 
   204  008D                     	;# 
   205  008E                     	;# 
   206  0091                     	;# 
   207  0092                     	;# 
   208  0093                     	;# 
   209  0094                     	;# 
   210  0098                     	;# 
   211  0099                     	;# 
   212  009C                     	;# 
   213  009D                     	;# 
   214  009E                     	;# 
   215  009F                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  010F                     	;# 
   220  018C                     	;# 
   221  018D                     	;# 
   222                           
   223                           	psect	idataBANK0
   224  047A                     __pidataBANK0:	
   225                           
   226                           ;initializer for _Tensao
   227  047A  347B               	retlw	123
   228  047B  347A               	retlw	122
   229  047C  3400               	retlw	0
   230                           
   231                           	psect	nvBANK0
   232  0057                     __pnvBANK0:	
   233  0057                     _TemporizadorSerialW:	
   234  0057                     	ds	2
   235  0059                     _ModuloCM:	
   236  0059                     	ds	9
   237  001F                     _ADCON0	set	31
   238  001F                     _ADCON0bits	set	31
   239  001E                     _ADRESH	set	30
   240  000B                     _INTCON	set	11
   241  000B                     _INTCONbits	set	11
   242  000C                     _PIR1bits	set	12
   243  0006                     _PORTB	set	6
   244  0008                     _PORTD	set	8
   245  0008                     _PORTDbits	set	8
   246  001A                     _RCREG	set	26
   247  0018                     _RCSTA	set	24
   248  0018                     _RCSTAbits	set	24
   249  0014                     _SSPCON	set	20
   250  0001                     _TMR0	set	1
   251  0019                     _TXREG	set	25
   252  009F                     _ADCON1	set	159
   253  009E                     _ADRESL	set	158
   254  0081                     _OPTION_REG	set	129
   255  008C                     _PIE1bits	set	140
   256  0099                     _SPBRG	set	153
   257  0093                     _SSPADD	set	147
   258  0091                     _SSPCON2	set	145
   259  0091                     _SSPCON2bits	set	145
   260  0094                     _SSPSTAT	set	148
   261  0085                     _TRISA	set	133
   262  0086                     _TRISB	set	134
   263  0088                     _TRISD	set	136
   264  0098                     _TXSTA	set	152
   265  0098                     _TXSTAbits	set	152
   266  043B                     _TRISC3	set	1083
   267  043C                     _TRISC4	set	1084
   268                           
   269                           ; #config settings
   270  0000                     
   271                           	psect	cinit
   272  0389                     start_initialization:	
   273  0389                     __initialization:	
   274                           
   275                           ; Clear objects allocated to COMMON
   276  0389  01FD               	clrf	__pbssCOMMON& (0+127)
   277                           
   278                           ; Clear objects allocated to BANK0
   279  038A  1383               	bcf	3,7	;select IRP bank0
   280  038B  3020               	movlw	low __pbssBANK0
   281  038C  0084               	movwf	4
   282  038D  3057               	movlw	low (__pbssBANK0+55)
   283  038E  120A  118A  246E   	fcall	clear_ram0
      +       120A  118A         
   284                           
   285                           ; Initialize objects allocated to BANK0
   286  0393  120A  118A  247A   	fcall	__pidataBANK0	;fetch initializer
      +       120A  118A         
   287  0398  00ED               	movwf	__pdataBANK0& (0+127)
   288  0399  120A  118A  247B   	fcall	__pidataBANK0+1	;fetch initializer
      +       120A  118A         
   289  039E  00EE               	movwf	(__pdataBANK0+1)& (0+127)
   290  039F  120A  118A  247C   	fcall	__pidataBANK0+2	;fetch initializer
   291  03A2  00EF               	movwf	(__pdataBANK0+2)& (0+127)
   292  03A3                     end_of_initialization:	
   293                           ;End of C runtime variable initialization code
   294                           
   295  03A3                     __end_of__initialization:	
   296  03A3  0183               	clrf	3
   297  03A4  120A  118A  2B6A   	ljmp	_main	;jump to C main() function
   298                           
   299                           	psect	bssCOMMON
   300  007D                     __pbssCOMMON:	
   301  007D                     _ADC_Temporizador:	
   302  007D                     	ds	1
   303                           
   304                           	psect	bssBANK0
   305  0020                     __pbssBANK0:	
   306  0020                     _RTC:	
   307  0020                     	ds	2
   308  0022                     _TemporizadorLed:	
   309  0022                     	ds	2
   310  0024                     _TemporizadorPortb:	
   311  0024                     	ds	2
   312  0026                     _TemporizadorSerialR:	
   313  0026                     	ds	2
   314  0028                     _aux:	
   315  0028                     	ds	2
   316  002A                     ADC_Run@Estado:	
   317  002A                     	ds	1
   318  002B                     ControleLed@Estado:	
   319  002B                     	ds	1
   320  002C                     MedirTensao@n:	
   321  002C                     	ds	1
   322  002D                     TrataComandoESP@Estado:	
   323  002D                     	ds	1
   324  002E                     _clearPORTB:	
   325  002E                     	ds	1
   326  002F                     _conectado:	
   327  002F                     	ds	1
   328  0030                     _dadoDisponivel:	
   329  0030                     	ds	1
   330  0031                     _BufferRead:	
   331  0031                     	ds	19
   332  0044                     _BufferWrite:	
   333  0044                     	ds	19
   334                           
   335                           	psect	dataBANK0
   336  006D                     __pdataBANK0:	
   337  006D                     _Tensao:	
   338  006D                     	ds	3
   339                           
   340                           	psect	clrtext
   341  046E                     clear_ram0:	
   342                           ;	Called with FSR containing the base address, and
   343                           ;	W with the last address+1
   344                           
   345  046E  0064               	clrwdt	;clear the watchdog before getting into this loop
   346  046F                     clrloop0:	
   347  046F  0180               	clrf	0	;clear RAM location pointed to by FSR
   348  0470  0A84               	incf	4,f	;increment pointer
   349  0471  0604               	xorwf	4,w	;XOR with final address
   350  0472  1903               	btfsc	3,2	;have we reached the end yet?
   351  0473  3400               	retlw	0	;all done for this memory range, return
   352  0474  0604               	xorwf	4,w	;XOR again to restore value
   353  0475  2C6F               	goto	clrloop0	;do the next byte
   354                           
   355                           	psect	cstackCOMMON
   356  0070                     __pcstackCOMMON:	
   357  0070                     ?_Serial_9600_Init:	
   358  0070                     ?_Serial_Interrupt:	
   359                           ; 0 bytes @ 0x0
   360                           
   361  0070                     ?_Serial_Write:	
   362                           ; 0 bytes @ 0x0
   363                           
   364  0070                     ?_ADC_Interrupt:	
   365                           ; 0 bytes @ 0x0
   366                           
   367  0070                     ??_ADC_Interrupt:	
   368                           ; 0 bytes @ 0x0
   369                           
   370  0070                     ?_ADC_Run:	
   371                           ; 0 bytes @ 0x0
   372                           
   373  0070                     ?_ADC_Select_Channel:	
   374                           ; 0 bytes @ 0x0
   375                           
   376  0070                     ?_Interrupcao:	
   377                           ; 0 bytes @ 0x0
   378                           
   379  0070                     ?_EnvioDadosSerial:	
   380                           ; 0 bytes @ 0x0
   381                           
   382  0070                     ?_TrataComandoESP:	
   383                           ; 0 bytes @ 0x0
   384                           
   385  0070                     ?_ControleLed:	
   386                           ; 0 bytes @ 0x0
   387                           
   388  0070                     ?_MedirTensao:	
   389                           ; 0 bytes @ 0x0
   390                           
   391  0070                     ?_Setup:	
   392                           ; 0 bytes @ 0x0
   393                           
   394  0070                     ?i1_inserir:	
   395                           ; 0 bytes @ 0x0
   396                           
   397  0070                     ??i1_remover:	
   398                           ; 0 bytes @ 0x0
   399                           
   400  0070                     ??i1_estaVazia:	
   401                           ; 0 bytes @ 0x0
   402                           
   403  0070                     ??i1_estaCheia:	
   404                           ; 0 bytes @ 0x0
   405                           
   406  0070                     ?_estaVazia:	
   407                           ; 0 bytes @ 0x0
   408                           
   409  0070                     ?_remover:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ?_estaCheia:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0070                     ?_Serial_Read:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0070                     ?_Serial_Available:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0070                     ?_ADC_Available:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0070                     ?i1_remover:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0070                     ?i1_estaVazia:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0070                     ?i1_estaCheia:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0070                     ?_main:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  0070                     i1inserir@Valor:	
   437                           ; 2 bytes @ 0x0
   438                           
   439  0070                     i1estaVazia@buf:	
   440                           ; 1 bytes @ 0x0
   441                           
   442  0070                     i1estaCheia@buf:	
   443                           ; 1 bytes @ 0x0
   444                           
   445                           
   446                           ; 1 bytes @ 0x0
   447  0070                     	ds	1
   448  0071                     ??i1_inserir:	
   449                           
   450                           ; 0 bytes @ 0x1
   451  0071                     	ds	2
   452  0073                     i1inserir@buf:	
   453  0073                     i1remover@temp:	
   454                           ; 1 bytes @ 0x3
   455                           
   456                           
   457                           ; 2 bytes @ 0x3
   458  0073                     	ds	2
   459  0075                     i1remover@buf:	
   460                           
   461                           ; 1 bytes @ 0x5
   462  0075                     	ds	1
   463  0076                     ??_Serial_Interrupt:	
   464                           
   465                           ; 0 bytes @ 0x6
   466  0076                     	ds	1
   467  0077                     Serial_Interrupt@tmp:	
   468                           
   469                           ; 1 bytes @ 0x7
   470  0077                     	ds	1
   471  0078                     ??_Interrupcao:	
   472                           
   473                           ; 0 bytes @ 0x8
   474  0078                     	ds	5
   475                           
   476                           	psect	cstackBANK0
   477  0062                     __pcstackBANK0:	
   478  0062                     ??_estaVazia:	
   479  0062                     ??_remover:	
   480                           ; 0 bytes @ 0x0
   481                           
   482  0062                     ??_estaCheia:	
   483                           ; 0 bytes @ 0x0
   484                           
   485  0062                     ?_inserir:	
   486                           ; 0 bytes @ 0x0
   487                           
   488  0062                     ??_Serial_9600_Init:	
   489                           ; 0 bytes @ 0x0
   490                           
   491  0062                     ?_ADC_Init:	
   492                           ; 0 bytes @ 0x0
   493                           
   494  0062                     ??_ADC_Run:	
   495                           ; 0 bytes @ 0x0
   496                           
   497  0062                     ??_ADC_Select_Channel:	
   498                           ; 0 bytes @ 0x0
   499                           
   500  0062                     ??_ADC_Available:	
   501                           ; 0 bytes @ 0x0
   502                           
   503  0062                     ??_ControleLed:	
   504                           ; 0 bytes @ 0x0
   505                           
   506  0062                     ?_ADC_Read:	
   507                           ; 0 bytes @ 0x0
   508                           
   509  0062                     ?___lwdiv:	
   510                           ; 2 bytes @ 0x0
   511                           
   512  0062                     Serial_9600_Init@osc_freq:	
   513                           ; 2 bytes @ 0x0
   514                           
   515  0062                     inserir@Valor:	
   516                           ; 1 bytes @ 0x0
   517                           
   518  0062                     estaVazia@buf:	
   519                           ; 1 bytes @ 0x0
   520                           
   521  0062                     estaCheia@buf:	
   522                           ; 1 bytes @ 0x0
   523                           
   524  0062                     ADC_Init@config:	
   525                           ; 1 bytes @ 0x0
   526                           
   527  0062                     ___lwdiv@divisor:	
   528                           ; 1 bytes @ 0x0
   529                           
   530                           
   531                           ; 2 bytes @ 0x0
   532  0062                     	ds	1
   533  0063                     ??_inserir:	
   534  0063                     ??_Serial_Available:	
   535                           ; 0 bytes @ 0x1
   536                           
   537  0063                     ??_ADC_Init:	
   538                           ; 0 bytes @ 0x1
   539                           
   540                           
   541                           ; 0 bytes @ 0x1
   542  0063                     	ds	1
   543  0064                     ??_ADC_Read:	
   544  0064                     ADC_Init@trisa:	
   545                           ; 0 bytes @ 0x2
   546                           
   547  0064                     ADC_Select_Channel@ch:	
   548                           ; 1 bytes @ 0x2
   549                           
   550  0064                     ___lwdiv@dividend:	
   551                           ; 1 bytes @ 0x2
   552                           
   553                           
   554                           ; 2 bytes @ 0x2
   555  0064                     	ds	1
   556  0065                     ??_Setup:	
   557  0065                     inserir@buf:	
   558                           ; 0 bytes @ 0x3
   559                           
   560  0065                     remover@temp:	
   561                           ; 1 bytes @ 0x3
   562                           
   563                           
   564                           ; 2 bytes @ 0x3
   565  0065                     	ds	1
   566  0066                     ??_Serial_Write:	
   567  0066                     ??___lwdiv:	
   568                           ; 0 bytes @ 0x4
   569                           
   570                           
   571                           ; 0 bytes @ 0x4
   572  0066                     	ds	1
   573  0067                     Serial_Write@Valor:	
   574  0067                     remover@buf:	
   575                           ; 1 bytes @ 0x5
   576                           
   577  0067                     ___lwdiv@quotient:	
   578                           ; 1 bytes @ 0x5
   579                           
   580                           
   581                           ; 2 bytes @ 0x5
   582  0067                     	ds	1
   583  0068                     ??_Serial_Read:	
   584  0068                     ??_EnvioDadosSerial:	
   585                           ; 0 bytes @ 0x6
   586                           
   587  0068                     ??_TrataComandoESP:	
   588                           ; 0 bytes @ 0x6
   589                           
   590                           
   591                           ; 0 bytes @ 0x6
   592  0068                     	ds	1
   593  0069                     TrataComandoESP@cmd:	
   594  0069                     ___lwdiv@counter:	
   595                           ; 1 bytes @ 0x7
   596                           
   597                           
   598                           ; 1 bytes @ 0x7
   599  0069                     	ds	1
   600  006A                     ??_MedirTensao:	
   601                           
   602                           ; 0 bytes @ 0x8
   603  006A                     	ds	1
   604  006B                     MedirTensao@ultimaLeitura:	
   605                           
   606                           ; 2 bytes @ 0x9
   607  006B                     	ds	2
   608  006D                     ??_main:	
   609                           
   610                           	psect	maintext
   611  036A                     __pmaintext:	
   612                           ; 0 bytes @ 0xB
   613 ;;
   614 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   615 ;;
   616 ;; *************** function _main *****************
   617 ;; Defined at:
   618 ;;		line 241 in file "TCC_Main.c"
   619 ;; Parameters:    Size  Location     Type
   620 ;;		None
   621 ;; Auto vars:     Size  Location     Type
   622 ;;		None
   623 ;; Return value:  Size  Location     Type
   624 ;;                  2  265[COMMON] int 
   625 ;; Registers used:
   626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   627 ;; Tracked objects:
   628 ;;		On entry : 17F/0
   629 ;;		On exit  : 0/0
   630 ;;		Unchanged: 0/0
   631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   632 ;;      Params:         0       0       0       0       0
   633 ;;      Locals:         0       0       0       0       0
   634 ;;      Temps:          0       0       0       0       0
   635 ;;      Totals:         0       0       0       0       0
   636 ;;Total ram usage:        0 bytes
   637 ;; Hardware stack levels required when called:    6
   638 ;; This function calls:
   639 ;;		_ADC_Run
   640 ;;		_EnvioDadosSerial
   641 ;;		_TrataComandoESP
   642 ;;		_ControleLed
   643 ;;		_MedirTensao
   644 ;;		_Setup
   645 ;; This function is called by:
   646 ;;		Startup code after reset
   647 ;; This function uses a non-reentrant model
   648 ;;
   649                           
   650                           
   651                           ;psect for function _main
   652  036A                     _main:	
   653                           
   654                           ;TCC_Main.c: 242: Setup();
   655                           
   656                           ;incstack = 0
   657                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   658  036A  120A  118A  2255   	fcall	_Setup
      +       120A  118A         
   659  036F                     l266:	
   660                           ;TCC_Main.c: 244: while(1)
   661                           
   662                           
   663                           ;TCC_Main.c: 245: {
   664                           ;TCC_Main.c: 246: ControleLed();
   665  036F  120A  118A  2191   	fcall	_ControleLed
      +       120A  118A         
   666                           
   667                           ;TCC_Main.c: 247: EnvioDadosSerial();
   668  0374  120A  118A  2015   	fcall	_EnvioDadosSerial
      +       120A  118A         
   669                           
   670                           ;TCC_Main.c: 248: TrataComandoESP();
   671  0379  120A  118A  209C   	fcall	_TrataComandoESP
      +       120A  118A         
   672                           
   673                           ;TCC_Main.c: 249: ADC_Run();
   674  037E  120A  118A  23C5   	fcall	_ADC_Run
      +       120A  118A         
   675                           
   676                           ;TCC_Main.c: 250: MedirTensao();
   677  0383  120A  118A  214C   	fcall	_MedirTensao
      +       120A  118A         
   678  0388  2B6F               	goto	l266
   679  0389                     __end_of_main:	
   680                           
   681                           	psect	text1
   682  0255                     __ptext1:	
   683 ;; *************** function _Setup *****************
   684 ;; Defined at:
   685 ;;		line 215 in file "TCC_Main.c"
   686 ;; Parameters:    Size  Location     Type
   687 ;;		None
   688 ;; Auto vars:     Size  Location     Type
   689 ;;		None
   690 ;; Return value:  Size  Location     Type
   691 ;;		None               void
   692 ;; Registers used:
   693 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   694 ;; Tracked objects:
   695 ;;		On entry : 0/0
   696 ;;		On exit  : 0/0
   697 ;;		Unchanged: 0/0
   698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   699 ;;      Params:         0       0       0       0       0
   700 ;;      Locals:         0       0       0       0       0
   701 ;;      Temps:          0       1       0       0       0
   702 ;;      Totals:         0       1       0       0       0
   703 ;;Total ram usage:        1 bytes
   704 ;; Hardware stack levels used:    1
   705 ;; Hardware stack levels required when called:    4
   706 ;; This function calls:
   707 ;;		_Serial_9600_Init
   708 ;;		_ADC_Init
   709 ;;		_ADC_Select_Channel
   710 ;; This function is called by:
   711 ;;		_main
   712 ;; This function uses a non-reentrant model
   713 ;;
   714                           
   715                           
   716                           ;psect for function _Setup
   717  0255                     _Setup:	
   718                           
   719                           ;TCC_Main.c: 216: TRISB = 0;
   720                           
   721                           ;incstack = 0
   722                           ; Regs used in _Setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   723  0255  1683               	bsf	3,5	;RP0=1, select bank1
   724  0256  1303               	bcf	3,6	;RP1=0, select bank1
   725  0257  0186               	clrf	6	;volatile
   726                           
   727                           ;TCC_Main.c: 217: PORTB = 0;
   728  0258  1283               	bcf	3,5	;RP0=0, select bank0
   729  0259  1303               	bcf	3,6	;RP1=0, select bank0
   730  025A  0186               	clrf	6	;volatile
   731                           
   732                           ;TCC_Main.c: 218: TRISD = 0;
   733  025B  1683               	bsf	3,5	;RP0=1, select bank1
   734  025C  1303               	bcf	3,6	;RP1=0, select bank1
   735  025D  0188               	clrf	8	;volatile
   736                           
   737                           ;TCC_Main.c: 219: PORTD = 0;
   738  025E  1283               	bcf	3,5	;RP0=0, select bank0
   739  025F  1303               	bcf	3,6	;RP1=0, select bank0
   740  0260  0188               	clrf	8	;volatile
   741                           
   742                           ;TCC_Main.c: 221: OPTION_REG = 0b00000000;
   743  0261  1683               	bsf	3,5	;RP0=1, select bank1
   744  0262  1303               	bcf	3,6	;RP1=0, select bank1
   745  0263  0181               	clrf	1	;volatile
   746                           
   747                           ;TCC_Main.c: 222: TMR0 = 130;
   748  0264  3082               	movlw	130
   749  0265  1283               	bcf	3,5	;RP0=0, select bank0
   750  0266  1303               	bcf	3,6	;RP1=0, select bank0
   751  0267  0081               	movwf	1	;volatile
   752                           
   753                           ;TCC_Main.c: 223: INTCON = 0b11100000;
   754  0268  30E0               	movlw	224
   755  0269  008B               	movwf	11	;volatile
   756                           
   757                           ;TCC_Main.c: 225: Serial_9600_Init(10);
   758  026A  300A               	movlw	10
   759  026B  120A  118A  2294   	fcall	_Serial_9600_Init
      +       120A  118A         
   760                           
   761                           ;TCC_Main.c: 226: ADC_Init(0xFF, 0x00);
   762  0270  1283               	bcf	3,5	;RP0=0, select bank0
   763  0271  1303               	bcf	3,6	;RP1=0, select bank0
   764  0272  01E2               	clrf	?_ADC_Init
   765  0273  30FF               	movlw	255
   766  0274  120A  118A  23A7   	fcall	_ADC_Init
      +       120A  118A         
   767                           
   768                           ;TCC_Main.c: 227: ADC_Select_Channel(0);
   769  0279  3000               	movlw	0
   770  027A  120A  118A  23F5   	fcall	_ADC_Select_Channel
   771                           
   772                           ;TCC_Main.c: 231: ModuloCM.status = 0b00001100;
   773  027D  300C               	movlw	12
   774  027E  1283               	bcf	3,5	;RP0=0, select bank0
   775  027F  1303               	bcf	3,6	;RP1=0, select bank0
   776  0280  00E5               	movwf	??_Setup
   777  0281  0865               	movf	??_Setup,w
   778  0282  00D9               	movwf	_ModuloCM
   779                           
   780                           ;TCC_Main.c: 232: ModuloCM.corrente[0] = 50;
   781  0283  3032               	movlw	50
   782  0284  00DA               	movwf	_ModuloCM+1
   783  0285  3000               	movlw	0
   784  0286  00DB               	movwf	_ModuloCM+2
   785                           
   786                           ;TCC_Main.c: 233: ModuloCM.corrente[1] = 34;
   787  0287  3022               	movlw	34
   788  0288  00DC               	movwf	_ModuloCM+3
   789  0289  3000               	movlw	0
   790  028A  00DD               	movwf	_ModuloCM+4
   791                           
   792                           ;TCC_Main.c: 234: ModuloCM.corrente[2] = 0;
   793  028B  01DE               	clrf	_ModuloCM+5
   794  028C  01DF               	clrf	_ModuloCM+6
   795                           
   796                           ;TCC_Main.c: 235: ModuloCM.corrente[3] = 0;
   797  028D  01E0               	clrf	_ModuloCM+7
   798  028E  01E1               	clrf	_ModuloCM+8
   799                           
   800                           ;TCC_Main.c: 237: TemporizadorSerialW = 20000;
   801  028F  3020               	movlw	32
   802  0290  00D7               	movwf	_TemporizadorSerialW
   803  0291  304E               	movlw	78
   804  0292  00D8               	movwf	_TemporizadorSerialW+1
   805  0293  0008               	return
   806  0294                     __end_of_Setup:	
   807                           
   808                           	psect	text2
   809  03F5                     __ptext2:	
   810 ;; *************** function _ADC_Select_Channel *****************
   811 ;; Defined at:
   812 ;;		line 60 in file "ConversorAD.c"
   813 ;; Parameters:    Size  Location     Type
   814 ;;  ch              1    wreg     unsigned char 
   815 ;; Auto vars:     Size  Location     Type
   816 ;;  ch              1    2[BANK0 ] unsigned char 
   817 ;; Return value:  Size  Location     Type
   818 ;;		None               void
   819 ;; Registers used:
   820 ;;		wreg, status,2, status,0
   821 ;; Tracked objects:
   822 ;;		On entry : 0/0
   823 ;;		On exit  : 0/0
   824 ;;		Unchanged: 0/0
   825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   826 ;;      Params:         0       0       0       0       0
   827 ;;      Locals:         0       1       0       0       0
   828 ;;      Temps:          0       2       0       0       0
   829 ;;      Totals:         0       3       0       0       0
   830 ;;Total ram usage:        3 bytes
   831 ;; Hardware stack levels used:    1
   832 ;; Hardware stack levels required when called:    3
   833 ;; This function calls:
   834 ;;		Nothing
   835 ;; This function is called by:
   836 ;;		_Setup
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           
   841                           ;psect for function _ADC_Select_Channel
   842  03F5                     _ADC_Select_Channel:	
   843                           
   844                           ;incstack = 0
   845                           ; Regs used in _ADC_Select_Channel: [wreg+status,2+status,0]
   846                           ;ADC_Select_Channel@ch stored from wreg
   847  03F5  1283               	bcf	3,5	;RP0=0, select bank0
   848  03F6  1303               	bcf	3,6	;RP1=0, select bank0
   849  03F7  00E4               	movwf	ADC_Select_Channel@ch
   850                           
   851                           ;ConversorAD.c: 61: ADCON0 &= 0b11000111;
   852  03F8  30C7               	movlw	199
   853  03F9  00E2               	movwf	??_ADC_Select_Channel
   854  03FA  0862               	movf	??_ADC_Select_Channel,w
   855  03FB  059F               	andwf	31,f	;volatile
   856                           
   857                           ;ConversorAD.c: 62: ADCON0 |= (ch<<3);
   858  03FC  0864               	movf	ADC_Select_Channel@ch,w
   859  03FD  00E2               	movwf	??_ADC_Select_Channel
   860  03FE  3002               	movlw	2
   861  03FF                     u535:	
   862  03FF  1003               	clrc
   863  0400  0DE2               	rlf	??_ADC_Select_Channel,f
   864  0401  3EFF               	addlw	-1
   865  0402  1D03               	skipz
   866  0403  2BFF               	goto	u535
   867  0404  1003               	clrc
   868  0405  0D62               	rlf	??_ADC_Select_Channel,w
   869  0406  00E3               	movwf	??_ADC_Select_Channel+1
   870  0407  0863               	movf	??_ADC_Select_Channel+1,w
   871  0408  049F               	iorwf	31,f	;volatile
   872  0409  0008               	return
   873  040A                     __end_of_ADC_Select_Channel:	
   874                           
   875                           	psect	text3
   876  03A7                     __ptext3:	
   877 ;; *************** function _ADC_Init *****************
   878 ;; Defined at:
   879 ;;		line 23 in file "ConversorAD.c"
   880 ;; Parameters:    Size  Location     Type
   881 ;;  trisa           1    wreg     unsigned char 
   882 ;;  config          1    0[BANK0 ] unsigned char 
   883 ;; Auto vars:     Size  Location     Type
   884 ;;  trisa           1    2[BANK0 ] unsigned char 
   885 ;; Return value:  Size  Location     Type
   886 ;;		None               void
   887 ;; Registers used:
   888 ;;		wreg, status,2, status,0
   889 ;; Tracked objects:
   890 ;;		On entry : 0/0
   891 ;;		On exit  : 0/0
   892 ;;		Unchanged: 0/0
   893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   894 ;;      Params:         0       1       0       0       0
   895 ;;      Locals:         0       1       0       0       0
   896 ;;      Temps:          0       1       0       0       0
   897 ;;      Totals:         0       3       0       0       0
   898 ;;Total ram usage:        3 bytes
   899 ;; Hardware stack levels used:    1
   900 ;; Hardware stack levels required when called:    3
   901 ;; This function calls:
   902 ;;		Nothing
   903 ;; This function is called by:
   904 ;;		_Setup
   905 ;; This function uses a non-reentrant model
   906 ;;
   907                           
   908                           
   909                           ;psect for function _ADC_Init
   910  03A7                     _ADC_Init:	
   911                           
   912                           ;incstack = 0
   913                           ; Regs used in _ADC_Init: [wreg+status,2+status,0]
   914                           ;ADC_Init@trisa stored from wreg
   915  03A7  1283               	bcf	3,5	;RP0=0, select bank0
   916  03A8  1303               	bcf	3,6	;RP1=0, select bank0
   917  03A9  00E4               	movwf	ADC_Init@trisa
   918                           
   919                           ;ConversorAD.c: 24: TRISA = trisa;
   920  03AA  0864               	movf	ADC_Init@trisa,w
   921  03AB  1683               	bsf	3,5	;RP0=1, select bank1
   922  03AC  1303               	bcf	3,6	;RP1=0, select bank1
   923  03AD  0085               	movwf	5	;volatile
   924                           
   925                           ;ConversorAD.c: 25: ADCON0 = 0b10000001;
   926  03AE  3081               	movlw	129
   927  03AF  1283               	bcf	3,5	;RP0=0, select bank0
   928  03B0  1303               	bcf	3,6	;RP1=0, select bank0
   929  03B1  009F               	movwf	31	;volatile
   930                           
   931                           ;ConversorAD.c: 26: ADCON1 = 0b10000000;
   932  03B2  3080               	movlw	128
   933  03B3  1683               	bsf	3,5	;RP0=1, select bank1
   934  03B4  1303               	bcf	3,6	;RP1=0, select bank1
   935  03B5  009F               	movwf	31	;volatile
   936                           
   937                           ;ConversorAD.c: 27: ADCON1 |= config;
   938  03B6  1283               	bcf	3,5	;RP0=0, select bank0
   939  03B7  1303               	bcf	3,6	;RP1=0, select bank0
   940  03B8  0862               	movf	ADC_Init@config,w
   941  03B9  00E3               	movwf	??_ADC_Init
   942  03BA  0863               	movf	??_ADC_Init,w
   943  03BB  1683               	bsf	3,5	;RP0=1, select bank1
   944  03BC  1303               	bcf	3,6	;RP1=0, select bank1
   945  03BD  049F               	iorwf	31,f	;volatile
   946                           
   947                           ;ConversorAD.c: 29: PIR1bits.ADIF = 0;
   948  03BE  1283               	bcf	3,5	;RP0=0, select bank0
   949  03BF  1303               	bcf	3,6	;RP1=0, select bank0
   950  03C0  130C               	bcf	12,6	;volatile
   951                           
   952                           ;ConversorAD.c: 30: PIE1bits.ADIE = 1;
   953  03C1  1683               	bsf	3,5	;RP0=1, select bank1
   954  03C2  1303               	bcf	3,6	;RP1=0, select bank1
   955  03C3  170C               	bsf	12,6	;volatile
   956  03C4  0008               	return
   957  03C5                     __end_of_ADC_Init:	
   958                           
   959                           	psect	text4
   960  0294                     __ptext4:	
   961 ;; *************** function _Serial_9600_Init *****************
   962 ;; Defined at:
   963 ;;		line 7 in file "Serial.c"
   964 ;; Parameters:    Size  Location     Type
   965 ;;  osc_freq        1    wreg     unsigned char 
   966 ;; Auto vars:     Size  Location     Type
   967 ;;  osc_freq        1    0[BANK0 ] unsigned char 
   968 ;; Return value:  Size  Location     Type
   969 ;;		None               void
   970 ;; Registers used:
   971 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   972 ;; Tracked objects:
   973 ;;		On entry : 0/0
   974 ;;		On exit  : 0/0
   975 ;;		Unchanged: 0/0
   976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   977 ;;      Params:         0       0       0       0       0
   978 ;;      Locals:         0       1       0       0       0
   979 ;;      Temps:          0       0       0       0       0
   980 ;;      Totals:         0       1       0       0       0
   981 ;;Total ram usage:        1 bytes
   982 ;; Hardware stack levels used:    1
   983 ;; Hardware stack levels required when called:    3
   984 ;; This function calls:
   985 ;;		Nothing
   986 ;; This function is called by:
   987 ;;		_Setup
   988 ;; This function uses a non-reentrant model
   989 ;;
   990                           
   991                           
   992                           ;psect for function _Serial_9600_Init
   993  0294                     _Serial_9600_Init:	
   994                           
   995                           ;incstack = 0
   996                           ; Regs used in _Serial_9600_Init: [wreg-fsr0h+status,2+status,0]
   997                           ;Serial_9600_Init@osc_freq stored from wreg
   998  0294  1283               	bcf	3,5	;RP0=0, select bank0
   999  0295  1303               	bcf	3,6	;RP1=0, select bank0
  1000  0296  00E2               	movwf	Serial_9600_Init@osc_freq
  1001                           
  1002                           ;Serial.c: 8: TXSTA = 0b00100100;
  1003  0297  3024               	movlw	36
  1004  0298  1683               	bsf	3,5	;RP0=1, select bank1
  1005  0299  1303               	bcf	3,6	;RP1=0, select bank1
  1006  029A  0098               	movwf	24	;volatile
  1007                           
  1008                           ;Serial.c: 9: RCSTA = 0b10010000;
  1009  029B  3090               	movlw	144
  1010  029C  1283               	bcf	3,5	;RP0=0, select bank0
  1011  029D  1303               	bcf	3,6	;RP1=0, select bank0
  1012  029E  0098               	movwf	24	;volatile
  1013                           
  1014                           ;Serial.c: 10: switch(osc_freq)
  1015  029F  2AA9               	goto	l1112
  1016  02A0                     l1104:	
  1017                           ;Serial.c: 11: {
  1018                           ;Serial.c: 12: case 10:
  1019                           
  1020                           
  1021                           ;Serial.c: 13: SPBRG = 64;
  1022  02A0  3040               	movlw	64
  1023  02A1  2AA5               	goto	L2
  1024  02A2                     l1106:	
  1025                           ;Serial.c: 15: case 16:
  1026                           
  1027                           ;Serial.c: 14: break;
  1028                           
  1029                           
  1030                           ;Serial.c: 16: SPBRG = 103;
  1031  02A2  3067               	movlw	103
  1032  02A3  2AA5               	goto	L2
  1033  02A4                     l1108:	
  1034                           ;Serial.c: 18: case 20:
  1035                           
  1036                           ;Serial.c: 17: break;
  1037                           
  1038                           
  1039                           ;Serial.c: 19: SPBRG = 129;
  1040  02A4  3081               	movlw	129
  1041  02A5                     L2:	
  1042  02A5  1683               	bsf	3,5	;RP0=1, select bank1
  1043  02A6  1303               	bcf	3,6	;RP1=0, select bank1
  1044  02A7  0099               	movwf	25	;volatile
  1045                           
  1046                           ;Serial.c: 21: }
  1047                           
  1048                           ;Serial.c: 20: break;
  1049  02A8  2AB5               	goto	l35
  1050  02A9                     l1112:	
  1051  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  1052  02AA  0862               	movf	Serial_9600_Init@osc_freq,w
  1053                           
  1054                           ; Switch size 1, requested type "space"
  1055                           ; Number of cases is 3, Range of values is 10 to 20
  1056                           ; switch strategies available:
  1057                           ; Name         Instructions Cycles
  1058                           ; simple_byte           10     6 (average)
  1059                           ; direct_byte           44    11 (fixed)
  1060                           ; jumptable            263     9 (fixed)
  1061                           ;	Chosen strategy is simple_byte
  1062  02AB  3A0A               	xorlw	10	; case 10
  1063  02AC  1903               	skipnz
  1064  02AD  2AA0               	goto	l1104
  1065  02AE  3A1A               	xorlw	26	; case 16
  1066  02AF  1903               	skipnz
  1067  02B0  2AA2               	goto	l1106
  1068  02B1  3A04               	xorlw	4	; case 20
  1069  02B2  1903               	skipnz
  1070  02B3  2AA4               	goto	l1108
  1071  02B4  2AB5               	goto	l35
  1072  02B5                     l35:	
  1073                           
  1074                           ;Serial.c: 23: PIE1bits.RCIE = 1;
  1075  02B5  1683               	bsf	3,5	;RP0=1, select bank1
  1076  02B6  1303               	bcf	3,6	;RP1=0, select bank1
  1077  02B7  168C               	bsf	12,5	;volatile
  1078                           
  1079                           ;Serial.c: 25: BufferWrite.primeiro = 0;
  1080  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  1081  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  1082  02BA  01D4               	clrf	_BufferWrite+16
  1083                           
  1084                           ;Serial.c: 26: BufferWrite.ultimo = 0;
  1085  02BB  01D5               	clrf	_BufferWrite+17
  1086                           
  1087                           ;Serial.c: 27: BufferWrite.nItens = 0;
  1088  02BC  01D6               	clrf	_BufferWrite+18
  1089                           
  1090                           ;Serial.c: 28: BufferRead.primeiro = 0;
  1091  02BD  01C1               	clrf	_BufferRead+16
  1092                           
  1093                           ;Serial.c: 29: BufferRead.ultimo = 0;
  1094  02BE  01C2               	clrf	_BufferRead+17
  1095                           
  1096                           ;Serial.c: 30: BufferRead.nItens = 0;
  1097  02BF  01C3               	clrf	_BufferRead+18
  1098                           
  1099                           ;Serial.c: 32: TXREG = 0x00;
  1100  02C0  0199               	clrf	25	;volatile
  1101  02C1  0008               	return
  1102  02C2                     __end_of_Serial_9600_Init:	
  1103                           
  1104                           	psect	text5
  1105  014C                     __ptext5:	
  1106 ;; *************** function _MedirTensao *****************
  1107 ;; Defined at:
  1108 ;;		line 191 in file "TCC_Main.c"
  1109 ;; Parameters:    Size  Location     Type
  1110 ;;		None
  1111 ;; Auto vars:     Size  Location     Type
  1112 ;;  ultimaLeitur    2    9[BANK0 ] unsigned int 
  1113 ;; Return value:  Size  Location     Type
  1114 ;;		None               void
  1115 ;; Registers used:
  1116 ;;		wreg, status,2, status,0, pclath, cstack
  1117 ;; Tracked objects:
  1118 ;;		On entry : 0/0
  1119 ;;		On exit  : 0/0
  1120 ;;		Unchanged: 0/0
  1121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1122 ;;      Params:         0       0       0       0       0
  1123 ;;      Locals:         0       2       0       0       0
  1124 ;;      Temps:          0       1       0       0       0
  1125 ;;      Totals:         0       3       0       0       0
  1126 ;;Total ram usage:        3 bytes
  1127 ;; Hardware stack levels used:    1
  1128 ;; Hardware stack levels required when called:    4
  1129 ;; This function calls:
  1130 ;;		_ADC_Read
  1131 ;;		_ADC_Available
  1132 ;;		___lwdiv
  1133 ;; This function is called by:
  1134 ;;		_main
  1135 ;; This function uses a non-reentrant model
  1136 ;;
  1137                           
  1138                           
  1139                           ;psect for function _MedirTensao
  1140  014C                     _MedirTensao:	
  1141                           
  1142                           ;TCC_Main.c: 192: static char n = 0;
  1143                           ;TCC_Main.c: 193: unsigned int ultimaLeitura;
  1144                           ;TCC_Main.c: 195: if( n < 150 )
  1145                           
  1146                           ;incstack = 0
  1147                           ; Regs used in _MedirTensao: [wreg+status,2+status,0+pclath+cstack]
  1148  014C  3096               	movlw	150
  1149  014D  1283               	bcf	3,5	;RP0=0, select bank0
  1150  014E  1303               	bcf	3,6	;RP1=0, select bank0
  1151  014F  022C               	subwf	MedirTensao@n,w
  1152  0150  1803               	skipnc
  1153  0151  297A               	goto	l1290
  1154                           
  1155                           ;TCC_Main.c: 196: {
  1156                           ;TCC_Main.c: 197: if(ADC_Available())
  1157  0152  120A  118A  2476   	fcall	_ADC_Available
      +       120A  118A         
  1158  0157  3A00               	xorlw	0
  1159  0158  1903               	skipnz
  1160  0159  0008               	return
  1161                           
  1162                           ;TCC_Main.c: 198: {
  1163                           ;TCC_Main.c: 199: ultimaLeitura = ADC_Read();
  1164  015A  120A  118A  2429   	fcall	_ADC_Read
      +       120A  118A         
  1165  015F  1283               	bcf	3,5	;RP0=0, select bank0
  1166  0160  1303               	bcf	3,6	;RP1=0, select bank0
  1167  0161  0863               	movf	?_ADC_Read+1,w
  1168  0162  01EC               	clrf	MedirTensao@ultimaLeitura+1
  1169  0163  07EC               	addwf	MedirTensao@ultimaLeitura+1,f
  1170  0164  0862               	movf	?_ADC_Read,w
  1171  0165  01EB               	clrf	MedirTensao@ultimaLeitura
  1172  0166  07EB               	addwf	MedirTensao@ultimaLeitura,f
  1173                           
  1174                           ;TCC_Main.c: 200: if(ultimaLeitura > aux)
  1175  0167  086C               	movf	MedirTensao@ultimaLeitura+1,w
  1176  0168  0229               	subwf	_aux+1,w
  1177  0169  1D03               	skipz
  1178  016A  296D               	goto	u665
  1179  016B  086B               	movf	MedirTensao@ultimaLeitura,w
  1180  016C  0228               	subwf	_aux,w
  1181  016D                     u665:	
  1182  016D  1803               	skipnc
  1183  016E  2975               	goto	l258
  1184                           
  1185                           ;TCC_Main.c: 201: aux = ultimaLeitura;
  1186  016F  086C               	movf	MedirTensao@ultimaLeitura+1,w
  1187  0170  01A9               	clrf	_aux+1
  1188  0171  07A9               	addwf	_aux+1,f
  1189  0172  086B               	movf	MedirTensao@ultimaLeitura,w
  1190  0173  01A8               	clrf	_aux
  1191  0174  07A8               	addwf	_aux,f
  1192  0175                     l258:	
  1193                           
  1194                           ;TCC_Main.c: 202: n++;
  1195  0175  3001               	movlw	1
  1196  0176  00EA               	movwf	??_MedirTensao
  1197  0177  086A               	movf	??_MedirTensao,w
  1198  0178  07AC               	addwf	MedirTensao@n,f
  1199                           
  1200                           ;TCC_Main.c: 203: }
  1201                           ;TCC_Main.c: 204: }
  1202  0179  0008               	return
  1203  017A                     l1290:	
  1204                           
  1205                           ;TCC_Main.c: 205: else
  1206                           ;TCC_Main.c: 206: {
  1207                           ;TCC_Main.c: 207: Tensao[0] = aux / 6;
  1208  017A  3006               	movlw	6
  1209  017B  00E2               	movwf	?___lwdiv
  1210  017C  3000               	movlw	0
  1211  017D  00E3               	movwf	?___lwdiv+1
  1212  017E  0829               	movf	_aux+1,w
  1213  017F  01E5               	clrf	?___lwdiv+3
  1214  0180  07E5               	addwf	?___lwdiv+3,f
  1215  0181  0828               	movf	_aux,w
  1216  0182  01E4               	clrf	?___lwdiv+2
  1217  0183  07E4               	addwf	?___lwdiv+2,f
  1218  0184  120A  118A  2215   	fcall	___lwdiv
  1219  0187  1283               	bcf	3,5	;RP0=0, select bank0
  1220  0188  1303               	bcf	3,6	;RP1=0, select bank0
  1221  0189  0862               	movf	?___lwdiv,w
  1222  018A  00EA               	movwf	??_MedirTensao
  1223  018B  086A               	movf	??_MedirTensao,w
  1224  018C  00ED               	movwf	_Tensao
  1225                           
  1226                           ;TCC_Main.c: 209: aux = 0;
  1227  018D  01A8               	clrf	_aux
  1228  018E  01A9               	clrf	_aux+1
  1229                           
  1230                           ;TCC_Main.c: 210: n = 0;
  1231  018F  01AC               	clrf	MedirTensao@n
  1232  0190  0008               	return
  1233  0191                     __end_of_MedirTensao:	
  1234                           
  1235                           	psect	text6
  1236  0215                     __ptext6:	
  1237 ;; *************** function ___lwdiv *****************
  1238 ;; Defined at:
  1239 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\lwdiv.c"
  1240 ;; Parameters:    Size  Location     Type
  1241 ;;  divisor         2    0[BANK0 ] unsigned int 
  1242 ;;  dividend        2    2[BANK0 ] unsigned int 
  1243 ;; Auto vars:     Size  Location     Type
  1244 ;;  quotient        2    5[BANK0 ] unsigned int 
  1245 ;;  counter         1    7[BANK0 ] unsigned char 
  1246 ;; Return value:  Size  Location     Type
  1247 ;;                  2    0[BANK0 ] unsigned int 
  1248 ;; Registers used:
  1249 ;;		wreg, status,2, status,0
  1250 ;; Tracked objects:
  1251 ;;		On entry : 0/0
  1252 ;;		On exit  : 0/0
  1253 ;;		Unchanged: 0/0
  1254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1255 ;;      Params:         0       4       0       0       0
  1256 ;;      Locals:         0       3       0       0       0
  1257 ;;      Temps:          0       1       0       0       0
  1258 ;;      Totals:         0       8       0       0       0
  1259 ;;Total ram usage:        8 bytes
  1260 ;; Hardware stack levels used:    1
  1261 ;; Hardware stack levels required when called:    3
  1262 ;; This function calls:
  1263 ;;		Nothing
  1264 ;; This function is called by:
  1265 ;;		_MedirTensao
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269                           
  1270                           ;psect for function ___lwdiv
  1271  0215                     ___lwdiv:	
  1272                           
  1273                           ;incstack = 0
  1274                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1275  0215  1283               	bcf	3,5	;RP0=0, select bank0
  1276  0216  1303               	bcf	3,6	;RP1=0, select bank0
  1277  0217  01E7               	clrf	___lwdiv@quotient
  1278  0218  01E8               	clrf	___lwdiv@quotient+1
  1279  0219  0863               	movf	___lwdiv@divisor+1,w
  1280  021A  0462               	iorwf	___lwdiv@divisor,w
  1281  021B  1903               	skipnz
  1282  021C  2A4E               	goto	l1346
  1283  021D  01E9               	clrf	___lwdiv@counter
  1284  021E  0AE9               	incf	___lwdiv@counter,f
  1285  021F                     l1334:	
  1286  021F  1BE3               	btfsc	___lwdiv@divisor+1,7
  1287  0220  2A2D               	goto	l1336
  1288  0221  3001               	movlw	1
  1289  0222                     u685:	
  1290  0222  1003               	clrc
  1291  0223  0DE2               	rlf	___lwdiv@divisor,f
  1292  0224  0DE3               	rlf	___lwdiv@divisor+1,f
  1293  0225  3EFF               	addlw	-1
  1294  0226  1D03               	skipz
  1295  0227  2A22               	goto	u685
  1296  0228  3001               	movlw	1
  1297  0229  00E6               	movwf	??___lwdiv
  1298  022A  0866               	movf	??___lwdiv,w
  1299  022B  07E9               	addwf	___lwdiv@counter,f
  1300  022C  2A1F               	goto	l1334
  1301  022D                     l1336:	
  1302  022D  3001               	movlw	1
  1303  022E                     u705:	
  1304  022E  1003               	clrc
  1305  022F  0DE7               	rlf	___lwdiv@quotient,f
  1306  0230  0DE8               	rlf	___lwdiv@quotient+1,f
  1307  0231  3EFF               	addlw	-1
  1308  0232  1D03               	skipz
  1309  0233  2A2E               	goto	u705
  1310  0234  0863               	movf	___lwdiv@divisor+1,w
  1311  0235  0265               	subwf	___lwdiv@dividend+1,w
  1312  0236  1D03               	skipz
  1313  0237  2A3A               	goto	u715
  1314  0238  0862               	movf	___lwdiv@divisor,w
  1315  0239  0264               	subwf	___lwdiv@dividend,w
  1316  023A                     u715:	
  1317  023A  1C03               	skipc
  1318  023B  2A43               	goto	l1342
  1319  023C  0862               	movf	___lwdiv@divisor,w
  1320  023D  02E4               	subwf	___lwdiv@dividend,f
  1321  023E  0863               	movf	___lwdiv@divisor+1,w
  1322  023F  1C03               	skipc
  1323  0240  03E5               	decf	___lwdiv@dividend+1,f
  1324  0241  02E5               	subwf	___lwdiv@dividend+1,f
  1325  0242  1467               	bsf	___lwdiv@quotient,0
  1326  0243                     l1342:	
  1327  0243  3001               	movlw	1
  1328  0244                     u725:	
  1329  0244  1003               	clrc
  1330  0245  0CE3               	rrf	___lwdiv@divisor+1,f
  1331  0246  0CE2               	rrf	___lwdiv@divisor,f
  1332  0247  3EFF               	addlw	-1
  1333  0248  1D03               	skipz
  1334  0249  2A44               	goto	u725
  1335  024A  3001               	movlw	1
  1336  024B  02E9               	subwf	___lwdiv@counter,f
  1337  024C  1D03               	btfss	3,2
  1338  024D  2A2D               	goto	l1336
  1339  024E                     l1346:	
  1340  024E  0868               	movf	___lwdiv@quotient+1,w
  1341  024F  01E3               	clrf	?___lwdiv+1
  1342  0250  07E3               	addwf	?___lwdiv+1,f
  1343  0251  0867               	movf	___lwdiv@quotient,w
  1344  0252  01E2               	clrf	?___lwdiv
  1345  0253  07E2               	addwf	?___lwdiv,f
  1346  0254  0008               	return
  1347  0255                     __end_of___lwdiv:	
  1348                           
  1349                           	psect	text7
  1350  0476                     __ptext7:	
  1351 ;; *************** function _ADC_Available *****************
  1352 ;; Defined at:
  1353 ;;		line 66 in file "ConversorAD.c"
  1354 ;; Parameters:    Size  Location     Type
  1355 ;;		None
  1356 ;; Auto vars:     Size  Location     Type
  1357 ;;		None
  1358 ;; Return value:  Size  Location     Type
  1359 ;;                  1    wreg      unsigned char 
  1360 ;; Registers used:
  1361 ;;		wreg
  1362 ;; Tracked objects:
  1363 ;;		On entry : 0/0
  1364 ;;		On exit  : 0/0
  1365 ;;		Unchanged: 0/0
  1366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1367 ;;      Params:         0       0       0       0       0
  1368 ;;      Locals:         0       0       0       0       0
  1369 ;;      Temps:          0       0       0       0       0
  1370 ;;      Totals:         0       0       0       0       0
  1371 ;;Total ram usage:        0 bytes
  1372 ;; Hardware stack levels used:    1
  1373 ;; Hardware stack levels required when called:    3
  1374 ;; This function calls:
  1375 ;;		Nothing
  1376 ;; This function is called by:
  1377 ;;		_MedirTensao
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           
  1382                           ;psect for function _ADC_Available
  1383  0476                     _ADC_Available:	
  1384                           
  1385                           ;ConversorAD.c: 67: return dadoDisponivel;
  1386                           
  1387                           ;incstack = 0
  1388                           ; Regs used in _ADC_Available: [wreg]
  1389  0476  1283               	bcf	3,5	;RP0=0, select bank0
  1390  0477  1303               	bcf	3,6	;RP1=0, select bank0
  1391  0478  0830               	movf	_dadoDisponivel,w
  1392  0479  0008               	return
  1393  047A                     __end_of_ADC_Available:	
  1394                           
  1395                           	psect	text8
  1396  0429                     __ptext8:	
  1397 ;; *************** function _ADC_Read *****************
  1398 ;; Defined at:
  1399 ;;		line 54 in file "ConversorAD.c"
  1400 ;; Parameters:    Size  Location     Type
  1401 ;;		None
  1402 ;; Auto vars:     Size  Location     Type
  1403 ;;		None
  1404 ;; Return value:  Size  Location     Type
  1405 ;;                  2    0[BANK0 ] int 
  1406 ;; Registers used:
  1407 ;;		wreg, status,2, status,0
  1408 ;; Tracked objects:
  1409 ;;		On entry : 0/0
  1410 ;;		On exit  : 0/0
  1411 ;;		Unchanged: 0/0
  1412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1413 ;;      Params:         0       2       0       0       0
  1414 ;;      Locals:         0       0       0       0       0
  1415 ;;      Temps:          0       0       0       0       0
  1416 ;;      Totals:         0       2       0       0       0
  1417 ;;Total ram usage:        2 bytes
  1418 ;; Hardware stack levels used:    1
  1419 ;; Hardware stack levels required when called:    3
  1420 ;; This function calls:
  1421 ;;		Nothing
  1422 ;; This function is called by:
  1423 ;;		_MedirTensao
  1424 ;; This function uses a non-reentrant model
  1425 ;;
  1426                           
  1427                           
  1428                           ;psect for function _ADC_Read
  1429  0429                     _ADC_Read:	
  1430                           
  1431                           ;ConversorAD.c: 55: dadoDisponivel = 0;
  1432                           
  1433                           ;incstack = 0
  1434                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  1435  0429  1283               	bcf	3,5	;RP0=0, select bank0
  1436  042A  1303               	bcf	3,6	;RP1=0, select bank0
  1437  042B  01B0               	clrf	_dadoDisponivel
  1438                           
  1439                           ;ConversorAD.c: 56: return ((ADRESH<<8) | ADRESL);
  1440  042C  081E               	movf	30,w	;volatile
  1441  042D  01E3               	clrf	?_ADC_Read+1
  1442  042E  07E3               	addwf	?_ADC_Read+1,f
  1443  042F  1683               	bsf	3,5	;RP0=1, select bank1
  1444  0430  1303               	bcf	3,6	;RP1=0, select bank1
  1445  0431  081E               	movf	30,w	;volatile
  1446  0432  1283               	bcf	3,5	;RP0=0, select bank0
  1447  0433  1303               	bcf	3,6	;RP1=0, select bank0
  1448  0434  01E2               	clrf	?_ADC_Read
  1449  0435  07E2               	addwf	?_ADC_Read,f
  1450  0436  0008               	return
  1451  0437                     __end_of_ADC_Read:	
  1452                           
  1453                           	psect	text9
  1454  0191                     __ptext9:	
  1455 ;; *************** function _ControleLed *****************
  1456 ;; Defined at:
  1457 ;;		line 155 in file "TCC_Main.c"
  1458 ;; Parameters:    Size  Location     Type
  1459 ;;		None
  1460 ;; Auto vars:     Size  Location     Type
  1461 ;;		None
  1462 ;; Return value:  Size  Location     Type
  1463 ;;		None               void
  1464 ;; Registers used:
  1465 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1466 ;; Tracked objects:
  1467 ;;		On entry : 0/0
  1468 ;;		On exit  : 0/0
  1469 ;;		Unchanged: 0/0
  1470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1471 ;;      Params:         0       0       0       0       0
  1472 ;;      Locals:         0       0       0       0       0
  1473 ;;      Temps:          0       1       0       0       0
  1474 ;;      Totals:         0       1       0       0       0
  1475 ;;Total ram usage:        1 bytes
  1476 ;; Hardware stack levels used:    1
  1477 ;; Hardware stack levels required when called:    3
  1478 ;; This function calls:
  1479 ;;		Nothing
  1480 ;; This function is called by:
  1481 ;;		_main
  1482 ;; This function uses a non-reentrant model
  1483 ;;
  1484                           
  1485                           
  1486                           ;psect for function _ControleLed
  1487  0191                     _ControleLed:	
  1488                           
  1489                           ;TCC_Main.c: 156: static char Estado = 0;
  1490                           ;TCC_Main.c: 157: if (TemporizadorLed == 0)
  1491                           
  1492                           ;incstack = 0
  1493                           ; Regs used in _ControleLed: [wreg-fsr0h+status,2+status,0]
  1494  0191  1283               	bcf	3,5	;RP0=0, select bank0
  1495  0192  1303               	bcf	3,6	;RP1=0, select bank0
  1496  0193  0823               	movf	_TemporizadorLed+1,w
  1497  0194  0422               	iorwf	_TemporizadorLed,w
  1498  0195  1D03               	skipz
  1499  0196  0008               	return
  1500  0197  29C4               	goto	l1278
  1501  0198                     l1252:	
  1502                           ;TCC_Main.c: 160: {
  1503                           ;TCC_Main.c: 161: case 0:
  1504                           
  1505                           ;TCC_Main.c: 158: {
  1506                           ;TCC_Main.c: 159: switch(Estado)
  1507                           
  1508                           
  1509                           ;TCC_Main.c: 162: TemporizadorLed = 2000;
  1510  0198  30D0               	movlw	208
  1511  0199  00A2               	movwf	_TemporizadorLed
  1512  019A  3007               	movlw	7
  1513  019B  00A3               	movwf	_TemporizadorLed+1
  1514                           
  1515                           ;TCC_Main.c: 163: PORTDbits.RD0 = 1;
  1516  019C  1408               	bsf	8,0	;volatile
  1517                           
  1518                           ;TCC_Main.c: 164: Estado = 1;
  1519  019D  01AB               	clrf	ControleLed@Estado
  1520  019E  0AAB               	incf	ControleLed@Estado,f
  1521                           
  1522                           ;TCC_Main.c: 165: break;
  1523  019F  0008               	return
  1524  01A0                     l246:	
  1525                           ;TCC_Main.c: 166: case 1:
  1526                           
  1527                           
  1528                           ;TCC_Main.c: 167: PORTDbits.RD0 = 0;
  1529  01A0  1008               	bcf	8,0	;volatile
  1530                           
  1531                           ;TCC_Main.c: 168: if(conectado) {
  1532  01A1  082F               	movf	_conectado,w
  1533  01A2  1903               	btfsc	3,2
  1534  01A3  29AD               	goto	l1262
  1535                           
  1536                           ;TCC_Main.c: 169: TemporizadorLed = 2000;
  1537  01A4  30D0               	movlw	208
  1538  01A5  00A2               	movwf	_TemporizadorLed
  1539  01A6  3007               	movlw	7
  1540  01A7  00A3               	movwf	_TemporizadorLed+1
  1541                           
  1542                           ;TCC_Main.c: 170: Estado = 2;
  1543  01A8  3002               	movlw	2
  1544  01A9  00E2               	movwf	??_ControleLed
  1545  01AA  0862               	movf	??_ControleLed,w
  1546  01AB  00AB               	movwf	ControleLed@Estado
  1547                           
  1548                           ;TCC_Main.c: 171: } else {
  1549  01AC  0008               	return
  1550  01AD                     l1262:	
  1551                           
  1552                           ;TCC_Main.c: 172: TemporizadorLed = 10000;
  1553  01AD  3010               	movlw	16
  1554  01AE  00A2               	movwf	_TemporizadorLed
  1555  01AF  3027               	movlw	39
  1556  01B0  00A3               	movwf	_TemporizadorLed+1
  1557                           
  1558                           ;TCC_Main.c: 173: Estado = 0;
  1559  01B1  01AB               	clrf	ControleLed@Estado
  1560                           
  1561                           ;TCC_Main.c: 174: }
  1562                           ;TCC_Main.c: 175: break;
  1563  01B2  0008               	return
  1564  01B3                     l1266:	
  1565                           ;TCC_Main.c: 176: case 2:
  1566                           
  1567                           
  1568                           ;TCC_Main.c: 177: TemporizadorLed = 2000;
  1569  01B3  30D0               	movlw	208
  1570  01B4  00A2               	movwf	_TemporizadorLed
  1571  01B5  3007               	movlw	7
  1572  01B6  00A3               	movwf	_TemporizadorLed+1
  1573                           
  1574                           ;TCC_Main.c: 178: PORTDbits.RD0 = 1;
  1575  01B7  1408               	bsf	8,0	;volatile
  1576                           
  1577                           ;TCC_Main.c: 179: Estado = 3;
  1578  01B8  3003               	movlw	3
  1579  01B9  00E2               	movwf	??_ControleLed
  1580  01BA  0862               	movf	??_ControleLed,w
  1581  01BB  00AB               	movwf	ControleLed@Estado
  1582                           
  1583                           ;TCC_Main.c: 180: break;
  1584  01BC  0008               	return
  1585  01BD                     l1270:	
  1586                           ;TCC_Main.c: 181: case 3:
  1587                           
  1588                           
  1589                           ;TCC_Main.c: 182: TemporizadorLed = 10000;
  1590  01BD  3010               	movlw	16
  1591  01BE  00A2               	movwf	_TemporizadorLed
  1592  01BF  3027               	movlw	39
  1593  01C0  00A3               	movwf	_TemporizadorLed+1
  1594                           
  1595                           ;TCC_Main.c: 183: PORTDbits.RD0 = 0;
  1596  01C1  1008               	bcf	8,0	;volatile
  1597                           
  1598                           ;TCC_Main.c: 184: Estado = 0;
  1599  01C2  01AB               	clrf	ControleLed@Estado
  1600                           
  1601                           ;TCC_Main.c: 186: }
  1602                           
  1603                           ;TCC_Main.c: 185: break;
  1604  01C3  0008               	return
  1605  01C4                     l1278:	
  1606  01C4  082B               	movf	ControleLed@Estado,w
  1607                           
  1608                           ; Switch size 1, requested type "space"
  1609                           ; Number of cases is 4, Range of values is 0 to 3
  1610                           ; switch strategies available:
  1611                           ; Name         Instructions Cycles
  1612                           ; simple_byte           13     7 (average)
  1613                           ; direct_byte           20     8 (fixed)
  1614                           ; jumptable            260     6 (fixed)
  1615                           ; rangetable             8     6 (fixed)
  1616                           ; spacedrange           14     9 (fixed)
  1617                           ; locatedrange           4     3 (fixed)
  1618                           ;	Chosen strategy is simple_byte
  1619  01C5  3A00               	xorlw	0	; case 0
  1620  01C6  1903               	skipnz
  1621  01C7  2998               	goto	l1252
  1622  01C8  3A01               	xorlw	1	; case 1
  1623  01C9  1903               	skipnz
  1624  01CA  29A0               	goto	l246
  1625  01CB  3A03               	xorlw	3	; case 2
  1626  01CC  1903               	skipnz
  1627  01CD  29B3               	goto	l1266
  1628  01CE  3A01               	xorlw	1	; case 3
  1629  01CF  1903               	skipnz
  1630  01D0  29BD               	goto	l1270
  1631  01D1  29D3               	goto	l251
  1632  01D2  0008               	return
  1633  01D3                     l251:	
  1634  01D3  0008               	return
  1635  01D4                     __end_of_ControleLed:	
  1636                           
  1637                           	psect	text10
  1638  009C                     __ptext10:	
  1639 ;; *************** function _TrataComandoESP *****************
  1640 ;; Defined at:
  1641 ;;		line 96 in file "TCC_Main.c"
  1642 ;; Parameters:    Size  Location     Type
  1643 ;;		None
  1644 ;; Auto vars:     Size  Location     Type
  1645 ;;  cmd             1    7[BANK0 ] unsigned char 
  1646 ;; Return value:  Size  Location     Type
  1647 ;;		None               void
  1648 ;; Registers used:
  1649 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1650 ;; Tracked objects:
  1651 ;;		On entry : 0/0
  1652 ;;		On exit  : 0/0
  1653 ;;		Unchanged: 0/0
  1654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1655 ;;      Params:         0       0       0       0       0
  1656 ;;      Locals:         0       1       0       0       0
  1657 ;;      Temps:          0       1       0       0       0
  1658 ;;      Totals:         0       2       0       0       0
  1659 ;;Total ram usage:        2 bytes
  1660 ;; Hardware stack levels used:    1
  1661 ;; Hardware stack levels required when called:    5
  1662 ;; This function calls:
  1663 ;;		_Serial_Read
  1664 ;;		_Serial_Available
  1665 ;; This function is called by:
  1666 ;;		_main
  1667 ;; This function uses a non-reentrant model
  1668 ;;
  1669                           
  1670                           
  1671                           ;psect for function _TrataComandoESP
  1672  009C                     _TrataComandoESP:	
  1673                           
  1674                           ;TCC_Main.c: 97: static char Estado = 0;
  1675                           ;TCC_Main.c: 99: if(TemporizadorSerialR == 0)
  1676                           
  1677                           ;incstack = 0
  1678                           ; Regs used in _TrataComandoESP: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1679  009C  1283               	bcf	3,5	;RP0=0, select bank0
  1680  009D  1303               	bcf	3,6	;RP1=0, select bank0
  1681  009E  0827               	movf	_TemporizadorSerialR+1,w
  1682  009F  0426               	iorwf	_TemporizadorSerialR,w
  1683  00A0  1D03               	skipz
  1684  00A1  28F7               	goto	l1242
  1685                           
  1686                           ;TCC_Main.c: 100: {
  1687                           ;TCC_Main.c: 101: TemporizadorSerialR = 5000;
  1688  00A2  3088               	movlw	136
  1689  00A3  00A6               	movwf	_TemporizadorSerialR
  1690  00A4  3013               	movlw	19
  1691  00A5  00A7               	movwf	_TemporizadorSerialR+1
  1692                           
  1693                           ;TCC_Main.c: 102: char cmd;
  1694                           ;TCC_Main.c: 104: while(Serial_Available())
  1695  00A6  28E1               	goto	l1240
  1696  00A7                     l1214:	
  1697                           ;TCC_Main.c: 107: {
  1698                           ;TCC_Main.c: 108: case 0:
  1699                           
  1700                           ;TCC_Main.c: 105: {
  1701                           ;TCC_Main.c: 106: switch(Estado)
  1702                           
  1703                           
  1704                           ;TCC_Main.c: 109: cmd = Serial_Read();
  1705  00A7  120A  118A  240A   	fcall	_Serial_Read
      +       120A  118A         
  1706  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  1707  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  1708  00AE  00E8               	movwf	??_TrataComandoESP
  1709  00AF  0868               	movf	??_TrataComandoESP,w
  1710  00B0  00E9               	movwf	TrataComandoESP@cmd
  1711                           
  1712                           ;TCC_Main.c: 110: if(cmd == 0xF0)
  1713  00B1  0869               	movf	TrataComandoESP@cmd,w
  1714  00B2  3AF0               	xorlw	240
  1715  00B3  1D03               	skipz
  1716  00B4  28B8               	goto	l1220
  1717                           
  1718                           ;TCC_Main.c: 111: Estado = 1;
  1719  00B5  01AD               	clrf	TrataComandoESP@Estado
  1720  00B6  0AAD               	incf	TrataComandoESP@Estado,f
  1721  00B7  28E1               	goto	l1240
  1722  00B8                     l1220:	
  1723                           
  1724                           ;TCC_Main.c: 112: else if(cmd == 0x0F)
  1725  00B8  0869               	movf	TrataComandoESP@cmd,w
  1726  00B9  3A0F               	xorlw	15
  1727  00BA  1D03               	skipz
  1728  00BB  28E1               	goto	l1240
  1729                           
  1730                           ;TCC_Main.c: 113: Estado = 2;
  1731  00BC  3002               	movlw	2
  1732  00BD  00E8               	movwf	??_TrataComandoESP
  1733  00BE  0868               	movf	??_TrataComandoESP,w
  1734  00BF  00AD               	movwf	TrataComandoESP@Estado
  1735                           
  1736                           ;TCC_Main.c: 114: break;
  1737  00C0  28E1               	goto	l1240
  1738  00C1                     l225:	
  1739                           ;TCC_Main.c: 115: case 1:
  1740                           
  1741                           
  1742                           ;TCC_Main.c: 116: clearPORTB = 1;
  1743  00C1  01AE               	clrf	_clearPORTB
  1744  00C2  0AAE               	incf	_clearPORTB,f
  1745                           
  1746                           ;TCC_Main.c: 117: TemporizadorPortb = 10000;
  1747  00C3  3010               	movlw	16
  1748  00C4  00A4               	movwf	_TemporizadorPortb
  1749  00C5  3027               	movlw	39
  1750  00C6  00A5               	movwf	_TemporizadorPortb+1
  1751                           
  1752                           ;TCC_Main.c: 118: PORTB = Serial_Read();
  1753  00C7  120A  118A  240A   	fcall	_Serial_Read
      +       120A  118A         
  1754  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  1755  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  1756  00CE  0086               	movwf	6	;volatile
  1757  00CF  28E0               	goto	l228
  1758  00D0                     l1230:	
  1759                           ;TCC_Main.c: 121: case 2:
  1760                           
  1761                           ;TCC_Main.c: 120: break;
  1762                           
  1763                           ;TCC_Main.c: 119: Estado = 0;
  1764                           
  1765                           
  1766                           ;TCC_Main.c: 122: if(Serial_Read() == 1)
  1767  00D0  120A  118A  240A   	fcall	_Serial_Read
      +       120A  118A         
  1768  00D5  3A01               	xorlw	1
  1769  00D6  1D03               	skipz
  1770  00D7  28DD               	goto	l1234
  1771                           
  1772                           ;TCC_Main.c: 123: conectado = 1;
  1773  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  1774  00D9  1303               	bcf	3,6	;RP1=0, select bank0
  1775  00DA  01AF               	clrf	_conectado
  1776  00DB  0AAF               	incf	_conectado,f
  1777  00DC  28E0               	goto	l228
  1778  00DD                     l1234:	
  1779                           
  1780                           ;TCC_Main.c: 124: else
  1781                           ;TCC_Main.c: 125: conectado = 0;
  1782  00DD  1283               	bcf	3,5	;RP0=0, select bank0
  1783  00DE  1303               	bcf	3,6	;RP1=0, select bank0
  1784  00DF  01AF               	clrf	_conectado
  1785  00E0                     l228:	
  1786                           
  1787                           ;TCC_Main.c: 126: Estado = 0;
  1788  00E0  01AD               	clrf	TrataComandoESP@Estado
  1789  00E1                     l1240:	
  1790                           ;TCC_Main.c: 128: }
  1791                           
  1792                           ;TCC_Main.c: 127: break;
  1793                           
  1794  00E1  120A  118A  2465   	fcall	_Serial_Available
      +       120A  118A         
  1795  00E6  3800               	iorlw	0
  1796  00E7  1903               	btfsc	3,2
  1797  00E8  28F7               	goto	l1242
  1798  00E9  1283               	bcf	3,5	;RP0=0, select bank0
  1799  00EA  1303               	bcf	3,6	;RP1=0, select bank0
  1800  00EB  082D               	movf	TrataComandoESP@Estado,w
  1801                           
  1802                           ; Switch size 1, requested type "space"
  1803                           ; Number of cases is 3, Range of values is 0 to 2
  1804                           ; switch strategies available:
  1805                           ; Name         Instructions Cycles
  1806                           ; simple_byte           10     6 (average)
  1807                           ; direct_byte           17     8 (fixed)
  1808                           ; jumptable            260     6 (fixed)
  1809                           ; rangetable             7     6 (fixed)
  1810                           ; spacedrange           12     9 (fixed)
  1811                           ; locatedrange           3     3 (fixed)
  1812                           ;	Chosen strategy is simple_byte
  1813  00EC  3A00               	xorlw	0	; case 0
  1814  00ED  1903               	skipnz
  1815  00EE  28A7               	goto	l1214
  1816  00EF  3A01               	xorlw	1	; case 1
  1817  00F0  1903               	skipnz
  1818  00F1  28C1               	goto	l225
  1819  00F2  3A03               	xorlw	3	; case 2
  1820  00F3  1903               	skipnz
  1821  00F4  28D0               	goto	l1230
  1822  00F5  28E1               	goto	l1240
  1823  00F6  28E1               	goto	l1240
  1824  00F7                     l1242:	
  1825                           
  1826                           ;TCC_Main.c: 129: }
  1827                           ;TCC_Main.c: 130: }
  1828                           ;TCC_Main.c: 132: if(clearPORTB == 1 && TemporizadorPortb == 0)
  1829  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  1830  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  1831  00F9  082E               	movf	_clearPORTB,w
  1832  00FA  3A01               	xorlw	1
  1833  00FB  1D03               	skipz
  1834  00FC  0008               	return
  1835  00FD  0825               	movf	_TemporizadorPortb+1,w
  1836  00FE  0424               	iorwf	_TemporizadorPortb,w
  1837  00FF  1D03               	skipz
  1838  0100  0008               	return
  1839                           
  1840                           ;TCC_Main.c: 133: {
  1841                           ;TCC_Main.c: 134: clearPORTB = 0;
  1842  0101  01AE               	clrf	_clearPORTB
  1843                           
  1844                           ;TCC_Main.c: 135: PORTB = 0;
  1845  0102  0186               	clrf	6	;volatile
  1846  0103  0008               	return
  1847  0104                     __end_of_TrataComandoESP:	
  1848                           
  1849                           	psect	text11
  1850  0465                     __ptext11:	
  1851 ;; *************** function _Serial_Available *****************
  1852 ;; Defined at:
  1853 ;;		line 77 in file "Serial.c"
  1854 ;; Parameters:    Size  Location     Type
  1855 ;;		None
  1856 ;; Auto vars:     Size  Location     Type
  1857 ;;		None
  1858 ;; Return value:  Size  Location     Type
  1859 ;;                  1    wreg      unsigned char 
  1860 ;; Registers used:
  1861 ;;		wreg, fsr0l, fsr0h, pclath, cstack
  1862 ;; Tracked objects:
  1863 ;;		On entry : 0/0
  1864 ;;		On exit  : 0/0
  1865 ;;		Unchanged: 0/0
  1866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1867 ;;      Params:         0       0       0       0       0
  1868 ;;      Locals:         0       0       0       0       0
  1869 ;;      Temps:          0       0       0       0       0
  1870 ;;      Totals:         0       0       0       0       0
  1871 ;;Total ram usage:        0 bytes
  1872 ;; Hardware stack levels used:    1
  1873 ;; Hardware stack levels required when called:    4
  1874 ;; This function calls:
  1875 ;;		_estaVazia
  1876 ;; This function is called by:
  1877 ;;		_TrataComandoESP
  1878 ;; This function uses a non-reentrant model
  1879 ;;
  1880                           
  1881                           
  1882                           ;psect for function _Serial_Available
  1883  0465                     _Serial_Available:	
  1884                           
  1885                           ;Serial.c: 78: return (!estaVazia(&BufferRead));
  1886                           
  1887                           ;incstack = 0
  1888                           ; Regs used in _Serial_Available: [wreg-fsr0h+pclath+cstack]
  1889  0465  3031               	movlw	_BufferRead& (0+255)
  1890  0466  120A  118A  2444   	fcall	_estaVazia
  1891  0469  3A00               	xorlw	0
  1892  046A  3000               	movlw	0
  1893  046B  1903               	skipnz
  1894  046C  3001               	movlw	1
  1895  046D  0008               	return
  1896  046E                     __end_of_Serial_Available:	
  1897                           
  1898                           	psect	text12
  1899  040A                     __ptext12:	
  1900 ;; *************** function _Serial_Read *****************
  1901 ;; Defined at:
  1902 ;;		line 69 in file "Serial.c"
  1903 ;; Parameters:    Size  Location     Type
  1904 ;;		None
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;		None
  1907 ;; Return value:  Size  Location     Type
  1908 ;;                  1    wreg      unsigned char 
  1909 ;; Registers used:
  1910 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1911 ;; Tracked objects:
  1912 ;;		On entry : 0/0
  1913 ;;		On exit  : 0/0
  1914 ;;		Unchanged: 0/0
  1915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1916 ;;      Params:         0       0       0       0       0
  1917 ;;      Locals:         0       0       0       0       0
  1918 ;;      Temps:          0       0       0       0       0
  1919 ;;      Totals:         0       0       0       0       0
  1920 ;;Total ram usage:        0 bytes
  1921 ;; Hardware stack levels used:    1
  1922 ;; Hardware stack levels required when called:    4
  1923 ;; This function calls:
  1924 ;;		_estaVazia
  1925 ;;		_remover
  1926 ;; This function is called by:
  1927 ;;		_TrataComandoESP
  1928 ;; This function uses a non-reentrant model
  1929 ;;
  1930                           
  1931                           
  1932                           ;psect for function _Serial_Read
  1933  040A                     _Serial_Read:	
  1934                           
  1935                           ;Serial.c: 70: if(!estaVazia(&BufferRead))
  1936                           
  1937                           ;incstack = 0
  1938                           ; Regs used in _Serial_Read: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1939  040A  3031               	movlw	_BufferRead& (0+255)
  1940  040B  120A  118A  2444   	fcall	_estaVazia
      +       120A  118A         
  1941  0410  3800               	iorlw	0
  1942  0411  1D03               	skipz
  1943  0412  2C18               	goto	l1154
  1944                           
  1945                           ;Serial.c: 71: return remover(&BufferRead);
  1946  0413  3031               	movlw	_BufferRead& (0+255)
  1947  0414  120A  118A  22C2   	fcall	_remover
  1948  0417  0008               	return
  1949  0418                     l1154:	
  1950                           
  1951                           ;Serial.c: 72: else
  1952                           ;Serial.c: 73: return 0;
  1953  0418  3000               	movlw	0
  1954  0419  0008               	return
  1955  041A                     __end_of_Serial_Read:	
  1956                           
  1957                           	psect	text13
  1958  02C2                     __ptext13:	
  1959 ;; *************** function _remover *****************
  1960 ;; Defined at:
  1961 ;;		line 101 in file "Serial.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;  buf             1    wreg     PTR struct fila
  1964 ;;		 -> BufferRead(19), BufferWrite(19), 
  1965 ;; Auto vars:     Size  Location     Type
  1966 ;;  buf             1    5[BANK0 ] PTR struct fila
  1967 ;;		 -> BufferRead(19), BufferWrite(19), 
  1968 ;;  temp            2    3[BANK0 ] int 
  1969 ;; Return value:  Size  Location     Type
  1970 ;;                  1    wreg      unsigned char 
  1971 ;; Registers used:
  1972 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1973 ;; Tracked objects:
  1974 ;;		On entry : 0/0
  1975 ;;		On exit  : 0/0
  1976 ;;		Unchanged: 0/0
  1977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1978 ;;      Params:         0       0       0       0       0
  1979 ;;      Locals:         0       3       0       0       0
  1980 ;;      Temps:          0       3       0       0       0
  1981 ;;      Totals:         0       6       0       0       0
  1982 ;;Total ram usage:        6 bytes
  1983 ;; Hardware stack levels used:    1
  1984 ;; Hardware stack levels required when called:    3
  1985 ;; This function calls:
  1986 ;;		Nothing
  1987 ;; This function is called by:
  1988 ;;		_Serial_Read
  1989 ;; This function uses a non-reentrant model
  1990 ;;
  1991                           
  1992                           
  1993                           ;psect for function _remover
  1994  02C2                     _remover:	
  1995                           
  1996                           ;incstack = 0
  1997                           ; Regs used in _remover: [wreg-fsr0h+status,2+status,0]
  1998                           ;remover@buf stored from wreg
  1999  02C2  1283               	bcf	3,5	;RP0=0, select bank0
  2000  02C3  1303               	bcf	3,6	;RP1=0, select bank0
  2001  02C4  00E7               	movwf	remover@buf
  2002                           
  2003                           ;Serial.c: 102: int temp = buf->dados[buf->primeiro++];
  2004  02C5  0867               	movf	remover@buf,w
  2005  02C6  3E10               	addlw	16
  2006  02C7  0084               	movwf	4
  2007  02C8  1383               	bcf	3,7	;select IRP bank0
  2008  02C9  0800               	movf	0,w
  2009  02CA  0767               	addwf	remover@buf,w
  2010  02CB  00E2               	movwf	??_remover
  2011  02CC  0862               	movf	??_remover,w
  2012  02CD  0084               	movwf	4
  2013  02CE  0800               	movf	0,w
  2014  02CF  00E3               	movwf	??_remover+1
  2015  02D0  01E4               	clrf	??_remover+2
  2016  02D1  0863               	movf	??_remover+1,w
  2017  02D2  00E5               	movwf	remover@temp
  2018  02D3  0864               	movf	??_remover+2,w
  2019  02D4  00E6               	movwf	remover@temp+1
  2020  02D5  3001               	movlw	1
  2021  02D6  00E2               	movwf	??_remover
  2022  02D7  0867               	movf	remover@buf,w
  2023  02D8  3E10               	addlw	16
  2024  02D9  0084               	movwf	4
  2025  02DA  0862               	movf	??_remover,w
  2026  02DB  0780               	addwf	0,f
  2027                           
  2028                           ;Serial.c: 104: if(buf->primeiro == 16)
  2029  02DC  0867               	movf	remover@buf,w
  2030  02DD  3E10               	addlw	16
  2031  02DE  0084               	movwf	4
  2032  02DF  0800               	movf	0,w
  2033  02E0  3A10               	xorlw	16
  2034  02E1  1D03               	skipz
  2035  02E2  2AE7               	goto	l1126
  2036                           
  2037                           ;Serial.c: 105: buf->primeiro = 0;
  2038  02E3  0867               	movf	remover@buf,w
  2039  02E4  3E10               	addlw	16
  2040  02E5  0084               	movwf	4
  2041  02E6  0180               	clrf	0
  2042  02E7                     l1126:	
  2043                           
  2044                           ;Serial.c: 107: buf->nItens--;
  2045  02E7  0867               	movf	remover@buf,w
  2046  02E8  3E12               	addlw	18
  2047  02E9  0084               	movwf	4
  2048  02EA  3001               	movlw	1
  2049  02EB  0280               	subwf	0,f
  2050                           
  2051                           ;Serial.c: 108: return temp;
  2052  02EC  0865               	movf	remover@temp,w
  2053  02ED  0008               	return
  2054  02EE                     __end_of_remover:	
  2055                           
  2056                           	psect	text14
  2057  0444                     __ptext14:	
  2058 ;; *************** function _estaVazia *****************
  2059 ;; Defined at:
  2060 ;;		line 112 in file "Serial.c"
  2061 ;; Parameters:    Size  Location     Type
  2062 ;;  buf             1    wreg     PTR struct fila
  2063 ;;		 -> BufferRead(19), BufferWrite(19), 
  2064 ;; Auto vars:     Size  Location     Type
  2065 ;;  buf             1    0[BANK0 ] PTR struct fila
  2066 ;;		 -> BufferRead(19), BufferWrite(19), 
  2067 ;; Return value:  Size  Location     Type
  2068 ;;                  1    wreg      unsigned char 
  2069 ;; Registers used:
  2070 ;;		wreg, fsr0l, fsr0h
  2071 ;; Tracked objects:
  2072 ;;		On entry : 0/0
  2073 ;;		On exit  : 0/0
  2074 ;;		Unchanged: 0/0
  2075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2076 ;;      Params:         0       0       0       0       0
  2077 ;;      Locals:         0       1       0       0       0
  2078 ;;      Temps:          0       0       0       0       0
  2079 ;;      Totals:         0       1       0       0       0
  2080 ;;Total ram usage:        1 bytes
  2081 ;; Hardware stack levels used:    1
  2082 ;; Hardware stack levels required when called:    3
  2083 ;; This function calls:
  2084 ;;		Nothing
  2085 ;; This function is called by:
  2086 ;;		_Serial_Read
  2087 ;;		_Serial_Available
  2088 ;; This function uses a non-reentrant model
  2089 ;;
  2090                           
  2091                           
  2092                           ;psect for function _estaVazia
  2093  0444                     _estaVazia:	
  2094                           
  2095                           ;incstack = 0
  2096                           ; Regs used in _estaVazia: [wregfsr0]
  2097                           ;estaVazia@buf stored from wreg
  2098  0444  1283               	bcf	3,5	;RP0=0, select bank0
  2099  0445  1303               	bcf	3,6	;RP1=0, select bank0
  2100  0446  00E2               	movwf	estaVazia@buf
  2101                           
  2102                           ;Serial.c: 113: return (buf->nItens==0);
  2103  0447  0862               	movf	estaVazia@buf,w
  2104  0448  3E12               	addlw	18
  2105  0449  0084               	movwf	4
  2106  044A  1383               	bcf	3,7	;select IRP bank0
  2107  044B  0880               	movf	0,f
  2108  044C  3000               	movlw	0
  2109  044D  1903               	skipnz
  2110  044E  3001               	movlw	1
  2111  044F  0008               	return
  2112  0450                     __end_of_estaVazia:	
  2113                           
  2114                           	psect	text15
  2115  0015                     __ptext15:	
  2116 ;; *************** function _EnvioDadosSerial *****************
  2117 ;; Defined at:
  2118 ;;		line 72 in file "TCC_Main.c"
  2119 ;; Parameters:    Size  Location     Type
  2120 ;;		None
  2121 ;; Auto vars:     Size  Location     Type
  2122 ;;		None
  2123 ;; Return value:  Size  Location     Type
  2124 ;;		None               void
  2125 ;; Registers used:
  2126 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2127 ;; Tracked objects:
  2128 ;;		On entry : 0/0
  2129 ;;		On exit  : 0/0
  2130 ;;		Unchanged: 0/0
  2131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2132 ;;      Params:         0       0       0       0       0
  2133 ;;      Locals:         0       0       0       0       0
  2134 ;;      Temps:          0       0       0       0       0
  2135 ;;      Totals:         0       0       0       0       0
  2136 ;;Total ram usage:        0 bytes
  2137 ;; Hardware stack levels used:    1
  2138 ;; Hardware stack levels required when called:    5
  2139 ;; This function calls:
  2140 ;;		_Serial_Write
  2141 ;; This function is called by:
  2142 ;;		_main
  2143 ;; This function uses a non-reentrant model
  2144 ;;
  2145                           
  2146                           
  2147                           ;psect for function _EnvioDadosSerial
  2148  0015                     _EnvioDadosSerial:	
  2149                           
  2150                           ;TCC_Main.c: 73: if(TemporizadorSerialW == 0)
  2151                           
  2152                           ;incstack = 0
  2153                           ; Regs used in _EnvioDadosSerial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2154  0015  1283               	bcf	3,5	;RP0=0, select bank0
  2155  0016  1303               	bcf	3,6	;RP1=0, select bank0
  2156  0017  0858               	movf	_TemporizadorSerialW+1,w
  2157  0018  0457               	iorwf	_TemporizadorSerialW,w
  2158  0019  1D03               	skipz
  2159  001A  0008               	return
  2160                           
  2161                           ;TCC_Main.c: 74: {
  2162                           ;TCC_Main.c: 75: Serial_Write(0xFF);
  2163  001B  30FF               	movlw	255
  2164  001C  120A  118A  23DE   	fcall	_Serial_Write
      +       120A  118A         
  2165                           
  2166                           ;TCC_Main.c: 76: Serial_Write(0xFF);
  2167  0021  30FF               	movlw	255
  2168  0022  120A  118A  23DE   	fcall	_Serial_Write
      +       120A  118A         
  2169                           
  2170                           ;TCC_Main.c: 77: Serial_Write(Tensao[0]);
  2171  0027  1283               	bcf	3,5	;RP0=0, select bank0
  2172  0028  1303               	bcf	3,6	;RP1=0, select bank0
  2173  0029  086D               	movf	_Tensao,w
  2174  002A  120A  118A  23DE   	fcall	_Serial_Write
      +       120A  118A         
  2175                           
  2176                           ;TCC_Main.c: 78: Serial_Write(Tensao[1]);
  2177  002F  1283               	bcf	3,5	;RP0=0, select bank0
  2178  0030  1303               	bcf	3,6	;RP1=0, select bank0
  2179  0031  086E               	movf	_Tensao+1,w
  2180  0032  120A  118A  23DE   	fcall	_Serial_Write
      +       120A  118A         
  2181                           
  2182                           ;TCC_Main.c: 79: Serial_Write(Tensao[2]);
  2183  0037  1283               	bcf	3,5	;RP0=0, select bank0
  2184  0038  1303               	bcf	3,6	;RP1=0, select bank0
  2185  0039  086F               	movf	_Tensao+2,w
  2186  003A  120A  118A  23DE   	fcall	_Serial_Write
      +       120A  118A         
  2187                           
  2188                           ;TCC_Main.c: 80: Serial_Write(ModuloCM.status);
  2189  003F  1283               	bcf	3,5	;RP0=0, select bank0
  2190  0040  1303               	bcf	3,6	;RP1=0, select bank0
  2191  0041  0859               	movf	_ModuloCM,w
  2192  0042  120A  118A  23DE   	fcall	_Serial_Write
      +       120A  118A         
  2193                           
  2194                           ;TCC_Main.c: 81: Serial_Write(ModuloCM.corrente[0]>>8);
  2195  0047  1283               	bcf	3,5	;RP0=0, select bank0
  2196  0048  1303               	bcf	3,6	;RP1=0, select bank0
  2197  0049  085B               	movf	_ModuloCM+2,w
  2198  004A  120A  118A  23DE   	fcall	_Serial_Write
      +       120A  118A         
  2199                           
  2200                           ;TCC_Main.c: 82: Serial_Write(ModuloCM.corrente[0]&0x00FF);
  2201  004F  1283               	bcf	3,5	;RP0=0, select bank0
  2202  0050  1303               	bcf	3,6	;RP1=0, select bank0
  2203  0051  085A               	movf	_ModuloCM+1,w
  2204  0052  120A  118A  23DE   	fcall	_Serial_Write
      +       120A  118A         
  2205                           
  2206                           ;TCC_Main.c: 83: Serial_Write(ModuloCM.corrente[1]>>8);
  2207  0057  1283               	bcf	3,5	;RP0=0, select bank0
  2208  0058  1303               	bcf	3,6	;RP1=0, select bank0
  2209  0059  085D               	movf	_ModuloCM+4,w
  2210  005A  120A  118A  23DE   	fcall	_Serial_Write
      +       120A  118A         
  2211                           
  2212                           ;TCC_Main.c: 84: Serial_Write(ModuloCM.corrente[1]&0x00FF);
  2213  005F  1283               	bcf	3,5	;RP0=0, select bank0
  2214  0060  1303               	bcf	3,6	;RP1=0, select bank0
  2215  0061  085C               	movf	_ModuloCM+3,w
  2216  0062  120A  118A  23DE   	fcall	_Serial_Write
      +       120A  118A         
  2217                           
  2218                           ;TCC_Main.c: 85: Serial_Write(ModuloCM.corrente[2]>>8);
  2219  0067  1283               	bcf	3,5	;RP0=0, select bank0
  2220  0068  1303               	bcf	3,6	;RP1=0, select bank0
  2221  0069  085F               	movf	_ModuloCM+6,w
  2222  006A  120A  118A  23DE   	fcall	_Serial_Write
      +       120A  118A         
  2223                           
  2224                           ;TCC_Main.c: 86: Serial_Write(ModuloCM.corrente[2]&0x00FF);
  2225  006F  1283               	bcf	3,5	;RP0=0, select bank0
  2226  0070  1303               	bcf	3,6	;RP1=0, select bank0
  2227  0071  085E               	movf	_ModuloCM+5,w
  2228  0072  120A  118A  23DE   	fcall	_Serial_Write
      +       120A  118A         
  2229                           
  2230                           ;TCC_Main.c: 87: Serial_Write(ModuloCM.corrente[3]>>8);
  2231  0077  1283               	bcf	3,5	;RP0=0, select bank0
  2232  0078  1303               	bcf	3,6	;RP1=0, select bank0
  2233  0079  0861               	movf	_ModuloCM+8,w
  2234  007A  120A  118A  23DE   	fcall	_Serial_Write
      +       120A  118A         
  2235                           
  2236                           ;TCC_Main.c: 88: Serial_Write(ModuloCM.corrente[3]&0x00FF);
  2237  007F  1283               	bcf	3,5	;RP0=0, select bank0
  2238  0080  1303               	bcf	3,6	;RP1=0, select bank0
  2239  0081  0860               	movf	_ModuloCM+7,w
  2240  0082  120A  118A  23DE   	fcall	_Serial_Write
      +       120A  118A         
  2241                           
  2242                           ;TCC_Main.c: 89: Serial_Write(RTC.hora);
  2243  0087  1283               	bcf	3,5	;RP0=0, select bank0
  2244  0088  1303               	bcf	3,6	;RP1=0, select bank0
  2245  0089  0820               	movf	_RTC,w
  2246  008A  120A  118A  23DE   	fcall	_Serial_Write
      +       120A  118A         
  2247                           
  2248                           ;TCC_Main.c: 90: Serial_Write(RTC.minuto);
  2249  008F  1283               	bcf	3,5	;RP0=0, select bank0
  2250  0090  1303               	bcf	3,6	;RP1=0, select bank0
  2251  0091  0821               	movf	_RTC+1,w
  2252  0092  120A  118A  23DE   	fcall	_Serial_Write
  2253                           
  2254                           ;TCC_Main.c: 91: TemporizadorSerialW = 30000;
  2255  0095  3030               	movlw	48
  2256  0096  1283               	bcf	3,5	;RP0=0, select bank0
  2257  0097  1303               	bcf	3,6	;RP1=0, select bank0
  2258  0098  00D7               	movwf	_TemporizadorSerialW
  2259  0099  3075               	movlw	117
  2260  009A  00D8               	movwf	_TemporizadorSerialW+1
  2261  009B  0008               	return
  2262  009C                     __end_of_EnvioDadosSerial:	
  2263                           
  2264                           	psect	text16
  2265  03DE                     __ptext16:	
  2266 ;; *************** function _Serial_Write *****************
  2267 ;; Defined at:
  2268 ;;		line 63 in file "Serial.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;  Valor           1    wreg     unsigned char 
  2271 ;; Auto vars:     Size  Location     Type
  2272 ;;  Valor           1    5[BANK0 ] unsigned char 
  2273 ;; Return value:  Size  Location     Type
  2274 ;;		None               void
  2275 ;; Registers used:
  2276 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2277 ;; Tracked objects:
  2278 ;;		On entry : 0/0
  2279 ;;		On exit  : 0/0
  2280 ;;		Unchanged: 0/0
  2281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2282 ;;      Params:         0       0       0       0       0
  2283 ;;      Locals:         0       1       0       0       0
  2284 ;;      Temps:          0       1       0       0       0
  2285 ;;      Totals:         0       2       0       0       0
  2286 ;;Total ram usage:        2 bytes
  2287 ;; Hardware stack levels used:    1
  2288 ;; Hardware stack levels required when called:    4
  2289 ;; This function calls:
  2290 ;;		_estaCheia
  2291 ;;		_inserir
  2292 ;; This function is called by:
  2293 ;;		_EnvioDadosSerial
  2294 ;; This function uses a non-reentrant model
  2295 ;;
  2296                           
  2297                           
  2298                           ;psect for function _Serial_Write
  2299  03DE                     _Serial_Write:	
  2300                           
  2301                           ;incstack = 0
  2302                           ; Regs used in _Serial_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2303                           ;Serial_Write@Valor stored from wreg
  2304  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  2305  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  2306  03E0  00E7               	movwf	Serial_Write@Valor
  2307                           
  2308                           ;Serial.c: 64: if(!estaCheia(&BufferWrite))
  2309  03E1  3044               	movlw	_BufferWrite& (0+255)
  2310  03E2  120A  118A  2437   	fcall	_estaCheia
      +       120A  118A         
  2311  03E7  3800               	iorlw	0
  2312  03E8  1D03               	skipz
  2313  03E9  0008               	return
  2314                           
  2315                           ;Serial.c: 65: inserir(&BufferWrite, Valor);
  2316  03EA  1283               	bcf	3,5	;RP0=0, select bank0
  2317  03EB  1303               	bcf	3,6	;RP1=0, select bank0
  2318  03EC  0867               	movf	Serial_Write@Valor,w
  2319  03ED  00E6               	movwf	??_Serial_Write
  2320  03EE  0866               	movf	??_Serial_Write,w
  2321  03EF  00E2               	movwf	?_inserir
  2322  03F0  3044               	movlw	_BufferWrite& (0+255)
  2323  03F1  120A  118A  22EE   	fcall	_inserir
  2324  03F4  0008               	return
  2325  03F5                     __end_of_Serial_Write:	
  2326                           
  2327                           	psect	text17
  2328  02EE                     __ptext17:	
  2329 ;; *************** function _inserir *****************
  2330 ;; Defined at:
  2331 ;;		line 91 in file "Serial.c"
  2332 ;; Parameters:    Size  Location     Type
  2333 ;;  buf             1    wreg     PTR struct fila
  2334 ;;		 -> BufferRead(19), BufferWrite(19), 
  2335 ;;  Valor           1    0[BANK0 ] unsigned char 
  2336 ;; Auto vars:     Size  Location     Type
  2337 ;;  buf             1    3[BANK0 ] PTR struct fila
  2338 ;;		 -> BufferRead(19), BufferWrite(19), 
  2339 ;; Return value:  Size  Location     Type
  2340 ;;		None               void
  2341 ;; Registers used:
  2342 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2343 ;; Tracked objects:
  2344 ;;		On entry : 0/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2348 ;;      Params:         0       1       0       0       0
  2349 ;;      Locals:         0       1       0       0       0
  2350 ;;      Temps:          0       2       0       0       0
  2351 ;;      Totals:         0       4       0       0       0
  2352 ;;Total ram usage:        4 bytes
  2353 ;; Hardware stack levels used:    1
  2354 ;; Hardware stack levels required when called:    3
  2355 ;; This function calls:
  2356 ;;		Nothing
  2357 ;; This function is called by:
  2358 ;;		_Serial_Write
  2359 ;; This function uses a non-reentrant model
  2360 ;;
  2361                           
  2362                           
  2363                           ;psect for function _inserir
  2364  02EE                     _inserir:	
  2365                           
  2366                           ;incstack = 0
  2367                           ; Regs used in _inserir: [wreg-fsr0h+status,2+status,0]
  2368                           ;inserir@buf stored from wreg
  2369  02EE  1283               	bcf	3,5	;RP0=0, select bank0
  2370  02EF  1303               	bcf	3,6	;RP1=0, select bank0
  2371  02F0  00E5               	movwf	inserir@buf
  2372                           
  2373                           ;Serial.c: 92: buf->dados[buf->ultimo] = Valor;
  2374  02F1  0862               	movf	inserir@Valor,w
  2375  02F2  00E3               	movwf	??_inserir
  2376  02F3  0865               	movf	inserir@buf,w
  2377  02F4  3E11               	addlw	17
  2378  02F5  0084               	movwf	4
  2379  02F6  1383               	bcf	3,7	;select IRP bank0
  2380  02F7  0800               	movf	0,w
  2381  02F8  0765               	addwf	inserir@buf,w
  2382  02F9  00E4               	movwf	??_inserir+1
  2383  02FA  0864               	movf	??_inserir+1,w
  2384  02FB  0084               	movwf	4
  2385  02FC  0863               	movf	??_inserir,w
  2386  02FD  0080               	movwf	0
  2387                           
  2388                           ;Serial.c: 93: buf->ultimo++;
  2389  02FE  3001               	movlw	1
  2390  02FF  00E3               	movwf	??_inserir
  2391  0300  0865               	movf	inserir@buf,w
  2392  0301  3E11               	addlw	17
  2393  0302  0084               	movwf	4
  2394  0303  0863               	movf	??_inserir,w
  2395  0304  0780               	addwf	0,f
  2396                           
  2397                           ;Serial.c: 94: buf->nItens++;
  2398  0305  3001               	movlw	1
  2399  0306  00E3               	movwf	??_inserir
  2400  0307  0865               	movf	inserir@buf,w
  2401  0308  3E12               	addlw	18
  2402  0309  0084               	movwf	4
  2403  030A  0863               	movf	??_inserir,w
  2404  030B  0780               	addwf	0,f
  2405                           
  2406                           ;Serial.c: 96: if(buf->ultimo == 16)
  2407  030C  0865               	movf	inserir@buf,w
  2408  030D  3E11               	addlw	17
  2409  030E  0084               	movwf	4
  2410  030F  0800               	movf	0,w
  2411  0310  3A10               	xorlw	16
  2412  0311  1D03               	skipz
  2413  0312  0008               	return
  2414                           
  2415                           ;Serial.c: 97: buf->ultimo = 0;
  2416  0313  0865               	movf	inserir@buf,w
  2417  0314  3E11               	addlw	17
  2418  0315  0084               	movwf	4
  2419  0316  0180               	clrf	0
  2420  0317  0008               	return
  2421  0318                     __end_of_inserir:	
  2422                           
  2423                           	psect	text18
  2424  0437                     __ptext18:	
  2425 ;; *************** function _estaCheia *****************
  2426 ;; Defined at:
  2427 ;;		line 117 in file "Serial.c"
  2428 ;; Parameters:    Size  Location     Type
  2429 ;;  buf             1    wreg     PTR struct fila
  2430 ;;		 -> BufferRead(19), BufferWrite(19), 
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;  buf             1    0[BANK0 ] PTR struct fila
  2433 ;;		 -> BufferRead(19), BufferWrite(19), 
  2434 ;; Return value:  Size  Location     Type
  2435 ;;                  1    wreg      unsigned char 
  2436 ;; Registers used:
  2437 ;;		wreg, fsr0l, fsr0h
  2438 ;; Tracked objects:
  2439 ;;		On entry : 0/0
  2440 ;;		On exit  : 0/0
  2441 ;;		Unchanged: 0/0
  2442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2443 ;;      Params:         0       0       0       0       0
  2444 ;;      Locals:         0       1       0       0       0
  2445 ;;      Temps:          0       0       0       0       0
  2446 ;;      Totals:         0       1       0       0       0
  2447 ;;Total ram usage:        1 bytes
  2448 ;; Hardware stack levels used:    1
  2449 ;; Hardware stack levels required when called:    3
  2450 ;; This function calls:
  2451 ;;		Nothing
  2452 ;; This function is called by:
  2453 ;;		_Serial_Write
  2454 ;; This function uses a non-reentrant model
  2455 ;;
  2456                           
  2457                           
  2458                           ;psect for function _estaCheia
  2459  0437                     _estaCheia:	
  2460                           
  2461                           ;incstack = 0
  2462                           ; Regs used in _estaCheia: [wregfsr0]
  2463                           ;estaCheia@buf stored from wreg
  2464  0437  1283               	bcf	3,5	;RP0=0, select bank0
  2465  0438  1303               	bcf	3,6	;RP1=0, select bank0
  2466  0439  00E2               	movwf	estaCheia@buf
  2467                           
  2468                           ;Serial.c: 118: return (buf->nItens==16);
  2469  043A  0862               	movf	estaCheia@buf,w
  2470  043B  3E12               	addlw	18
  2471  043C  0084               	movwf	4
  2472  043D  1383               	bcf	3,7	;select IRP bank0
  2473  043E  0800               	movf	0,w
  2474  043F  3A10               	xorlw	16
  2475  0440  3000               	movlw	0
  2476  0441  1903               	skipnz
  2477  0442  3001               	movlw	1
  2478  0443  0008               	return
  2479  0444                     __end_of_estaCheia:	
  2480                           
  2481                           	psect	text19
  2482  03C5                     __ptext19:	
  2483 ;; *************** function _ADC_Run *****************
  2484 ;; Defined at:
  2485 ;;		line 34 in file "ConversorAD.c"
  2486 ;; Parameters:    Size  Location     Type
  2487 ;;		None
  2488 ;; Auto vars:     Size  Location     Type
  2489 ;;		None
  2490 ;; Return value:  Size  Location     Type
  2491 ;;		None               void
  2492 ;; Registers used:
  2493 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2494 ;; Tracked objects:
  2495 ;;		On entry : 0/0
  2496 ;;		On exit  : 0/0
  2497 ;;		Unchanged: 0/0
  2498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2499 ;;      Params:         0       0       0       0       0
  2500 ;;      Locals:         0       0       0       0       0
  2501 ;;      Temps:          0       0       0       0       0
  2502 ;;      Totals:         0       0       0       0       0
  2503 ;;Total ram usage:        0 bytes
  2504 ;; Hardware stack levels used:    1
  2505 ;; Hardware stack levels required when called:    3
  2506 ;; This function calls:
  2507 ;;		Nothing
  2508 ;; This function is called by:
  2509 ;;		_main
  2510 ;; This function uses a non-reentrant model
  2511 ;;
  2512                           
  2513                           
  2514                           ;psect for function _ADC_Run
  2515  03C5                     _ADC_Run:	
  2516                           
  2517                           ;ConversorAD.c: 35: static char Estado = 0;
  2518                           ;ConversorAD.c: 37: switch(Estado)
  2519                           
  2520                           ;incstack = 0
  2521                           ; Regs used in _ADC_Run: [wreg-fsr0h+status,2+status,0]
  2522  03C5  2BD3               	goto	l1190
  2523  03C6                     l1182:	
  2524                           ;ConversorAD.c: 38: {
  2525                           ;ConversorAD.c: 39: case 0:
  2526                           
  2527                           
  2528                           ;ConversorAD.c: 40: if(ADC_Temporizador == 0)
  2529  03C6  08FD               	movf	_ADC_Temporizador,f
  2530  03C7  1D03               	skipz
  2531  03C8  0008               	return
  2532                           
  2533                           ;ConversorAD.c: 41: {
  2534                           ;ConversorAD.c: 42: ADC_Temporizador = 1;
  2535  03C9  01FD               	clrf	_ADC_Temporizador
  2536  03CA  0AFD               	incf	_ADC_Temporizador,f
  2537                           
  2538                           ;ConversorAD.c: 43: Estado = 1;
  2539  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  2540  03CC  1303               	bcf	3,6	;RP1=0, select bank0
  2541  03CD  01AA               	clrf	ADC_Run@Estado
  2542  03CE  0AAA               	incf	ADC_Run@Estado,f
  2543                           
  2544                           ;ConversorAD.c: 44: }
  2545                           ;ConversorAD.c: 45: break;
  2546  03CF  0008               	return
  2547  03D0                     l115:	
  2548                           ;ConversorAD.c: 46: case 1:
  2549                           
  2550                           
  2551                           ;ConversorAD.c: 47: ADCON0bits.GO = 1;
  2552  03D0  151F               	bsf	31,2	;volatile
  2553                           
  2554                           ;ConversorAD.c: 48: Estado = 0;
  2555  03D1  01AA               	clrf	ADC_Run@Estado
  2556                           
  2557                           ;ConversorAD.c: 50: }
  2558                           
  2559                           ;ConversorAD.c: 49: break;
  2560  03D2  0008               	return
  2561  03D3                     l1190:	
  2562  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  2563  03D4  1303               	bcf	3,6	;RP1=0, select bank0
  2564  03D5  082A               	movf	ADC_Run@Estado,w
  2565                           
  2566                           ; Switch size 1, requested type "space"
  2567                           ; Number of cases is 2, Range of values is 0 to 1
  2568                           ; switch strategies available:
  2569                           ; Name         Instructions Cycles
  2570                           ; simple_byte            7     4 (average)
  2571                           ; direct_byte           14     8 (fixed)
  2572                           ; jumptable            260     6 (fixed)
  2573                           ; rangetable             6     6 (fixed)
  2574                           ; spacedrange           10     9 (fixed)
  2575                           ; locatedrange           2     3 (fixed)
  2576                           ;	Chosen strategy is simple_byte
  2577  03D6  3A00               	xorlw	0	; case 0
  2578  03D7  1903               	skipnz
  2579  03D8  2BC6               	goto	l1182
  2580  03D9  3A01               	xorlw	1	; case 1
  2581  03DA  1903               	skipnz
  2582  03DB  2BD0               	goto	l115
  2583  03DC  2BDD               	goto	l116
  2584  03DD                     l116:	
  2585  03DD  0008               	return
  2586  03DE                     __end_of_ADC_Run:	
  2587                           
  2588                           	psect	text20
  2589  0104                     __ptext20:	
  2590 ;; *************** function _Interrupcao *****************
  2591 ;; Defined at:
  2592 ;;		line 52 in file "TCC_Main.c"
  2593 ;; Parameters:    Size  Location     Type
  2594 ;;		None
  2595 ;; Auto vars:     Size  Location     Type
  2596 ;;		None
  2597 ;; Return value:  Size  Location     Type
  2598 ;;		None               void
  2599 ;; Registers used:
  2600 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2601 ;; Tracked objects:
  2602 ;;		On entry : 0/0
  2603 ;;		On exit  : 0/0
  2604 ;;		Unchanged: 0/0
  2605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2606 ;;      Params:         0       0       0       0       0
  2607 ;;      Locals:         0       0       0       0       0
  2608 ;;      Temps:          5       0       0       0       0
  2609 ;;      Totals:         5       0       0       0       0
  2610 ;;Total ram usage:        5 bytes
  2611 ;; Hardware stack levels used:    1
  2612 ;; Hardware stack levels required when called:    2
  2613 ;; This function calls:
  2614 ;;		_Serial_Interrupt
  2615 ;;		_ADC_Interrupt
  2616 ;; This function is called by:
  2617 ;;		Interrupt level 1
  2618 ;; This function uses a non-reentrant model
  2619 ;;
  2620                           
  2621                           
  2622                           ;psect for function _Interrupcao
  2623  0104                     _Interrupcao:	
  2624                           
  2625                           ;TCC_Main.c: 53: Serial_Interrupt();
  2626  0104  120A  118A  21D4   	fcall	_Serial_Interrupt
      +       120A  118A         
  2627                           
  2628                           ;TCC_Main.c: 54: ADC_Interrupt();
  2629  0109  120A  118A  241A   	fcall	_ADC_Interrupt
      +       120A  118A         
  2630                           
  2631                           ;TCC_Main.c: 56: if (INTCONbits.T0IF == 1)
  2632  010E  1D0B               	btfss	11,2	;volatile
  2633  010F  293F               	goto	i1l207
  2634                           
  2635                           ;TCC_Main.c: 57: {
  2636                           ;TCC_Main.c: 58: INTCONbits.T0IF = 0;
  2637  0110  110B               	bcf	11,2	;volatile
  2638                           
  2639                           ;TCC_Main.c: 59: TMR0 += 130;
  2640  0111  3082               	movlw	130
  2641  0112  00F8               	movwf	??_Interrupcao
  2642  0113  0878               	movf	??_Interrupcao,w
  2643  0114  1283               	bcf	3,5	;RP0=0, select bank0
  2644  0115  1303               	bcf	3,6	;RP1=0, select bank0
  2645  0116  0781               	addwf	1,f	;volatile
  2646                           
  2647                           ;TCC_Main.c: 60: if (TemporizadorLed > 0)
  2648  0117  0823               	movf	_TemporizadorLed+1,w
  2649  0118  0422               	iorwf	_TemporizadorLed,w
  2650  0119  1903               	skipnz
  2651  011A  2921               	goto	i1l203
  2652                           
  2653                           ;TCC_Main.c: 61: TemporizadorLed --;
  2654  011B  3001               	movlw	1
  2655  011C  02A2               	subwf	_TemporizadorLed,f
  2656  011D  3000               	movlw	0
  2657  011E  1C03               	skipc
  2658  011F  03A3               	decf	_TemporizadorLed+1,f
  2659  0120  02A3               	subwf	_TemporizadorLed+1,f
  2660  0121                     i1l203:	
  2661                           
  2662                           ;TCC_Main.c: 62: if (TemporizadorSerialW > 0)
  2663  0121  0858               	movf	_TemporizadorSerialW+1,w
  2664  0122  0457               	iorwf	_TemporizadorSerialW,w
  2665  0123  1903               	skipnz
  2666  0124  292B               	goto	i1l204
  2667                           
  2668                           ;TCC_Main.c: 63: TemporizadorSerialW--;
  2669  0125  3001               	movlw	1
  2670  0126  02D7               	subwf	_TemporizadorSerialW,f
  2671  0127  3000               	movlw	0
  2672  0128  1C03               	skipc
  2673  0129  03D8               	decf	_TemporizadorSerialW+1,f
  2674  012A  02D8               	subwf	_TemporizadorSerialW+1,f
  2675  012B                     i1l204:	
  2676                           
  2677                           ;TCC_Main.c: 64: if (TemporizadorSerialR > 0)
  2678  012B  0827               	movf	_TemporizadorSerialR+1,w
  2679  012C  0426               	iorwf	_TemporizadorSerialR,w
  2680  012D  1903               	skipnz
  2681  012E  2935               	goto	i1l205
  2682                           
  2683                           ;TCC_Main.c: 65: TemporizadorSerialR--;
  2684  012F  3001               	movlw	1
  2685  0130  02A6               	subwf	_TemporizadorSerialR,f
  2686  0131  3000               	movlw	0
  2687  0132  1C03               	skipc
  2688  0133  03A7               	decf	_TemporizadorSerialR+1,f
  2689  0134  02A7               	subwf	_TemporizadorSerialR+1,f
  2690  0135                     i1l205:	
  2691                           
  2692                           ;TCC_Main.c: 66: if (TemporizadorPortb > 0)
  2693  0135  0825               	movf	_TemporizadorPortb+1,w
  2694  0136  0424               	iorwf	_TemporizadorPortb,w
  2695  0137  1903               	skipnz
  2696  0138  293F               	goto	i1l207
  2697                           
  2698                           ;TCC_Main.c: 67: TemporizadorPortb--;
  2699  0139  3001               	movlw	1
  2700  013A  02A4               	subwf	_TemporizadorPortb,f
  2701  013B  3000               	movlw	0
  2702  013C  1C03               	skipc
  2703  013D  03A5               	decf	_TemporizadorPortb+1,f
  2704  013E  02A5               	subwf	_TemporizadorPortb+1,f
  2705  013F                     i1l207:	
  2706  013F  087C               	movf	??_Interrupcao+4,w
  2707  0140  1283               	bcf	3,5	;RP0=0, select bank0
  2708  0141  1303               	bcf	3,6	;RP1=0, select bank0
  2709  0142  00FF               	movwf	127
  2710  0143  087B               	movf	??_Interrupcao+3,w
  2711  0144  008A               	movwf	10
  2712  0145  087A               	movf	??_Interrupcao+2,w
  2713  0146  0084               	movwf	4
  2714  0147  0E79               	swapf	(??_Interrupcao+1)^(0+-128),w
  2715  0148  0083               	movwf	3
  2716  0149  0EFE               	swapf	126,f
  2717  014A  0E7E               	swapf	126,w
  2718  014B  0009               	retfie
  2719  014C                     __end_of_Interrupcao:	
  2720                           
  2721                           	psect	intentry
  2722  0004                     __pintentry:	
  2723                           ;incstack = 0
  2724                           ; Regs used in _Interrupcao: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2725                           
  2726  0004                     interrupt_function:	
  2727  007E                     saved_w	set	btemp
  2728  0004  00FE               	movwf	btemp
  2729  0005  0E03               	swapf	3,w
  2730  0006  00F9               	movwf	??_Interrupcao+1
  2731  0007  0804               	movf	4,w
  2732  0008  00FA               	movwf	??_Interrupcao+2
  2733  0009  080A               	movf	10,w
  2734  000A  00FB               	movwf	??_Interrupcao+3
  2735  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2736  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2737  000D  087F               	movf	btemp+1,w
  2738  000E  00FC               	movwf	??_Interrupcao+4
  2739  000F  120A  118A  2904   	ljmp	_Interrupcao
  2740                           
  2741                           	psect	text21
  2742  041A                     __ptext21:	
  2743 ;; *************** function _ADC_Interrupt *****************
  2744 ;; Defined at:
  2745 ;;		line 8 in file "ConversorAD.c"
  2746 ;; Parameters:    Size  Location     Type
  2747 ;;		None
  2748 ;; Auto vars:     Size  Location     Type
  2749 ;;		None
  2750 ;; Return value:  Size  Location     Type
  2751 ;;		None               void
  2752 ;; Registers used:
  2753 ;;		wreg, status,2, status,0
  2754 ;; Tracked objects:
  2755 ;;		On entry : 0/0
  2756 ;;		On exit  : 0/0
  2757 ;;		Unchanged: 0/0
  2758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2759 ;;      Params:         0       0       0       0       0
  2760 ;;      Locals:         0       0       0       0       0
  2761 ;;      Temps:          0       0       0       0       0
  2762 ;;      Totals:         0       0       0       0       0
  2763 ;;Total ram usage:        0 bytes
  2764 ;; Hardware stack levels used:    1
  2765 ;; This function calls:
  2766 ;;		Nothing
  2767 ;; This function is called by:
  2768 ;;		_Interrupcao
  2769 ;; This function uses a non-reentrant model
  2770 ;;
  2771                           
  2772                           
  2773                           ;psect for function _ADC_Interrupt
  2774  041A                     _ADC_Interrupt:	
  2775                           
  2776                           ;ConversorAD.c: 9: if (INTCONbits.T0IF == 1)
  2777                           
  2778                           ;incstack = 0
  2779                           ; Regs used in _ADC_Interrupt: [wreg+status,2+status,0]
  2780  041A  1D0B               	btfss	11,2	;volatile
  2781  041B  2C21               	goto	i1l1168
  2782                           
  2783                           ;ConversorAD.c: 10: {
  2784                           ;ConversorAD.c: 11: if(ADC_Temporizador > 0)
  2785  041C  087D               	movf	_ADC_Temporizador,w
  2786  041D  1903               	btfsc	3,2
  2787  041E  2C21               	goto	i1l1168
  2788                           
  2789                           ;ConversorAD.c: 12: ADC_Temporizador--;
  2790  041F  3001               	movlw	1
  2791  0420  02FD               	subwf	_ADC_Temporizador,f
  2792  0421                     i1l1168:	
  2793                           
  2794                           ;ConversorAD.c: 13: }
  2795                           ;ConversorAD.c: 15: if( PIR1bits.ADIF == 1 )
  2796  0421  1283               	bcf	3,5	;RP0=0, select bank0
  2797  0422  1303               	bcf	3,6	;RP1=0, select bank0
  2798  0423  1F0C               	btfss	12,6	;volatile
  2799  0424  0008               	return
  2800                           
  2801                           ;ConversorAD.c: 16: {
  2802                           ;ConversorAD.c: 17: dadoDisponivel = 1;
  2803  0425  01B0               	clrf	_dadoDisponivel
  2804  0426  0AB0               	incf	_dadoDisponivel,f
  2805                           
  2806                           ;ConversorAD.c: 18: PIR1bits.ADIF = 0;
  2807  0427  130C               	bcf	12,6	;volatile
  2808  0428  0008               	return
  2809  0429                     __end_of_ADC_Interrupt:	
  2810                           
  2811                           	psect	text22
  2812  01D4                     __ptext22:	
  2813 ;; *************** function _Serial_Interrupt *****************
  2814 ;; Defined at:
  2815 ;;		line 36 in file "Serial.c"
  2816 ;; Parameters:    Size  Location     Type
  2817 ;;		None
  2818 ;; Auto vars:     Size  Location     Type
  2819 ;;  tmp             1    7[COMMON] unsigned char 
  2820 ;; Return value:  Size  Location     Type
  2821 ;;		None               void
  2822 ;; Registers used:
  2823 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2824 ;; Tracked objects:
  2825 ;;		On entry : 0/0
  2826 ;;		On exit  : 0/0
  2827 ;;		Unchanged: 0/0
  2828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2829 ;;      Params:         0       0       0       0       0
  2830 ;;      Locals:         1       0       0       0       0
  2831 ;;      Temps:          1       0       0       0       0
  2832 ;;      Totals:         2       0       0       0       0
  2833 ;;Total ram usage:        2 bytes
  2834 ;; Hardware stack levels used:    1
  2835 ;; Hardware stack levels required when called:    1
  2836 ;; This function calls:
  2837 ;;		i1_inserir
  2838 ;;		i1_remover
  2839 ;;		i1_estaVazia
  2840 ;;		i1_estaCheia
  2841 ;; This function is called by:
  2842 ;;		_Interrupcao
  2843 ;; This function uses a non-reentrant model
  2844 ;;
  2845                           
  2846                           
  2847                           ;psect for function _Serial_Interrupt
  2848  01D4                     _Serial_Interrupt:	
  2849                           
  2850                           ;Serial.c: 37: if (PIR1bits.TXIF == 1 && TXSTAbits.TRMT == 1)
  2851                           
  2852                           ;incstack = 0
  2853                           ; Regs used in _Serial_Interrupt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2854  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  2855  01D5  1303               	bcf	3,6	;RP1=0, select bank0
  2856  01D6  1E0C               	btfss	12,4	;volatile
  2857  01D7  29F1               	goto	i1l1386
  2858  01D8  1683               	bsf	3,5	;RP0=1, select bank1
  2859  01D9  1303               	bcf	3,6	;RP1=0, select bank1
  2860  01DA  1C98               	btfss	24,1	;volatile
  2861  01DB  29F1               	goto	i1l1386
  2862                           
  2863                           ;Serial.c: 38: {
  2864                           ;Serial.c: 39: PIR1bits.TXIF = 0;
  2865  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  2866  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  2867  01DE  120C               	bcf	12,4	;volatile
  2868                           
  2869                           ;Serial.c: 40: if(!estaVazia(&BufferWrite))
  2870  01DF  3044               	movlw	_BufferWrite& (0+255)
  2871  01E0  120A  118A  245B   	fcall	i1_estaVazia
      +       120A  118A         
  2872  01E5  3800               	iorlw	0
  2873  01E6  1D03               	skipz
  2874  01E7  29F1               	goto	i1l1386
  2875                           
  2876                           ;Serial.c: 41: {
  2877                           ;Serial.c: 42: TXREG = remover(&BufferWrite);
  2878  01E8  3044               	movlw	_BufferWrite& (0+255)
  2879  01E9  120A  118A  2318   	fcall	i1_remover
      +       120A  118A         
  2880  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  2881  01EF  1303               	bcf	3,6	;RP1=0, select bank0
  2882  01F0  0099               	movwf	25	;volatile
  2883  01F1                     i1l1386:	
  2884                           
  2885                           ;Serial.c: 43: }
  2886                           ;Serial.c: 44: }
  2887                           ;Serial.c: 46: if(RCSTAbits.OERR == 1)
  2888  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  2889  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  2890  01F3  1C98               	btfss	24,1	;volatile
  2891  01F4  29FF               	goto	i1l1394
  2892                           
  2893                           ;Serial.c: 47: {
  2894                           ;Serial.c: 48: char tmp = RCREG;
  2895  01F5  081A               	movf	26,w	;volatile
  2896  01F6  00F6               	movwf	??_Serial_Interrupt
  2897  01F7  0876               	movf	??_Serial_Interrupt,w
  2898  01F8  00F7               	movwf	Serial_Interrupt@tmp
  2899                           
  2900                           ;Serial.c: 49: tmp = RCREG;
  2901  01F9  081A               	movf	26,w	;volatile
  2902  01FA  00F6               	movwf	??_Serial_Interrupt
  2903  01FB  0876               	movf	??_Serial_Interrupt,w
  2904  01FC  00F7               	movwf	Serial_Interrupt@tmp
  2905                           
  2906                           ;Serial.c: 50: RCSTAbits.CREN = 0;
  2907  01FD  1218               	bcf	24,4	;volatile
  2908                           
  2909                           ;Serial.c: 51: RCSTAbits.CREN = 1;
  2910  01FE  1618               	bsf	24,4	;volatile
  2911  01FF                     i1l1394:	
  2912                           
  2913                           ;Serial.c: 52: }
  2914                           ;Serial.c: 54: if (PIR1bits.RCIF == 1)
  2915  01FF  1E8C               	btfss	12,5	;volatile
  2916  0200  0008               	return
  2917                           
  2918                           ;Serial.c: 55: {
  2919                           ;Serial.c: 57: if(!estaCheia(&BufferRead))
  2920  0201  3031               	movlw	_BufferRead& (0+255)
  2921  0202  120A  118A  2450   	fcall	i1_estaCheia
      +       120A  118A         
  2922  0207  3800               	iorlw	0
  2923  0208  1D03               	skipz
  2924  0209  0008               	return
  2925                           
  2926                           ;Serial.c: 58: inserir(&BufferRead, RCREG);
  2927  020A  1283               	bcf	3,5	;RP0=0, select bank0
  2928  020B  1303               	bcf	3,6	;RP1=0, select bank0
  2929  020C  081A               	movf	26,w	;volatile
  2930  020D  00F6               	movwf	??_Serial_Interrupt
  2931  020E  0876               	movf	??_Serial_Interrupt,w
  2932  020F  00F0               	movwf	?i1_inserir
  2933  0210  3031               	movlw	_BufferRead& (0+255)
  2934  0211  120A  118A  2342   	fcall	i1_inserir
  2935  0214  0008               	return
  2936  0215                     __end_of_Serial_Interrupt:	
  2937                           
  2938                           	psect	text23
  2939  0450                     __ptext23:	
  2940 ;; *************** function i1_estaCheia *****************
  2941 ;; Defined at:
  2942 ;;		line 117 in file "Serial.c"
  2943 ;; Parameters:    Size  Location     Type
  2944 ;;  estaCheia       1    wreg     PTR struct fila
  2945 ;;		 -> BufferRead(19), BufferWrite(19), 
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;  estaCheia       1    0[COMMON] PTR struct fila
  2948 ;;		 -> BufferRead(19), BufferWrite(19), 
  2949 ;; Return value:  Size  Location     Type
  2950 ;;                  1    wreg      unsigned char 
  2951 ;; Registers used:
  2952 ;;		wreg, fsr0l, fsr0h
  2953 ;; Tracked objects:
  2954 ;;		On entry : 0/0
  2955 ;;		On exit  : 0/0
  2956 ;;		Unchanged: 0/0
  2957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2958 ;;      Params:         0       0       0       0       0
  2959 ;;      Locals:         1       0       0       0       0
  2960 ;;      Temps:          0       0       0       0       0
  2961 ;;      Totals:         1       0       0       0       0
  2962 ;;Total ram usage:        1 bytes
  2963 ;; Hardware stack levels used:    1
  2964 ;; This function calls:
  2965 ;;		Nothing
  2966 ;; This function is called by:
  2967 ;;		_Serial_Interrupt
  2968 ;; This function uses a non-reentrant model
  2969 ;;
  2970                           
  2971                           
  2972                           ;psect for function i1_estaCheia
  2973  0450                     i1_estaCheia:	
  2974                           
  2975                           ;incstack = 0
  2976                           ; Regs used in i1_estaCheia: [wregfsr0]
  2977                           ;i1estaCheia@buf stored from wreg
  2978  0450  00F0               	movwf	i1estaCheia@buf
  2979                           
  2980                           ;Serial.c: 118: return (buf->nItens==16);
  2981  0451  0870               	movf	i1estaCheia@buf,w
  2982  0452  3E12               	addlw	18
  2983  0453  0084               	movwf	4
  2984  0454  1383               	bcf	3,7	;select IRP bank0
  2985  0455  0800               	movf	0,w
  2986  0456  3A10               	xorlw	16
  2987  0457  3000               	movlw	0
  2988  0458  1903               	skipnz
  2989  0459  3001               	movlw	1
  2990  045A  0008               	return
  2991  045B                     __end_ofi1_estaCheia:	
  2992                           
  2993                           	psect	text24
  2994  045B                     __ptext24:	
  2995 ;; *************** function i1_estaVazia *****************
  2996 ;; Defined at:
  2997 ;;		line 112 in file "Serial.c"
  2998 ;; Parameters:    Size  Location     Type
  2999 ;;  estaVazia       1    wreg     PTR struct fila
  3000 ;;		 -> BufferRead(19), BufferWrite(19), 
  3001 ;; Auto vars:     Size  Location     Type
  3002 ;;  estaVazia       1    0[COMMON] PTR struct fila
  3003 ;;		 -> BufferRead(19), BufferWrite(19), 
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  1    wreg      unsigned char 
  3006 ;; Registers used:
  3007 ;;		wreg, fsr0l, fsr0h
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3013 ;;      Params:         0       0       0       0       0
  3014 ;;      Locals:         1       0       0       0       0
  3015 ;;      Temps:          0       0       0       0       0
  3016 ;;      Totals:         1       0       0       0       0
  3017 ;;Total ram usage:        1 bytes
  3018 ;; Hardware stack levels used:    1
  3019 ;; This function calls:
  3020 ;;		Nothing
  3021 ;; This function is called by:
  3022 ;;		_Serial_Interrupt
  3023 ;; This function uses a non-reentrant model
  3024 ;;
  3025                           
  3026                           
  3027                           ;psect for function i1_estaVazia
  3028  045B                     i1_estaVazia:	
  3029                           
  3030                           ;incstack = 0
  3031                           ; Regs used in i1_estaVazia: [wregfsr0]
  3032                           ;i1estaVazia@buf stored from wreg
  3033  045B  00F0               	movwf	i1estaVazia@buf
  3034                           
  3035                           ;Serial.c: 113: return (buf->nItens==0);
  3036  045C  0870               	movf	i1estaVazia@buf,w
  3037  045D  3E12               	addlw	18
  3038  045E  0084               	movwf	4
  3039  045F  1383               	bcf	3,7	;select IRP bank0
  3040  0460  0880               	movf	0,f
  3041  0461  3000               	movlw	0
  3042  0462  1903               	skipnz
  3043  0463  3001               	movlw	1
  3044  0464  0008               	return
  3045  0465                     __end_ofi1_estaVazia:	
  3046                           
  3047                           	psect	text25
  3048  0318                     __ptext25:	
  3049 ;; *************** function i1_remover *****************
  3050 ;; Defined at:
  3051 ;;		line 101 in file "Serial.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;  remover         1    wreg     PTR struct fila
  3054 ;;		 -> BufferRead(19), BufferWrite(19), 
  3055 ;; Auto vars:     Size  Location     Type
  3056 ;;  remover         1    5[COMMON] PTR struct fila
  3057 ;;		 -> BufferRead(19), BufferWrite(19), 
  3058 ;;  remover         2    3[COMMON] int 
  3059 ;; Return value:  Size  Location     Type
  3060 ;;                  1    wreg      unsigned char 
  3061 ;; Registers used:
  3062 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3063 ;; Tracked objects:
  3064 ;;		On entry : 0/0
  3065 ;;		On exit  : 0/0
  3066 ;;		Unchanged: 0/0
  3067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3068 ;;      Params:         0       0       0       0       0
  3069 ;;      Locals:         3       0       0       0       0
  3070 ;;      Temps:          3       0       0       0       0
  3071 ;;      Totals:         6       0       0       0       0
  3072 ;;Total ram usage:        6 bytes
  3073 ;; Hardware stack levels used:    1
  3074 ;; This function calls:
  3075 ;;		Nothing
  3076 ;; This function is called by:
  3077 ;;		_Serial_Interrupt
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081                           
  3082                           ;psect for function i1_remover
  3083  0318                     i1_remover:	
  3084                           
  3085                           ;incstack = 0
  3086                           ; Regs used in i1_remover: [wreg-fsr0h+status,2+status,0]
  3087                           ;i1remover@buf stored from wreg
  3088  0318  00F5               	movwf	i1remover@buf
  3089                           
  3090                           ;Serial.c: 102: int temp = buf->dados[buf->primeiro++];
  3091  0319  0875               	movf	i1remover@buf,w
  3092  031A  3E10               	addlw	16
  3093  031B  0084               	movwf	4
  3094  031C  1383               	bcf	3,7	;select IRP bank0
  3095  031D  0800               	movf	0,w
  3096  031E  0775               	addwf	i1remover@buf,w
  3097  031F  00F0               	movwf	??i1_remover
  3098  0320  0870               	movf	??i1_remover,w
  3099  0321  0084               	movwf	4
  3100  0322  0800               	movf	0,w
  3101  0323  00F1               	movwf	??i1_remover+1
  3102  0324  01F2               	clrf	??i1_remover+2
  3103  0325  0871               	movf	??i1_remover+1,w
  3104  0326  00F3               	movwf	i1remover@temp
  3105  0327  0872               	movf	??i1_remover+2,w
  3106  0328  00F4               	movwf	i1remover@temp+1
  3107  0329  3001               	movlw	1
  3108  032A  00F0               	movwf	??i1_remover
  3109  032B  0875               	movf	i1remover@buf,w
  3110  032C  3E10               	addlw	16
  3111  032D  0084               	movwf	4
  3112  032E  0870               	movf	??i1_remover,w
  3113  032F  0780               	addwf	0,f
  3114                           
  3115                           ;Serial.c: 104: if(buf->primeiro == 16)
  3116  0330  0875               	movf	i1remover@buf,w
  3117  0331  3E10               	addlw	16
  3118  0332  0084               	movwf	4
  3119  0333  0800               	movf	0,w
  3120  0334  3A10               	xorlw	16
  3121  0335  1D03               	skipz
  3122  0336  2B3B               	goto	i1l1362
  3123                           
  3124                           ;Serial.c: 105: buf->primeiro = 0;
  3125  0337  0875               	movf	i1remover@buf,w
  3126  0338  3E10               	addlw	16
  3127  0339  0084               	movwf	4
  3128  033A  0180               	clrf	0
  3129  033B                     i1l1362:	
  3130                           
  3131                           ;Serial.c: 107: buf->nItens--;
  3132  033B  0875               	movf	i1remover@buf,w
  3133  033C  3E12               	addlw	18
  3134  033D  0084               	movwf	4
  3135  033E  3001               	movlw	1
  3136  033F  0280               	subwf	0,f
  3137                           
  3138                           ;Serial.c: 108: return temp;
  3139  0340  0873               	movf	i1remover@temp,w
  3140  0341  0008               	return
  3141  0342                     __end_ofi1_remover:	
  3142                           
  3143                           	psect	text26
  3144  0342                     __ptext26:	
  3145 ;; *************** function i1_inserir *****************
  3146 ;; Defined at:
  3147 ;;		line 91 in file "Serial.c"
  3148 ;; Parameters:    Size  Location     Type
  3149 ;;  inserir         1    wreg     PTR struct fila
  3150 ;;		 -> BufferRead(19), BufferWrite(19), 
  3151 ;;  inserir         1    0[COMMON] unsigned char 
  3152 ;; Auto vars:     Size  Location     Type
  3153 ;;  inserir         1    3[COMMON] PTR struct fila
  3154 ;;		 -> BufferRead(19), BufferWrite(19), 
  3155 ;; Return value:  Size  Location     Type
  3156 ;;		None               void
  3157 ;; Registers used:
  3158 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3159 ;; Tracked objects:
  3160 ;;		On entry : 0/0
  3161 ;;		On exit  : 0/0
  3162 ;;		Unchanged: 0/0
  3163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3164 ;;      Params:         1       0       0       0       0
  3165 ;;      Locals:         1       0       0       0       0
  3166 ;;      Temps:          2       0       0       0       0
  3167 ;;      Totals:         4       0       0       0       0
  3168 ;;Total ram usage:        4 bytes
  3169 ;; Hardware stack levels used:    1
  3170 ;; This function calls:
  3171 ;;		Nothing
  3172 ;; This function is called by:
  3173 ;;		_Serial_Interrupt
  3174 ;; This function uses a non-reentrant model
  3175 ;;
  3176                           
  3177                           
  3178                           ;psect for function i1_inserir
  3179  0342                     i1_inserir:	
  3180                           
  3181                           ;incstack = 0
  3182                           ; Regs used in i1_inserir: [wreg-fsr0h+status,2+status,0]
  3183                           ;i1inserir@buf stored from wreg
  3184  0342  00F3               	movwf	i1inserir@buf
  3185                           
  3186                           ;Serial.c: 92: buf->dados[buf->ultimo] = Valor;
  3187  0343  0870               	movf	i1inserir@Valor,w
  3188  0344  00F1               	movwf	??i1_inserir
  3189  0345  0873               	movf	i1inserir@buf,w
  3190  0346  3E11               	addlw	17
  3191  0347  0084               	movwf	4
  3192  0348  1383               	bcf	3,7	;select IRP bank0
  3193  0349  0800               	movf	0,w
  3194  034A  0773               	addwf	i1inserir@buf,w
  3195  034B  00F2               	movwf	??i1_inserir+1
  3196  034C  0872               	movf	??i1_inserir+1,w
  3197  034D  0084               	movwf	4
  3198  034E  0871               	movf	??i1_inserir,w
  3199  034F  0080               	movwf	0
  3200                           
  3201                           ;Serial.c: 93: buf->ultimo++;
  3202  0350  3001               	movlw	1
  3203  0351  00F1               	movwf	??i1_inserir
  3204  0352  0873               	movf	i1inserir@buf,w
  3205  0353  3E11               	addlw	17
  3206  0354  0084               	movwf	4
  3207  0355  0871               	movf	??i1_inserir,w
  3208  0356  0780               	addwf	0,f
  3209                           
  3210                           ;Serial.c: 94: buf->nItens++;
  3211  0357  3001               	movlw	1
  3212  0358  00F1               	movwf	??i1_inserir
  3213  0359  0873               	movf	i1inserir@buf,w
  3214  035A  3E12               	addlw	18
  3215  035B  0084               	movwf	4
  3216  035C  0871               	movf	??i1_inserir,w
  3217  035D  0780               	addwf	0,f
  3218                           
  3219                           ;Serial.c: 96: if(buf->ultimo == 16)
  3220  035E  0873               	movf	i1inserir@buf,w
  3221  035F  3E11               	addlw	17
  3222  0360  0084               	movwf	4
  3223  0361  0800               	movf	0,w
  3224  0362  3A10               	xorlw	16
  3225  0363  1D03               	skipz
  3226  0364  0008               	return
  3227                           
  3228                           ;Serial.c: 97: buf->ultimo = 0;
  3229  0365  0873               	movf	i1inserir@buf,w
  3230  0366  3E11               	addlw	17
  3231  0367  0084               	movwf	4
  3232  0368  0180               	clrf	0
  3233  0369  0008               	return
  3234  036A                     __end_ofi1_inserir:	
  3235  007E                     btemp	set	126	;btemp
  3236  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        3
    BSS         56
    Persistent  11
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     11      80
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?_ADC_Read	int  size(1) Largest target is 0

    estaCheia@buf	PTR struct fila size(1) Largest target is 19
		 -> BufferRead(BANK0[19]), BufferWrite(BANK0[19]), 

    estaVazia@buf	PTR struct fila size(1) Largest target is 19
		 -> BufferRead(BANK0[19]), BufferWrite(BANK0[19]), 

    remover@buf	PTR struct fila size(1) Largest target is 19
		 -> BufferRead(BANK0[19]), BufferWrite(BANK0[19]), 

    inserir@buf	PTR struct fila size(1) Largest target is 19
		 -> BufferRead(BANK0[19]), BufferWrite(BANK0[19]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _Interrupcao in COMMON

    _Interrupcao->_Serial_Interrupt
    _Serial_Interrupt->i1_remover

Critical Paths under _main in BANK0

    _main->_MedirTensao
    _Setup->_ADC_Init
    _Setup->_ADC_Select_Channel
    _MedirTensao->___lwdiv
    _Serial_Available->_estaVazia
    _Serial_Read->_remover
    _EnvioDadosSerial->_Serial_Write
    _Serial_Write->_inserir

Critical Paths under _Interrupcao in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupcao in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupcao in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interrupcao in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     737
                            _ADC_Run
                   _EnvioDadosSerial
                    _TrataComandoESP
                        _ControleLed
                        _MedirTensao
                              _Setup
 ---------------------------------------------------------------------------------
 (1) _Setup                                                1     1      0      88
                                              3 BANK0      1     1      0
                   _Serial_9600_Init
                           _ADC_Init
                 _ADC_Select_Channel
 ---------------------------------------------------------------------------------
 (2) _ADC_Select_Channel                                   3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     2      1      44
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _Serial_9600_Init                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MedirTensao                                          3     3      0     207
                                              8 BANK0      3     3      0
                           _ADC_Read
                      _ADC_Available
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     162
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _ADC_Available                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Read                                             2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ControleLed                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TrataComandoESP                                      2     2      0     244
                                              6 BANK0      2     2      0
                        _Serial_Read
                   _Serial_Available
 ---------------------------------------------------------------------------------
 (2) _Serial_Available                                     0     0      0      22
                          _estaVazia
 ---------------------------------------------------------------------------------
 (2) _Serial_Read                                          0     0      0     177
                          _estaVazia
                            _remover
 ---------------------------------------------------------------------------------
 (3) _remover                                              6     6      0     155
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) _estaVazia                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _EnvioDadosSerial                                     0     0      0     198
                       _Serial_Write
 ---------------------------------------------------------------------------------
 (2) _Serial_Write                                         2     2      0     198
                                              4 BANK0      2     2      0
                          _estaCheia
                            _inserir
 ---------------------------------------------------------------------------------
 (3) _inserir                                              4     3      1     154
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _estaCheia                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Run                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Interrupcao                                          5     5      0    1172
                                              8 COMMON     5     5      0
                   _Serial_Interrupt
                      _ADC_Interrupt
 ---------------------------------------------------------------------------------
 (5) _ADC_Interrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Serial_Interrupt                                     2     2      0    1172
                                              6 COMMON     2     2      0
                          i1_inserir
                          i1_remover
                        i1_estaVazia
                        i1_estaCheia
 ---------------------------------------------------------------------------------
 (6) i1_estaCheia                                          1     1      0      73
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) i1_estaVazia                                          1     1      0      73
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) i1_remover                                            6     6      0     513
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (6) i1_inserir                                            4     3      1     511
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Run
   _EnvioDadosSerial
     _Serial_Write
       _estaCheia
       _inserir
   _TrataComandoESP
     _Serial_Read
       _estaVazia
       _remover
     _Serial_Available
       _estaVazia
   _ControleLed
   _MedirTensao
     _ADC_Read
     _ADC_Available
     ___lwdiv
   _Setup
     _Serial_9600_Init
     _ADC_Init
     _ADC_Select_Channel

 _Interrupcao (ROOT)
   _Serial_Interrupt
     i1_inserir
     i1_remover
     i1_estaVazia
     i1_estaCheia
   _ADC_Interrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      B      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      67      12        0.0%
ABS                  0      0      5E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       9       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Thu Oct 13 09:53:23 2016

                __CFG_CP$OFF 0000                           l35 02B5                           fsr 0004  
   __end_of_EnvioDadosSerial 009C            ??_TrataComandoESP 0068                          l115 03D0  
                        l116 03DD                          l225 00C1                          l251 01D3  
                        l228 00E0                          l246 01A0                          l258 0175  
                        l266 036F                 __CFG_CPD$OFF 0000                          u535 03FF  
                        u705 022E                          u715 023A                          u725 0244  
                        u665 016D                          u685 0222                          _RTC 0020  
                        _aux 0028                          fsr0 0004                          indf 0000  
            __end_of_ADC_Run 03DE                ??_ControleLed 0062                 __CFG_FOSC$HS 0000  
              ??_MedirTensao 006A        TrataComandoESP@Estado 002D                 __CFG_LVP$OFF 0000  
                       l1104 02A0                         l1112 02A9                         l1106 02A2  
                       l1220 00B8                         l1108 02A4                         l1126 02E7  
                       l1230 00D0                         l1214 00A7                         l1240 00E1  
                       l1154 0418                         l1234 00DD                         l1242 00F7  
                       l1252 0198                         l1182 03C6                         l1190 03D3  
                       l1270 01BD                         l1262 01AD                         l1342 0243  
                       l1334 021F                         l1336 022D                         l1266 01B3  
                       l1346 024E                         l1290 017A                         l1278 01C4  
                       _TMR0 0001                 __CFG_WRT$OFF 0000                         _main 036A  
                       btemp 007E             __end_of_ADC_Init 03C5             __end_of_ADC_Read 0437  
              __CFG_BOREN$ON 0000                         start 0012   __end_of_ADC_Select_Channel 040A  
                i1_estaCheia 0450                  i1_estaVazia 045B                        ?_main 0070  
              __CFG_WDTE$OFF 0000              __end_of___lwdiv 0255                        i1l203 0121  
                      i1l204 012B                        i1l205 0135                        i1l207 013F  
                      _RCREG 001A                        _RCSTA 0018                        _SPBRG 0099  
                      _PORTB 0006                        _PORTD 0008                   _BufferRead 0031  
                      _TRISA 0085                        _TRISB 0086                        _TRISD 0088  
                      _TXREG 0019                        _TXSTA 0098                 MedirTensao@n 002C  
                      _Setup 0255          _TemporizadorSerialR 0026          _TemporizadorSerialW 0057  
            __end_of_inserir 0318                        pclath 000A              __end_of_remover 02EE  
        __end_of_ControleLed 01D4                        status 0003                        wtemp0 007E  
        __end_of_MedirTensao 0191                ??_Interrupcao 0078              __initialization 0389  
               __end_of_main 0389           __size_ofi1_inserir 0028       __size_of_ADC_Available 0004  
         __size_ofi1_remover 002A                    ??_ADC_Run 0062                       ??_main 006D  
                     ?_Setup 0070                       _ADCON0 001F                       _ADCON1 009F  
                     _ADRESH 001E                       _ADRESL 009E             _Serial_9600_Init 0294  
                     i1l1168 0421                       i1l1362 033B                       i1l1394 01FF  
                     i1l1386 01F1                       _INTCON 000B       __size_of_ADC_Interrupt 000F  
                     _SSPADD 0093                       _TRISC3 043B                       _TRISC4 043C  
              ??_Serial_Read 0068                       _SSPCON 0014                  _BufferWrite 0044  
          ControleLed@Estado 002B               __CFG_PWRTE$OFF 0000                       _Tensao 006D  
                  ??___lwdiv 0066          __end_of_Interrupcao 014C                    ??_inserir 0063  
                  ?_ADC_Init 0062                    ?_ADC_Read 0062                 estaCheia@buf 0062  
                     saved_w 007E                    ??_remover 0062                  _ControleLed 0191  
  __size_of_Serial_Available 0009                  _MedirTensao 014C                _ADC_Available 0476  
          __end_ofi1_inserir 036A            __end_ofi1_remover 0342      __end_of__initialization 03A3  
            _TrataComandoESP 009C               __pcstackCOMMON 0070                __end_of_Setup 0294  
        __end_of_Serial_Read 041A                 __pidataBANK0 047A            _TemporizadorPortb 0024  
  __size_of_Serial_Interrupt 0041                _ADC_Interrupt 041A            ?_EnvioDadosSerial 0070  
                 ??_ADC_Init 0063                   ??_ADC_Read 0064           ??_EnvioDadosSerial 0068  
                    ??_Setup 0065               i1estaCheia@buf 0070               ?_ADC_Available 0070  
                 __pbssBANK0 0020           __size_of_estaCheia 000D                ?_Serial_Write 0070  
         __size_of_estaVazia 000C                 estaVazia@buf 0062                   _clearPORTB 002E  
                _Interrupcao 0104                   __pmaintext 036A                   __pintentry 0004  
               ?i1_estaCheia 0070               ?_ADC_Interrupt 0070                      _ADC_Run 03C5  
               ?i1_estaVazia 0070           _ADC_Select_Channel 03F5                      _SSPCON2 0091  
                    _SSPSTAT 0094               ??_Serial_Write 0066          ?_ADC_Select_Channel 0070  
    __end_of_TrataComandoESP 0104                  _Serial_Read 040A               i1estaVazia@buf 0070  
               i1inserir@buf 0073                      ___lwdiv 0215         ??_ADC_Select_Channel 0062  
   __end_of_Serial_9600_Init 02C2            __end_of_estaCheia 0444                      __ptext1 0255  
                    __ptext2 03F5                      __ptext3 03A7                      __ptext4 0294  
                    __ptext5 014C                      __ptext6 0215                      __ptext7 0476  
                    __ptext8 0429                      __ptext9 0191            __end_of_estaVazia 0450  
                remover@temp 0065                      _inserir 02EE            Serial_Write@Valor 0067  
            ??_ADC_Available 0062                      _remover 02C2             _Serial_Available 0465  
                    clrloop0 046F         end_of_initialization 03A3         ADC_Select_Channel@ch 0064  
                  _RCSTAbits 0018             _ADC_Temporizador 007D              ??_ADC_Interrupt 0070  
           _Serial_Interrupt 01D4                 i1remover@buf 0075                    _PORTDbits 0008  
               ?_ControleLed 0070            __size_of_ADC_Init 001E            __size_of_ADC_Read 000E  
               ?_MedirTensao 0070             ?_TrataComandoESP 0070                    _TXSTAbits 0098  
                  i1_inserir 0342                    i1_remover 0318     Serial_9600_Init@osc_freq 0062  
               inserir@Valor 0062         __end_of_Serial_Write 03F5         __size_ofi1_estaCheia 000B  
       __size_ofi1_estaVazia 000A          start_initialization 0389    __size_of_EnvioDadosSerial 0087  
                 ?i1_inserir 0070                 ?_Interrupcao 0070                   ?i1_remover 0070  
             ADC_Init@config 0062               _dadoDisponivel 0030                  __pdataBANK0 006D  
                   ?_ADC_Run 0070               i1inserir@Valor 0070                  __pbssCOMMON 007D  
              __pcstackBANK0 0062                   inserir@buf 0065                 ?_Serial_Read 0070  
                  __pnvBANK0 0057             ___lwdiv@dividend 0064     __end_of_Serial_Available 046E  
                   ?___lwdiv 0062                    _conectado 002F            ?_Serial_9600_Init 0070  
         ??_Serial_9600_Init 0062                    _estaCheia 0437                     ?_inserir 0062  
                   _ADC_Init 03A7                     _ADC_Read 0429                    _estaVazia 0444  
                   ?_remover 0070               __size_of_Setup 003F             ___lwdiv@quotient 0067  
       __size_of_ControleLed 0043     __end_of_Serial_Interrupt 0215                   remover@buf 0067  
       __size_of_MedirTensao 0045            interrupt_function 0004                  ??i1_inserir 0071  
                  clear_ram0 046E                     _PIE1bits 008C                  ??i1_remover 0070  
                   _PIR1bits 000C        __size_of_Serial_Write 0017  __size_of_ADC_Select_Channel 0015  
                 _ADCON0bits 001F             __size_of_ADC_Run 0019                   ?_estaCheia 0070  
                 ?_estaVazia 0070        __end_of_ADC_Available 047A                 _Serial_Write 03DE  
           _EnvioDadosSerial 0015                     _ModuloCM 0059         __size_of_Interrupcao 0048  
              ADC_Init@trisa 0064        __end_of_ADC_Interrupt 0429             __size_of___lwdiv 0040  
            _TemporizadorLed 0022             __size_of_inserir 002A              ___lwdiv@divisor 0062  
            ___lwdiv@counter 0069                     __ptext10 009C                     __ptext11 0465  
                   __ptext20 0104                     __ptext12 040A                     __ptext21 041A  
                   __ptext13 02C2                     __ptext22 01D4                     __ptext14 0444  
                   __ptext23 0450                     __ptext15 0015                     __ptext24 045B  
                   __ptext16 03DE                     __ptext25 0318                     __ptext17 02EE  
                   __ptext26 0342                     __ptext18 0437                     __ptext19 03C5  
           __size_of_remover 002C                __size_of_main 001F         __size_of_Serial_Read 0010  
              ADC_Run@Estado 002A     __size_of_TrataComandoESP 0068                ??i1_estaCheia 0070  
              ??i1_estaVazia 0070           TrataComandoESP@cmd 0069                  ??_estaCheia 0062  
                 _INTCONbits 000B                  ??_estaVazia 0062          Serial_Interrupt@tmp 0077  
                   intlevel1 0000     MedirTensao@ultimaLeitura 006B            ?_Serial_Available 0070  
         ??_Serial_Available 0063                   _OPTION_REG 0081          __end_ofi1_estaCheia 045B  
              i1remover@temp 0073          __end_ofi1_estaVazia 0465                  _SSPCON2bits 0091  
  __size_of_Serial_9600_Init 002E            ?_Serial_Interrupt 0070           ??_Serial_Interrupt 0076  
